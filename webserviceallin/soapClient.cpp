/* soapClient.cpp
   Generated by gSOAP 2.8.111 for .\web_service_allin.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.111 2021-02-24 08:41:07 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___MAC__fetchRobotConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, MAC__fetchRobotConfig *MAC__fetchRobotConfig_, MAC__fetchRobotConfigResponse &MAC__fetchRobotConfigResponse_)
{	if (soap_send___MAC__fetchRobotConfig(soap, soap_endpoint, soap_action, MAC__fetchRobotConfig_) || soap_recv___MAC__fetchRobotConfig(soap, MAC__fetchRobotConfigResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___MAC__fetchRobotConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, MAC__fetchRobotConfig *MAC__fetchRobotConfig_)
{	struct __MAC__fetchRobotConfig soap_tmp___MAC__fetchRobotConfig;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:9090/WorkHelper/ws/machineWSService";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___MAC__fetchRobotConfig.MAC__fetchRobotConfig_ = MAC__fetchRobotConfig_;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___MAC__fetchRobotConfig(soap, &soap_tmp___MAC__fetchRobotConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___MAC__fetchRobotConfig(soap, &soap_tmp___MAC__fetchRobotConfig, "-MAC:fetchRobotConfig", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___MAC__fetchRobotConfig(soap, &soap_tmp___MAC__fetchRobotConfig, "-MAC:fetchRobotConfig", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___MAC__fetchRobotConfig(struct soap *soap, MAC__fetchRobotConfigResponse &MAC__fetchRobotConfigResponse_)
{
	MAC__fetchRobotConfigResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	MAC__fetchRobotConfigResponse_.soap_get(soap, "MAC:fetchRobotConfigResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MAC__GetLineServerInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, MAC__GetLineServerInfo *MAC__GetLineServerInfo_, MAC__GetLineServerInfoResponse &MAC__GetLineServerInfoResponse_)
{	if (soap_send___MAC__GetLineServerInfo(soap, soap_endpoint, soap_action, MAC__GetLineServerInfo_) || soap_recv___MAC__GetLineServerInfo(soap, MAC__GetLineServerInfoResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___MAC__GetLineServerInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, MAC__GetLineServerInfo *MAC__GetLineServerInfo_)
{	struct __MAC__GetLineServerInfo soap_tmp___MAC__GetLineServerInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:9090/WorkHelper/ws/machineWSService";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___MAC__GetLineServerInfo.MAC__GetLineServerInfo_ = MAC__GetLineServerInfo_;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___MAC__GetLineServerInfo(soap, &soap_tmp___MAC__GetLineServerInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___MAC__GetLineServerInfo(soap, &soap_tmp___MAC__GetLineServerInfo, "-MAC:GetLineServerInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___MAC__GetLineServerInfo(soap, &soap_tmp___MAC__GetLineServerInfo, "-MAC:GetLineServerInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___MAC__GetLineServerInfo(struct soap *soap, MAC__GetLineServerInfoResponse &MAC__GetLineServerInfoResponse_)
{
	MAC__GetLineServerInfoResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	MAC__GetLineServerInfoResponse_.soap_get(soap, "MAC:GetLineServerInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MAC__addRobotRunState(struct soap *soap, const char *soap_endpoint, const char *soap_action, MAC__addRobotRunState *MAC__addRobotRunState_, MAC__addRobotRunStateResponse &MAC__addRobotRunStateResponse_)
{	if (soap_send___MAC__addRobotRunState(soap, soap_endpoint, soap_action, MAC__addRobotRunState_) || soap_recv___MAC__addRobotRunState(soap, MAC__addRobotRunStateResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___MAC__addRobotRunState(struct soap *soap, const char *soap_endpoint, const char *soap_action, MAC__addRobotRunState *MAC__addRobotRunState_)
{	struct __MAC__addRobotRunState soap_tmp___MAC__addRobotRunState;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:9090/WorkHelper/ws/machineWSService";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___MAC__addRobotRunState.MAC__addRobotRunState_ = MAC__addRobotRunState_;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___MAC__addRobotRunState(soap, &soap_tmp___MAC__addRobotRunState);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___MAC__addRobotRunState(soap, &soap_tmp___MAC__addRobotRunState, "-MAC:addRobotRunState", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___MAC__addRobotRunState(soap, &soap_tmp___MAC__addRobotRunState, "-MAC:addRobotRunState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___MAC__addRobotRunState(struct soap *soap, MAC__addRobotRunStateResponse &MAC__addRobotRunStateResponse_)
{
	MAC__addRobotRunStateResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	MAC__addRobotRunStateResponse_.soap_get(soap, "MAC:addRobotRunStateResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MAC__GetLineServerList(struct soap *soap, const char *soap_endpoint, const char *soap_action, MAC__GetLineServerList *MAC__GetLineServerList_, MAC__GetLineServerListResponse &MAC__GetLineServerListResponse_)
{	if (soap_send___MAC__GetLineServerList(soap, soap_endpoint, soap_action, MAC__GetLineServerList_) || soap_recv___MAC__GetLineServerList(soap, MAC__GetLineServerListResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___MAC__GetLineServerList(struct soap *soap, const char *soap_endpoint, const char *soap_action, MAC__GetLineServerList *MAC__GetLineServerList_)
{	struct __MAC__GetLineServerList soap_tmp___MAC__GetLineServerList;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:9090/WorkHelper/ws/machineWSService";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___MAC__GetLineServerList.MAC__GetLineServerList_ = MAC__GetLineServerList_;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___MAC__GetLineServerList(soap, &soap_tmp___MAC__GetLineServerList);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___MAC__GetLineServerList(soap, &soap_tmp___MAC__GetLineServerList, "-MAC:GetLineServerList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___MAC__GetLineServerList(soap, &soap_tmp___MAC__GetLineServerList, "-MAC:GetLineServerList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___MAC__GetLineServerList(struct soap *soap, MAC__GetLineServerListResponse &MAC__GetLineServerListResponse_)
{
	MAC__GetLineServerListResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	MAC__GetLineServerListResponse_.soap_get(soap, "MAC:GetLineServerListResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MAC__GetServerInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, MAC__GetServerInfo *MAC__GetServerInfo_, MAC__GetServerInfoResponse &MAC__GetServerInfoResponse_)
{	if (soap_send___MAC__GetServerInfo(soap, soap_endpoint, soap_action, MAC__GetServerInfo_) || soap_recv___MAC__GetServerInfo(soap, MAC__GetServerInfoResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___MAC__GetServerInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, MAC__GetServerInfo *MAC__GetServerInfo_)
{	struct __MAC__GetServerInfo soap_tmp___MAC__GetServerInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:9090/WorkHelper/ws/machineWSService";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___MAC__GetServerInfo.MAC__GetServerInfo_ = MAC__GetServerInfo_;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___MAC__GetServerInfo(soap, &soap_tmp___MAC__GetServerInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___MAC__GetServerInfo(soap, &soap_tmp___MAC__GetServerInfo, "-MAC:GetServerInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___MAC__GetServerInfo(soap, &soap_tmp___MAC__GetServerInfo, "-MAC:GetServerInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___MAC__GetServerInfo(struct soap *soap, MAC__GetServerInfoResponse &MAC__GetServerInfoResponse_)
{
	MAC__GetServerInfoResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	MAC__GetServerInfoResponse_.soap_get(soap, "MAC:GetServerInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__AddNumbers(struct soap *soap, const char *soap_endpoint, const char *soap_action, int NumberOne, int NumberTwo, int &AddNumbersResult)
{	if (soap_send_SER__AddNumbers(soap, soap_endpoint, soap_action, NumberOne, NumberTwo) || soap_recv_SER__AddNumbers(soap, AddNumbersResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__AddNumbers(struct soap *soap, const char *soap_endpoint, const char *soap_action, int NumberOne, int NumberTwo)
{	struct SER__AddNumbers soap_tmp_SER__AddNumbers;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddNumbers";
	soap_tmp_SER__AddNumbers.NumberOne = NumberOne;
	soap_tmp_SER__AddNumbers.NumberTwo = NumberTwo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__AddNumbers(soap, &soap_tmp_SER__AddNumbers);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__AddNumbers(soap, &soap_tmp_SER__AddNumbers, "SER:AddNumbers", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__AddNumbers(soap, &soap_tmp_SER__AddNumbers, "SER:AddNumbers", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__AddNumbers(struct soap *soap, int &AddNumbersResult)
{
	struct SER__AddNumbersResponse *soap_tmp_SER__AddNumbersResponse;
	soap_default_int(soap, &AddNumbersResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__AddNumbersResponse = soap_get_SER__AddNumbersResponse(soap, NULL, "", NULL);
	if (!soap_tmp_SER__AddNumbersResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddNumbersResult = soap_tmp_SER__AddNumbersResponse->AddNumbersResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__clearLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, bool bTimeContrl, std::wstring &clearLinkResult)
{	if (soap_send_SER__clearLink(soap, soap_endpoint, soap_action, bTimeContrl) || soap_recv_SER__clearLink(soap, clearLinkResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__clearLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, bool bTimeContrl)
{	struct SER__clearLink soap_tmp_SER__clearLink;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/clearLink";
	soap_tmp_SER__clearLink.bTimeContrl = bTimeContrl;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__clearLink(soap, &soap_tmp_SER__clearLink);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__clearLink(soap, &soap_tmp_SER__clearLink, "SER:clearLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__clearLink(soap, &soap_tmp_SER__clearLink, "SER:clearLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__clearLink(struct soap *soap, std::wstring &clearLinkResult)
{
	struct SER__clearLinkResponse *soap_tmp_SER__clearLinkResponse;
	soap_default_std__wstring(soap, &clearLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__clearLinkResponse = soap_get_SER__clearLinkResponse(soap, NULL, "", NULL);
	if (!soap_tmp_SER__clearLinkResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	clearLinkResult = soap_tmp_SER__clearLinkResponse->clearLinkResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__showExistLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::wstring &showExistLinkResult)
{	if (soap_send_SER__showExistLink(soap, soap_endpoint, soap_action) || soap_recv_SER__showExistLink(soap, showExistLinkResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__showExistLink(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct SER__showExistLink soap_tmp_SER__showExistLink;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/showExistLink";
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__showExistLink(soap, &soap_tmp_SER__showExistLink);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__showExistLink(soap, &soap_tmp_SER__showExistLink, "SER:showExistLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__showExistLink(soap, &soap_tmp_SER__showExistLink, "SER:showExistLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__showExistLink(struct soap *soap, std::wstring &showExistLinkResult)
{
	struct SER__showExistLinkResponse *soap_tmp_SER__showExistLinkResponse;
	soap_default_std__wstring(soap, &showExistLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__showExistLinkResponse = soap_get_SER__showExistLinkResponse(soap, NULL, "", NULL);
	if (!soap_tmp_SER__showExistLinkResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	showExistLinkResult = soap_tmp_SER__showExistLinkResponse->showExistLinkResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__TestLinkSqlserver(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, std::wstring &TestLinkSqlserverResult)
{	if (soap_send_SER__TestLinkSqlserver(soap, soap_endpoint, soap_action, serverInfo) || soap_recv_SER__TestLinkSqlserver(soap, TestLinkSqlserverResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__TestLinkSqlserver(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo)
{	struct SER__TestLinkSqlserver soap_tmp_SER__TestLinkSqlserver;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/TestLinkSqlserver";
	soap_tmp_SER__TestLinkSqlserver.serverInfo = serverInfo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__TestLinkSqlserver(soap, &soap_tmp_SER__TestLinkSqlserver);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__TestLinkSqlserver(soap, &soap_tmp_SER__TestLinkSqlserver, "SER:TestLinkSqlserver", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__TestLinkSqlserver(soap, &soap_tmp_SER__TestLinkSqlserver, "SER:TestLinkSqlserver", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__TestLinkSqlserver(struct soap *soap, std::wstring &TestLinkSqlserverResult)
{
	struct SER__TestLinkSqlserverResponse *soap_tmp_SER__TestLinkSqlserverResponse;
	soap_default_std__wstring(soap, &TestLinkSqlserverResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__TestLinkSqlserverResponse = soap_get_SER__TestLinkSqlserverResponse(soap, NULL, "", NULL);
	if (!soap_tmp_SER__TestLinkSqlserverResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	TestLinkSqlserverResult = soap_tmp_SER__TestLinkSqlserverResponse->TestLinkSqlserverResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__executeSql(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSqlResult)
{	if (soap_send_SER__executeSql(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_SER__executeSql(soap, executeSqlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__executeSql(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct SER__executeSql soap_tmp_SER__executeSql;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql";
	soap_tmp_SER__executeSql.serverInfo = serverInfo;
	soap_tmp_SER__executeSql.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__executeSql(soap, &soap_tmp_SER__executeSql);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__executeSql(soap, &soap_tmp_SER__executeSql, "SER:executeSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__executeSql(soap, &soap_tmp_SER__executeSql, "SER:executeSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__executeSql(struct soap *soap, std::wstring &executeSqlResult)
{
	struct SER__executeSqlResponse *soap_tmp_SER__executeSqlResponse;
	soap_default_std__wstring(soap, &executeSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__executeSqlResponse = soap_get_SER__executeSqlResponse(soap, NULL, "", NULL);
	if (!soap_tmp_SER__executeSqlResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSqlResult = soap_tmp_SER__executeSqlResponse->executeSqlResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__executeSql_USCOREbackEncord(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSql_USCOREbackEncordResult)
{	if (soap_send_SER__executeSql_USCOREbackEncord(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_SER__executeSql_USCOREbackEncord(soap, executeSql_USCOREbackEncordResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__executeSql_USCOREbackEncord(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct SER__executeSql_USCOREbackEncord soap_tmp_SER__executeSql_USCOREbackEncord;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_backEncord";
	soap_tmp_SER__executeSql_USCOREbackEncord.serverInfo = serverInfo;
	soap_tmp_SER__executeSql_USCOREbackEncord.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__executeSql_USCOREbackEncord(soap, &soap_tmp_SER__executeSql_USCOREbackEncord);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__executeSql_USCOREbackEncord(soap, &soap_tmp_SER__executeSql_USCOREbackEncord, "SER:executeSql_backEncord", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__executeSql_USCOREbackEncord(soap, &soap_tmp_SER__executeSql_USCOREbackEncord, "SER:executeSql_backEncord", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__executeSql_USCOREbackEncord(struct soap *soap, std::wstring &executeSql_USCOREbackEncordResult)
{
	struct SER__executeSql_USCOREbackEncordResponse *soap_tmp_SER__executeSql_USCOREbackEncordResponse;
	soap_default_std__wstring(soap, &executeSql_USCOREbackEncordResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__executeSql_USCOREbackEncordResponse = soap_get_SER__executeSql_USCOREbackEncordResponse(soap, NULL, "", NULL);
	if (!soap_tmp_SER__executeSql_USCOREbackEncordResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREbackEncordResult = soap_tmp_SER__executeSql_USCOREbackEncordResponse->executeSql_USCOREbackEncordResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__executeSql_USCOREencode(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSql_USCOREencodeResult)
{	if (soap_send_SER__executeSql_USCOREencode(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_SER__executeSql_USCOREencode(soap, executeSql_USCOREencodeResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__executeSql_USCOREencode(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct SER__executeSql_USCOREencode soap_tmp_SER__executeSql_USCOREencode;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_encode";
	soap_tmp_SER__executeSql_USCOREencode.serverInfo = serverInfo;
	soap_tmp_SER__executeSql_USCOREencode.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__executeSql_USCOREencode(soap, &soap_tmp_SER__executeSql_USCOREencode);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__executeSql_USCOREencode(soap, &soap_tmp_SER__executeSql_USCOREencode, "SER:executeSql_encode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__executeSql_USCOREencode(soap, &soap_tmp_SER__executeSql_USCOREencode, "SER:executeSql_encode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__executeSql_USCOREencode(struct soap *soap, std::wstring &executeSql_USCOREencodeResult)
{
	struct SER__executeSql_USCOREencodeResponse *soap_tmp_SER__executeSql_USCOREencodeResponse;
	soap_default_std__wstring(soap, &executeSql_USCOREencodeResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__executeSql_USCOREencodeResponse = soap_get_SER__executeSql_USCOREencodeResponse(soap, NULL, "", NULL);
	if (!soap_tmp_SER__executeSql_USCOREencodeResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREencodeResult = soap_tmp_SER__executeSql_USCOREencodeResponse->executeSql_USCOREencodeResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__insertXml(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strXml, bool encode, std::wstring &insertXmlResult)
{	if (soap_send_SER__insertXml(soap, soap_endpoint, soap_action, serverInfo, strXml, encode) || soap_recv_SER__insertXml(soap, insertXmlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__insertXml(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strXml, bool encode)
{	struct SER__insertXml soap_tmp_SER__insertXml;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/insertXml";
	soap_tmp_SER__insertXml.serverInfo = serverInfo;
	soap_tmp_SER__insertXml.strXml = strXml;
	soap_tmp_SER__insertXml.encode = encode;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__insertXml(soap, &soap_tmp_SER__insertXml);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__insertXml(soap, &soap_tmp_SER__insertXml, "SER:insertXml", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__insertXml(soap, &soap_tmp_SER__insertXml, "SER:insertXml", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__insertXml(struct soap *soap, std::wstring &insertXmlResult)
{
	struct SER__insertXmlResponse *soap_tmp_SER__insertXmlResponse;
	soap_default_std__wstring(soap, &insertXmlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__insertXmlResponse = soap_get_SER__insertXmlResponse(soap, NULL, "", NULL);
	if (!soap_tmp_SER__insertXmlResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	insertXmlResult = soap_tmp_SER__insertXmlResponse->insertXmlResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__executeStorageProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& StorageProcessName, const std::wstring& Parameters, std::wstring &executeStorageProcessResult)
{	if (soap_send_SER__executeStorageProcess(soap, soap_endpoint, soap_action, serverInfo, StorageProcessName, Parameters) || soap_recv_SER__executeStorageProcess(soap, executeStorageProcessResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__executeStorageProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& StorageProcessName, const std::wstring& Parameters)
{	struct SER__executeStorageProcess soap_tmp_SER__executeStorageProcess;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeStorageProcess";
	soap_tmp_SER__executeStorageProcess.serverInfo = serverInfo;
	soap_tmp_SER__executeStorageProcess.StorageProcessName = StorageProcessName;
	soap_tmp_SER__executeStorageProcess.Parameters = Parameters;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__executeStorageProcess(soap, &soap_tmp_SER__executeStorageProcess);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__executeStorageProcess(soap, &soap_tmp_SER__executeStorageProcess, "SER:executeStorageProcess", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__executeStorageProcess(soap, &soap_tmp_SER__executeStorageProcess, "SER:executeStorageProcess", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__executeStorageProcess(struct soap *soap, std::wstring &executeStorageProcessResult)
{
	struct SER__executeStorageProcessResponse *soap_tmp_SER__executeStorageProcessResponse;
	soap_default_std__wstring(soap, &executeStorageProcessResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__executeStorageProcessResponse = soap_get_SER__executeStorageProcessResponse(soap, NULL, "", NULL);
	if (!soap_tmp_SER__executeStorageProcessResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeStorageProcessResult = soap_tmp_SER__executeStorageProcessResponse->executeStorageProcessResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__AddFileToSql(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strFileName, const std::wstring& sPointer, const std::wstring& tablenamefieldname, const std::wstring& fileIP, const std::wstring& fileUse, const std::wstring& filePassword, std::wstring &AddFileToSqlResult)
{	if (soap_send_SER__AddFileToSql(soap, soap_endpoint, soap_action, serverInfo, strFileName, sPointer, tablenamefieldname, fileIP, fileUse, filePassword) || soap_recv_SER__AddFileToSql(soap, AddFileToSqlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__AddFileToSql(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strFileName, const std::wstring& sPointer, const std::wstring& tablenamefieldname, const std::wstring& fileIP, const std::wstring& fileUse, const std::wstring& filePassword)
{	struct SER__AddFileToSql soap_tmp_SER__AddFileToSql;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddFileToSql";
	soap_tmp_SER__AddFileToSql.serverInfo = serverInfo;
	soap_tmp_SER__AddFileToSql.strFileName = strFileName;
	soap_tmp_SER__AddFileToSql.sPointer = sPointer;
	soap_tmp_SER__AddFileToSql.tablenamefieldname = tablenamefieldname;
	soap_tmp_SER__AddFileToSql.fileIP = fileIP;
	soap_tmp_SER__AddFileToSql.fileUse = fileUse;
	soap_tmp_SER__AddFileToSql.filePassword = filePassword;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__AddFileToSql(soap, &soap_tmp_SER__AddFileToSql);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__AddFileToSql(soap, &soap_tmp_SER__AddFileToSql, "SER:AddFileToSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__AddFileToSql(soap, &soap_tmp_SER__AddFileToSql, "SER:AddFileToSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__AddFileToSql(struct soap *soap, std::wstring &AddFileToSqlResult)
{
	struct SER__AddFileToSqlResponse *soap_tmp_SER__AddFileToSqlResponse;
	soap_default_std__wstring(soap, &AddFileToSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__AddFileToSqlResponse = soap_get_SER__AddFileToSqlResponse(soap, NULL, "", NULL);
	if (!soap_tmp_SER__AddFileToSqlResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddFileToSqlResult = soap_tmp_SER__AddFileToSqlResponse->AddFileToSqlResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__AddNumbers_(struct soap *soap, const char *soap_endpoint, const char *soap_action, int NumberOne, int NumberTwo, int &AddNumbersResult)
{	if (soap_send_SER__AddNumbers_(soap, soap_endpoint, soap_action, NumberOne, NumberTwo) || soap_recv_SER__AddNumbers_(soap, AddNumbersResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__AddNumbers_(struct soap *soap, const char *soap_endpoint, const char *soap_action, int NumberOne, int NumberTwo)
{	struct SER__AddNumbers_ soap_tmp_SER__AddNumbers_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddNumbers";
	soap_tmp_SER__AddNumbers_.NumberOne = NumberOne;
	soap_tmp_SER__AddNumbers_.NumberTwo = NumberTwo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__AddNumbers_(soap, &soap_tmp_SER__AddNumbers_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__AddNumbers_(soap, &soap_tmp_SER__AddNumbers_, "SER:AddNumbers", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__AddNumbers_(soap, &soap_tmp_SER__AddNumbers_, "SER:AddNumbers", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__AddNumbers_(struct soap *soap, int &AddNumbersResult)
{
	struct SER__AddNumbers_Response *soap_tmp_SER__AddNumbers_Response;
	soap_default_int(soap, &AddNumbersResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__AddNumbers_Response = soap_get_SER__AddNumbers_Response(soap, NULL, "", NULL);
	if (!soap_tmp_SER__AddNumbers_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddNumbersResult = soap_tmp_SER__AddNumbers_Response->AddNumbersResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__clearLink_(struct soap *soap, const char *soap_endpoint, const char *soap_action, bool bTimeContrl, std::wstring &clearLinkResult)
{	if (soap_send_SER__clearLink_(soap, soap_endpoint, soap_action, bTimeContrl) || soap_recv_SER__clearLink_(soap, clearLinkResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__clearLink_(struct soap *soap, const char *soap_endpoint, const char *soap_action, bool bTimeContrl)
{	struct SER__clearLink_ soap_tmp_SER__clearLink_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/clearLink";
	soap_tmp_SER__clearLink_.bTimeContrl = bTimeContrl;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__clearLink_(soap, &soap_tmp_SER__clearLink_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__clearLink_(soap, &soap_tmp_SER__clearLink_, "SER:clearLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__clearLink_(soap, &soap_tmp_SER__clearLink_, "SER:clearLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__clearLink_(struct soap *soap, std::wstring &clearLinkResult)
{
	struct SER__clearLink_Response *soap_tmp_SER__clearLink_Response;
	soap_default_std__wstring(soap, &clearLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__clearLink_Response = soap_get_SER__clearLink_Response(soap, NULL, "", NULL);
	if (!soap_tmp_SER__clearLink_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	clearLinkResult = soap_tmp_SER__clearLink_Response->clearLinkResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__showExistLink_(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::wstring &showExistLinkResult)
{	if (soap_send_SER__showExistLink_(soap, soap_endpoint, soap_action) || soap_recv_SER__showExistLink_(soap, showExistLinkResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__showExistLink_(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct SER__showExistLink_ soap_tmp_SER__showExistLink_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/showExistLink";
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__showExistLink_(soap, &soap_tmp_SER__showExistLink_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__showExistLink_(soap, &soap_tmp_SER__showExistLink_, "SER:showExistLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__showExistLink_(soap, &soap_tmp_SER__showExistLink_, "SER:showExistLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__showExistLink_(struct soap *soap, std::wstring &showExistLinkResult)
{
	struct SER__showExistLink_Response *soap_tmp_SER__showExistLink_Response;
	soap_default_std__wstring(soap, &showExistLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__showExistLink_Response = soap_get_SER__showExistLink_Response(soap, NULL, "", NULL);
	if (!soap_tmp_SER__showExistLink_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	showExistLinkResult = soap_tmp_SER__showExistLink_Response->showExistLinkResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__TestLinkSqlserver_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, std::wstring &TestLinkSqlserverResult)
{	if (soap_send_SER__TestLinkSqlserver_(soap, soap_endpoint, soap_action, serverInfo) || soap_recv_SER__TestLinkSqlserver_(soap, TestLinkSqlserverResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__TestLinkSqlserver_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo)
{	struct SER__TestLinkSqlserver_ soap_tmp_SER__TestLinkSqlserver_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/TestLinkSqlserver";
	soap_tmp_SER__TestLinkSqlserver_.serverInfo = serverInfo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__TestLinkSqlserver_(soap, &soap_tmp_SER__TestLinkSqlserver_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__TestLinkSqlserver_(soap, &soap_tmp_SER__TestLinkSqlserver_, "SER:TestLinkSqlserver", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__TestLinkSqlserver_(soap, &soap_tmp_SER__TestLinkSqlserver_, "SER:TestLinkSqlserver", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__TestLinkSqlserver_(struct soap *soap, std::wstring &TestLinkSqlserverResult)
{
	struct SER__TestLinkSqlserver_Response *soap_tmp_SER__TestLinkSqlserver_Response;
	soap_default_std__wstring(soap, &TestLinkSqlserverResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__TestLinkSqlserver_Response = soap_get_SER__TestLinkSqlserver_Response(soap, NULL, "", NULL);
	if (!soap_tmp_SER__TestLinkSqlserver_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	TestLinkSqlserverResult = soap_tmp_SER__TestLinkSqlserver_Response->TestLinkSqlserverResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__executeSql_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSqlResult)
{	if (soap_send_SER__executeSql_(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_SER__executeSql_(soap, executeSqlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__executeSql_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct SER__executeSql_ soap_tmp_SER__executeSql_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql";
	soap_tmp_SER__executeSql_.serverInfo = serverInfo;
	soap_tmp_SER__executeSql_.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__executeSql_(soap, &soap_tmp_SER__executeSql_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__executeSql_(soap, &soap_tmp_SER__executeSql_, "SER:executeSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__executeSql_(soap, &soap_tmp_SER__executeSql_, "SER:executeSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__executeSql_(struct soap *soap, std::wstring &executeSqlResult)
{
	struct SER__executeSql_Response *soap_tmp_SER__executeSql_Response;
	soap_default_std__wstring(soap, &executeSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__executeSql_Response = soap_get_SER__executeSql_Response(soap, NULL, "", NULL);
	if (!soap_tmp_SER__executeSql_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSqlResult = soap_tmp_SER__executeSql_Response->executeSqlResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__executeSql_USCOREbackEncord_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSql_USCOREbackEncordResult)
{	if (soap_send_SER__executeSql_USCOREbackEncord_(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_SER__executeSql_USCOREbackEncord_(soap, executeSql_USCOREbackEncordResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__executeSql_USCOREbackEncord_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct SER__executeSql_USCOREbackEncord_ soap_tmp_SER__executeSql_USCOREbackEncord_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_backEncord";
	soap_tmp_SER__executeSql_USCOREbackEncord_.serverInfo = serverInfo;
	soap_tmp_SER__executeSql_USCOREbackEncord_.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__executeSql_USCOREbackEncord_(soap, &soap_tmp_SER__executeSql_USCOREbackEncord_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__executeSql_USCOREbackEncord_(soap, &soap_tmp_SER__executeSql_USCOREbackEncord_, "SER:executeSql_backEncord", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__executeSql_USCOREbackEncord_(soap, &soap_tmp_SER__executeSql_USCOREbackEncord_, "SER:executeSql_backEncord", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__executeSql_USCOREbackEncord_(struct soap *soap, std::wstring &executeSql_USCOREbackEncordResult)
{
	struct SER__executeSql_USCOREbackEncord_Response *soap_tmp_SER__executeSql_USCOREbackEncord_Response;
	soap_default_std__wstring(soap, &executeSql_USCOREbackEncordResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__executeSql_USCOREbackEncord_Response = soap_get_SER__executeSql_USCOREbackEncord_Response(soap, NULL, "", NULL);
	if (!soap_tmp_SER__executeSql_USCOREbackEncord_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREbackEncordResult = soap_tmp_SER__executeSql_USCOREbackEncord_Response->executeSql_USCOREbackEncordResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__executeSql_USCOREencode_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSql_USCOREencodeResult)
{	if (soap_send_SER__executeSql_USCOREencode_(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_SER__executeSql_USCOREencode_(soap, executeSql_USCOREencodeResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__executeSql_USCOREencode_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct SER__executeSql_USCOREencode_ soap_tmp_SER__executeSql_USCOREencode_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_encode";
	soap_tmp_SER__executeSql_USCOREencode_.serverInfo = serverInfo;
	soap_tmp_SER__executeSql_USCOREencode_.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__executeSql_USCOREencode_(soap, &soap_tmp_SER__executeSql_USCOREencode_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__executeSql_USCOREencode_(soap, &soap_tmp_SER__executeSql_USCOREencode_, "SER:executeSql_encode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__executeSql_USCOREencode_(soap, &soap_tmp_SER__executeSql_USCOREencode_, "SER:executeSql_encode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__executeSql_USCOREencode_(struct soap *soap, std::wstring &executeSql_USCOREencodeResult)
{
	struct SER__executeSql_USCOREencode_Response *soap_tmp_SER__executeSql_USCOREencode_Response;
	soap_default_std__wstring(soap, &executeSql_USCOREencodeResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__executeSql_USCOREencode_Response = soap_get_SER__executeSql_USCOREencode_Response(soap, NULL, "", NULL);
	if (!soap_tmp_SER__executeSql_USCOREencode_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREencodeResult = soap_tmp_SER__executeSql_USCOREencode_Response->executeSql_USCOREencodeResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__insertXml_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strXml, bool encode, std::wstring &insertXmlResult)
{	if (soap_send_SER__insertXml_(soap, soap_endpoint, soap_action, serverInfo, strXml, encode) || soap_recv_SER__insertXml_(soap, insertXmlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__insertXml_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strXml, bool encode)
{	struct SER__insertXml_ soap_tmp_SER__insertXml_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/insertXml";
	soap_tmp_SER__insertXml_.serverInfo = serverInfo;
	soap_tmp_SER__insertXml_.strXml = strXml;
	soap_tmp_SER__insertXml_.encode = encode;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__insertXml_(soap, &soap_tmp_SER__insertXml_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__insertXml_(soap, &soap_tmp_SER__insertXml_, "SER:insertXml", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__insertXml_(soap, &soap_tmp_SER__insertXml_, "SER:insertXml", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__insertXml_(struct soap *soap, std::wstring &insertXmlResult)
{
	struct SER__insertXml_Response *soap_tmp_SER__insertXml_Response;
	soap_default_std__wstring(soap, &insertXmlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__insertXml_Response = soap_get_SER__insertXml_Response(soap, NULL, "", NULL);
	if (!soap_tmp_SER__insertXml_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	insertXmlResult = soap_tmp_SER__insertXml_Response->insertXmlResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__executeStorageProcess_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& StorageProcessName, const std::wstring& Parameters, std::wstring &executeStorageProcessResult)
{	if (soap_send_SER__executeStorageProcess_(soap, soap_endpoint, soap_action, serverInfo, StorageProcessName, Parameters) || soap_recv_SER__executeStorageProcess_(soap, executeStorageProcessResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__executeStorageProcess_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& StorageProcessName, const std::wstring& Parameters)
{	struct SER__executeStorageProcess_ soap_tmp_SER__executeStorageProcess_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeStorageProcess";
	soap_tmp_SER__executeStorageProcess_.serverInfo = serverInfo;
	soap_tmp_SER__executeStorageProcess_.StorageProcessName = StorageProcessName;
	soap_tmp_SER__executeStorageProcess_.Parameters = Parameters;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__executeStorageProcess_(soap, &soap_tmp_SER__executeStorageProcess_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__executeStorageProcess_(soap, &soap_tmp_SER__executeStorageProcess_, "SER:executeStorageProcess", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__executeStorageProcess_(soap, &soap_tmp_SER__executeStorageProcess_, "SER:executeStorageProcess", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__executeStorageProcess_(struct soap *soap, std::wstring &executeStorageProcessResult)
{
	struct SER__executeStorageProcess_Response *soap_tmp_SER__executeStorageProcess_Response;
	soap_default_std__wstring(soap, &executeStorageProcessResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__executeStorageProcess_Response = soap_get_SER__executeStorageProcess_Response(soap, NULL, "", NULL);
	if (!soap_tmp_SER__executeStorageProcess_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeStorageProcessResult = soap_tmp_SER__executeStorageProcess_Response->executeStorageProcessResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_SER__AddFileToSql_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strFileName, const std::wstring& sPointer, const std::wstring& tablenamefieldname, const std::wstring& fileIP, const std::wstring& fileUse, const std::wstring& filePassword, std::wstring &AddFileToSqlResult)
{	if (soap_send_SER__AddFileToSql_(soap, soap_endpoint, soap_action, serverInfo, strFileName, sPointer, tablenamefieldname, fileIP, fileUse, filePassword) || soap_recv_SER__AddFileToSql_(soap, AddFileToSqlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_SER__AddFileToSql_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strFileName, const std::wstring& sPointer, const std::wstring& tablenamefieldname, const std::wstring& fileIP, const std::wstring& fileUse, const std::wstring& filePassword)
{	struct SER__AddFileToSql_ soap_tmp_SER__AddFileToSql_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddFileToSql";
	soap_tmp_SER__AddFileToSql_.serverInfo = serverInfo;
	soap_tmp_SER__AddFileToSql_.strFileName = strFileName;
	soap_tmp_SER__AddFileToSql_.sPointer = sPointer;
	soap_tmp_SER__AddFileToSql_.tablenamefieldname = tablenamefieldname;
	soap_tmp_SER__AddFileToSql_.fileIP = fileIP;
	soap_tmp_SER__AddFileToSql_.fileUse = fileUse;
	soap_tmp_SER__AddFileToSql_.filePassword = filePassword;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_SER__AddFileToSql_(soap, &soap_tmp_SER__AddFileToSql_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_SER__AddFileToSql_(soap, &soap_tmp_SER__AddFileToSql_, "SER:AddFileToSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_SER__AddFileToSql_(soap, &soap_tmp_SER__AddFileToSql_, "SER:AddFileToSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SER__AddFileToSql_(struct soap *soap, std::wstring &AddFileToSqlResult)
{
	struct SER__AddFileToSql_Response *soap_tmp_SER__AddFileToSql_Response;
	soap_default_std__wstring(soap, &AddFileToSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_SER__AddFileToSql_Response = soap_get_SER__AddFileToSql_Response(soap, NULL, "", NULL);
	if (!soap_tmp_SER__AddFileToSql_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddFileToSqlResult = soap_tmp_SER__AddFileToSql_Response->AddFileToSqlResult;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
