/* soapC.cpp
   Generated by gSOAP 2.8.111 for .\web_service_allin.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.111 2021-02-24 08:41:07 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_std__wstring:
		return soap_in_std__wstring(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_MAC__GetServerInfoResponse:
		return soap_in_MAC__GetServerInfoResponse(soap, tag, NULL, "MAC:GetServerInfoResponse");
	case SOAP_TYPE_MAC__GetServerInfo:
		return soap_in_MAC__GetServerInfo(soap, tag, NULL, "MAC:GetServerInfo");
	case SOAP_TYPE_MAC__GetLineServerListResponse:
		return soap_in_MAC__GetLineServerListResponse(soap, tag, NULL, "MAC:GetLineServerListResponse");
	case SOAP_TYPE_MAC__GetLineServerList:
		return soap_in_MAC__GetLineServerList(soap, tag, NULL, "MAC:GetLineServerList");
	case SOAP_TYPE_MAC__addRobotRunStateResponse:
		return soap_in_MAC__addRobotRunStateResponse(soap, tag, NULL, "MAC:addRobotRunStateResponse");
	case SOAP_TYPE_MAC__addRobotRunState:
		return soap_in_MAC__addRobotRunState(soap, tag, NULL, "MAC:addRobotRunState");
	case SOAP_TYPE_MAC__GetLineServerInfoResponse:
		return soap_in_MAC__GetLineServerInfoResponse(soap, tag, NULL, "MAC:GetLineServerInfoResponse");
	case SOAP_TYPE_MAC__GetLineServerInfo:
		return soap_in_MAC__GetLineServerInfo(soap, tag, NULL, "MAC:GetLineServerInfo");
	case SOAP_TYPE_MAC__fetchRobotConfigResponse:
		return soap_in_MAC__fetchRobotConfigResponse(soap, tag, NULL, "MAC:fetchRobotConfigResponse");
	case SOAP_TYPE_MAC__fetchRobotConfig:
		return soap_in_MAC__fetchRobotConfig(soap, tag, NULL, "MAC:fetchRobotConfig");
	case SOAP_TYPE_SER__AddFileToSql_:
		return soap_in_SER__AddFileToSql_(soap, tag, NULL, "SER:AddFileToSql");
	case SOAP_TYPE_SER__AddFileToSql_Response:
		return soap_in_SER__AddFileToSql_Response(soap, tag, NULL, "SER:AddFileToSql-Response");
	case SOAP_TYPE_SER__executeStorageProcess_:
		return soap_in_SER__executeStorageProcess_(soap, tag, NULL, "SER:executeStorageProcess");
	case SOAP_TYPE_SER__executeStorageProcess_Response:
		return soap_in_SER__executeStorageProcess_Response(soap, tag, NULL, "SER:executeStorageProcess-Response");
	case SOAP_TYPE_SER__insertXml_:
		return soap_in_SER__insertXml_(soap, tag, NULL, "SER:insertXml");
	case SOAP_TYPE_SER__insertXml_Response:
		return soap_in_SER__insertXml_Response(soap, tag, NULL, "SER:insertXml-Response");
	case SOAP_TYPE_SER__executeSql_USCOREencode_:
		return soap_in_SER__executeSql_USCOREencode_(soap, tag, NULL, "SER:executeSql_encode");
	case SOAP_TYPE_SER__executeSql_USCOREencode_Response:
		return soap_in_SER__executeSql_USCOREencode_Response(soap, tag, NULL, "SER:executeSql_encode-Response");
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_:
		return soap_in_SER__executeSql_USCOREbackEncord_(soap, tag, NULL, "SER:executeSql_backEncord");
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response:
		return soap_in_SER__executeSql_USCOREbackEncord_Response(soap, tag, NULL, "SER:executeSql_backEncord-Response");
	case SOAP_TYPE_SER__executeSql_:
		return soap_in_SER__executeSql_(soap, tag, NULL, "SER:executeSql");
	case SOAP_TYPE_SER__executeSql_Response:
		return soap_in_SER__executeSql_Response(soap, tag, NULL, "SER:executeSql-Response");
	case SOAP_TYPE_SER__TestLinkSqlserver_:
		return soap_in_SER__TestLinkSqlserver_(soap, tag, NULL, "SER:TestLinkSqlserver");
	case SOAP_TYPE_SER__TestLinkSqlserver_Response:
		return soap_in_SER__TestLinkSqlserver_Response(soap, tag, NULL, "SER:TestLinkSqlserver-Response");
	case SOAP_TYPE_SER__showExistLink_:
		return soap_in_SER__showExistLink_(soap, tag, NULL, "SER:showExistLink");
	case SOAP_TYPE_SER__showExistLink_Response:
		return soap_in_SER__showExistLink_Response(soap, tag, NULL, "SER:showExistLink-Response");
	case SOAP_TYPE_SER__clearLink_:
		return soap_in_SER__clearLink_(soap, tag, NULL, "SER:clearLink");
	case SOAP_TYPE_SER__clearLink_Response:
		return soap_in_SER__clearLink_Response(soap, tag, NULL, "SER:clearLink-Response");
	case SOAP_TYPE_SER__AddNumbers_:
		return soap_in_SER__AddNumbers_(soap, tag, NULL, "SER:AddNumbers");
	case SOAP_TYPE_SER__AddNumbers_Response:
		return soap_in_SER__AddNumbers_Response(soap, tag, NULL, "SER:AddNumbers-Response");
	case SOAP_TYPE_SER__AddFileToSql:
		return soap_in_SER__AddFileToSql(soap, tag, NULL, "SER:AddFileToSql");
	case SOAP_TYPE_SER__AddFileToSqlResponse:
		return soap_in_SER__AddFileToSqlResponse(soap, tag, NULL, "SER:AddFileToSqlResponse");
	case SOAP_TYPE_SER__executeStorageProcess:
		return soap_in_SER__executeStorageProcess(soap, tag, NULL, "SER:executeStorageProcess");
	case SOAP_TYPE_SER__executeStorageProcessResponse:
		return soap_in_SER__executeStorageProcessResponse(soap, tag, NULL, "SER:executeStorageProcessResponse");
	case SOAP_TYPE_SER__insertXml:
		return soap_in_SER__insertXml(soap, tag, NULL, "SER:insertXml");
	case SOAP_TYPE_SER__insertXmlResponse:
		return soap_in_SER__insertXmlResponse(soap, tag, NULL, "SER:insertXmlResponse");
	case SOAP_TYPE_SER__executeSql_USCOREencode:
		return soap_in_SER__executeSql_USCOREencode(soap, tag, NULL, "SER:executeSql_encode");
	case SOAP_TYPE_SER__executeSql_USCOREencodeResponse:
		return soap_in_SER__executeSql_USCOREencodeResponse(soap, tag, NULL, "SER:executeSql_encodeResponse");
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord:
		return soap_in_SER__executeSql_USCOREbackEncord(soap, tag, NULL, "SER:executeSql_backEncord");
	case SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse:
		return soap_in_SER__executeSql_USCOREbackEncordResponse(soap, tag, NULL, "SER:executeSql_backEncordResponse");
	case SOAP_TYPE_SER__executeSql:
		return soap_in_SER__executeSql(soap, tag, NULL, "SER:executeSql");
	case SOAP_TYPE_SER__executeSqlResponse:
		return soap_in_SER__executeSqlResponse(soap, tag, NULL, "SER:executeSqlResponse");
	case SOAP_TYPE_SER__TestLinkSqlserver:
		return soap_in_SER__TestLinkSqlserver(soap, tag, NULL, "SER:TestLinkSqlserver");
	case SOAP_TYPE_SER__TestLinkSqlserverResponse:
		return soap_in_SER__TestLinkSqlserverResponse(soap, tag, NULL, "SER:TestLinkSqlserverResponse");
	case SOAP_TYPE_SER__showExistLink:
		return soap_in_SER__showExistLink(soap, tag, NULL, "SER:showExistLink");
	case SOAP_TYPE_SER__showExistLinkResponse:
		return soap_in_SER__showExistLinkResponse(soap, tag, NULL, "SER:showExistLinkResponse");
	case SOAP_TYPE_SER__clearLink:
		return soap_in_SER__clearLink(soap, tag, NULL, "SER:clearLink");
	case SOAP_TYPE_SER__clearLinkResponse:
		return soap_in_SER__clearLinkResponse(soap, tag, NULL, "SER:clearLinkResponse");
	case SOAP_TYPE_SER__AddNumbers:
		return soap_in_SER__AddNumbers(soap, tag, NULL, "SER:AddNumbers");
	case SOAP_TYPE_SER__AddNumbersResponse:
		return soap_in_SER__AddNumbersResponse(soap, tag, NULL, "SER:AddNumbersResponse");
	case SOAP_TYPE_PointerToMAC__GetServerInfo:
		return soap_in_PointerToMAC__GetServerInfo(soap, tag, NULL, "MAC:GetServerInfo");
	case SOAP_TYPE_PointerToMAC__GetLineServerList:
		return soap_in_PointerToMAC__GetLineServerList(soap, tag, NULL, "MAC:GetLineServerList");
	case SOAP_TYPE_PointerToMAC__addRobotRunState:
		return soap_in_PointerToMAC__addRobotRunState(soap, tag, NULL, "MAC:addRobotRunState");
	case SOAP_TYPE_PointerToMAC__GetLineServerInfo:
		return soap_in_PointerToMAC__GetLineServerInfo(soap, tag, NULL, "MAC:GetLineServerInfo");
	case SOAP_TYPE_PointerToMAC__fetchRobotConfig:
		return soap_in_PointerToMAC__fetchRobotConfig(soap, tag, NULL, "MAC:fetchRobotConfig");
	case SOAP_TYPE_wstring:
	{	wchar_t **s;
		s = soap_in_wstring(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__wstring;
			return soap_in_std__wstring(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MAC:GetServerInfoResponse"))
		{	*type = SOAP_TYPE_MAC__GetServerInfoResponse;
			return soap_in_MAC__GetServerInfoResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MAC:GetServerInfo"))
		{	*type = SOAP_TYPE_MAC__GetServerInfo;
			return soap_in_MAC__GetServerInfo(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MAC:GetLineServerListResponse"))
		{	*type = SOAP_TYPE_MAC__GetLineServerListResponse;
			return soap_in_MAC__GetLineServerListResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MAC:GetLineServerList"))
		{	*type = SOAP_TYPE_MAC__GetLineServerList;
			return soap_in_MAC__GetLineServerList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MAC:addRobotRunStateResponse"))
		{	*type = SOAP_TYPE_MAC__addRobotRunStateResponse;
			return soap_in_MAC__addRobotRunStateResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MAC:addRobotRunState"))
		{	*type = SOAP_TYPE_MAC__addRobotRunState;
			return soap_in_MAC__addRobotRunState(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MAC:GetLineServerInfoResponse"))
		{	*type = SOAP_TYPE_MAC__GetLineServerInfoResponse;
			return soap_in_MAC__GetLineServerInfoResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MAC:GetLineServerInfo"))
		{	*type = SOAP_TYPE_MAC__GetLineServerInfo;
			return soap_in_MAC__GetLineServerInfo(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MAC:fetchRobotConfigResponse"))
		{	*type = SOAP_TYPE_MAC__fetchRobotConfigResponse;
			return soap_in_MAC__fetchRobotConfigResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MAC:fetchRobotConfig"))
		{	*type = SOAP_TYPE_MAC__fetchRobotConfig;
			return soap_in_MAC__fetchRobotConfig(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:AddFileToSql"))
		{	*type = SOAP_TYPE_SER__AddFileToSql_;
			return soap_in_SER__AddFileToSql_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:AddFileToSql-Response"))
		{	*type = SOAP_TYPE_SER__AddFileToSql_Response;
			return soap_in_SER__AddFileToSql_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeStorageProcess"))
		{	*type = SOAP_TYPE_SER__executeStorageProcess_;
			return soap_in_SER__executeStorageProcess_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeStorageProcess-Response"))
		{	*type = SOAP_TYPE_SER__executeStorageProcess_Response;
			return soap_in_SER__executeStorageProcess_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:insertXml"))
		{	*type = SOAP_TYPE_SER__insertXml_;
			return soap_in_SER__insertXml_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:insertXml-Response"))
		{	*type = SOAP_TYPE_SER__insertXml_Response;
			return soap_in_SER__insertXml_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSql_encode"))
		{	*type = SOAP_TYPE_SER__executeSql_USCOREencode_;
			return soap_in_SER__executeSql_USCOREencode_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSql_encode-Response"))
		{	*type = SOAP_TYPE_SER__executeSql_USCOREencode_Response;
			return soap_in_SER__executeSql_USCOREencode_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSql_backEncord"))
		{	*type = SOAP_TYPE_SER__executeSql_USCOREbackEncord_;
			return soap_in_SER__executeSql_USCOREbackEncord_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSql_backEncord-Response"))
		{	*type = SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response;
			return soap_in_SER__executeSql_USCOREbackEncord_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSql"))
		{	*type = SOAP_TYPE_SER__executeSql_;
			return soap_in_SER__executeSql_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSql-Response"))
		{	*type = SOAP_TYPE_SER__executeSql_Response;
			return soap_in_SER__executeSql_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:TestLinkSqlserver"))
		{	*type = SOAP_TYPE_SER__TestLinkSqlserver_;
			return soap_in_SER__TestLinkSqlserver_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:TestLinkSqlserver-Response"))
		{	*type = SOAP_TYPE_SER__TestLinkSqlserver_Response;
			return soap_in_SER__TestLinkSqlserver_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:showExistLink"))
		{	*type = SOAP_TYPE_SER__showExistLink_;
			return soap_in_SER__showExistLink_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:showExistLink-Response"))
		{	*type = SOAP_TYPE_SER__showExistLink_Response;
			return soap_in_SER__showExistLink_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:clearLink"))
		{	*type = SOAP_TYPE_SER__clearLink_;
			return soap_in_SER__clearLink_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:clearLink-Response"))
		{	*type = SOAP_TYPE_SER__clearLink_Response;
			return soap_in_SER__clearLink_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:AddNumbers"))
		{	*type = SOAP_TYPE_SER__AddNumbers_;
			return soap_in_SER__AddNumbers_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:AddNumbers-Response"))
		{	*type = SOAP_TYPE_SER__AddNumbers_Response;
			return soap_in_SER__AddNumbers_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:AddFileToSql"))
		{	*type = SOAP_TYPE_SER__AddFileToSql;
			return soap_in_SER__AddFileToSql(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:AddFileToSqlResponse"))
		{	*type = SOAP_TYPE_SER__AddFileToSqlResponse;
			return soap_in_SER__AddFileToSqlResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeStorageProcess"))
		{	*type = SOAP_TYPE_SER__executeStorageProcess;
			return soap_in_SER__executeStorageProcess(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeStorageProcessResponse"))
		{	*type = SOAP_TYPE_SER__executeStorageProcessResponse;
			return soap_in_SER__executeStorageProcessResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:insertXml"))
		{	*type = SOAP_TYPE_SER__insertXml;
			return soap_in_SER__insertXml(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:insertXmlResponse"))
		{	*type = SOAP_TYPE_SER__insertXmlResponse;
			return soap_in_SER__insertXmlResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSql_encode"))
		{	*type = SOAP_TYPE_SER__executeSql_USCOREencode;
			return soap_in_SER__executeSql_USCOREencode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSql_encodeResponse"))
		{	*type = SOAP_TYPE_SER__executeSql_USCOREencodeResponse;
			return soap_in_SER__executeSql_USCOREencodeResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSql_backEncord"))
		{	*type = SOAP_TYPE_SER__executeSql_USCOREbackEncord;
			return soap_in_SER__executeSql_USCOREbackEncord(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSql_backEncordResponse"))
		{	*type = SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse;
			return soap_in_SER__executeSql_USCOREbackEncordResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSql"))
		{	*type = SOAP_TYPE_SER__executeSql;
			return soap_in_SER__executeSql(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:executeSqlResponse"))
		{	*type = SOAP_TYPE_SER__executeSqlResponse;
			return soap_in_SER__executeSqlResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:TestLinkSqlserver"))
		{	*type = SOAP_TYPE_SER__TestLinkSqlserver;
			return soap_in_SER__TestLinkSqlserver(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:TestLinkSqlserverResponse"))
		{	*type = SOAP_TYPE_SER__TestLinkSqlserverResponse;
			return soap_in_SER__TestLinkSqlserverResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:showExistLink"))
		{	*type = SOAP_TYPE_SER__showExistLink;
			return soap_in_SER__showExistLink(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:showExistLinkResponse"))
		{	*type = SOAP_TYPE_SER__showExistLinkResponse;
			return soap_in_SER__showExistLinkResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:clearLink"))
		{	*type = SOAP_TYPE_SER__clearLink;
			return soap_in_SER__clearLink(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:clearLinkResponse"))
		{	*type = SOAP_TYPE_SER__clearLinkResponse;
			return soap_in_SER__clearLinkResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:AddNumbers"))
		{	*type = SOAP_TYPE_SER__AddNumbers;
			return soap_in_SER__AddNumbers(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SER:AddNumbersResponse"))
		{	*type = SOAP_TYPE_SER__AddNumbersResponse;
			return soap_in_SER__AddNumbersResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	wchar_t **s;
			*type = SOAP_TYPE_wstring;
			s = soap_in_wstring(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__wstring:
		return soap_out_std__wstring(soap, tag, id, (const std::wstring *)ptr, "xsd:string");
	case SOAP_TYPE_MAC__GetServerInfoResponse:
		return ((MAC__GetServerInfoResponse *)ptr)->soap_out(soap, tag, id, "MAC:GetServerInfoResponse");
	case SOAP_TYPE_MAC__GetServerInfo:
		return ((MAC__GetServerInfo *)ptr)->soap_out(soap, tag, id, "MAC:GetServerInfo");
	case SOAP_TYPE_MAC__GetLineServerListResponse:
		return ((MAC__GetLineServerListResponse *)ptr)->soap_out(soap, tag, id, "MAC:GetLineServerListResponse");
	case SOAP_TYPE_MAC__GetLineServerList:
		return ((MAC__GetLineServerList *)ptr)->soap_out(soap, tag, id, "MAC:GetLineServerList");
	case SOAP_TYPE_MAC__addRobotRunStateResponse:
		return ((MAC__addRobotRunStateResponse *)ptr)->soap_out(soap, tag, id, "MAC:addRobotRunStateResponse");
	case SOAP_TYPE_MAC__addRobotRunState:
		return ((MAC__addRobotRunState *)ptr)->soap_out(soap, tag, id, "MAC:addRobotRunState");
	case SOAP_TYPE_MAC__GetLineServerInfoResponse:
		return ((MAC__GetLineServerInfoResponse *)ptr)->soap_out(soap, tag, id, "MAC:GetLineServerInfoResponse");
	case SOAP_TYPE_MAC__GetLineServerInfo:
		return ((MAC__GetLineServerInfo *)ptr)->soap_out(soap, tag, id, "MAC:GetLineServerInfo");
	case SOAP_TYPE_MAC__fetchRobotConfigResponse:
		return ((MAC__fetchRobotConfigResponse *)ptr)->soap_out(soap, tag, id, "MAC:fetchRobotConfigResponse");
	case SOAP_TYPE_MAC__fetchRobotConfig:
		return ((MAC__fetchRobotConfig *)ptr)->soap_out(soap, tag, id, "MAC:fetchRobotConfig");
	case SOAP_TYPE_SER__AddFileToSql_:
		return soap_out_SER__AddFileToSql_(soap, tag, id, (const struct SER__AddFileToSql_ *)ptr, "SER:AddFileToSql");
	case SOAP_TYPE_SER__AddFileToSql_Response:
		return soap_out_SER__AddFileToSql_Response(soap, tag, id, (const struct SER__AddFileToSql_Response *)ptr, "SER:AddFileToSql-Response");
	case SOAP_TYPE_SER__executeStorageProcess_:
		return soap_out_SER__executeStorageProcess_(soap, tag, id, (const struct SER__executeStorageProcess_ *)ptr, "SER:executeStorageProcess");
	case SOAP_TYPE_SER__executeStorageProcess_Response:
		return soap_out_SER__executeStorageProcess_Response(soap, tag, id, (const struct SER__executeStorageProcess_Response *)ptr, "SER:executeStorageProcess-Response");
	case SOAP_TYPE_SER__insertXml_:
		return soap_out_SER__insertXml_(soap, tag, id, (const struct SER__insertXml_ *)ptr, "SER:insertXml");
	case SOAP_TYPE_SER__insertXml_Response:
		return soap_out_SER__insertXml_Response(soap, tag, id, (const struct SER__insertXml_Response *)ptr, "SER:insertXml-Response");
	case SOAP_TYPE_SER__executeSql_USCOREencode_:
		return soap_out_SER__executeSql_USCOREencode_(soap, tag, id, (const struct SER__executeSql_USCOREencode_ *)ptr, "SER:executeSql_encode");
	case SOAP_TYPE_SER__executeSql_USCOREencode_Response:
		return soap_out_SER__executeSql_USCOREencode_Response(soap, tag, id, (const struct SER__executeSql_USCOREencode_Response *)ptr, "SER:executeSql_encode-Response");
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_:
		return soap_out_SER__executeSql_USCOREbackEncord_(soap, tag, id, (const struct SER__executeSql_USCOREbackEncord_ *)ptr, "SER:executeSql_backEncord");
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response:
		return soap_out_SER__executeSql_USCOREbackEncord_Response(soap, tag, id, (const struct SER__executeSql_USCOREbackEncord_Response *)ptr, "SER:executeSql_backEncord-Response");
	case SOAP_TYPE_SER__executeSql_:
		return soap_out_SER__executeSql_(soap, tag, id, (const struct SER__executeSql_ *)ptr, "SER:executeSql");
	case SOAP_TYPE_SER__executeSql_Response:
		return soap_out_SER__executeSql_Response(soap, tag, id, (const struct SER__executeSql_Response *)ptr, "SER:executeSql-Response");
	case SOAP_TYPE_SER__TestLinkSqlserver_:
		return soap_out_SER__TestLinkSqlserver_(soap, tag, id, (const struct SER__TestLinkSqlserver_ *)ptr, "SER:TestLinkSqlserver");
	case SOAP_TYPE_SER__TestLinkSqlserver_Response:
		return soap_out_SER__TestLinkSqlserver_Response(soap, tag, id, (const struct SER__TestLinkSqlserver_Response *)ptr, "SER:TestLinkSqlserver-Response");
	case SOAP_TYPE_SER__showExistLink_:
		return soap_out_SER__showExistLink_(soap, tag, id, (const struct SER__showExistLink_ *)ptr, "SER:showExistLink");
	case SOAP_TYPE_SER__showExistLink_Response:
		return soap_out_SER__showExistLink_Response(soap, tag, id, (const struct SER__showExistLink_Response *)ptr, "SER:showExistLink-Response");
	case SOAP_TYPE_SER__clearLink_:
		return soap_out_SER__clearLink_(soap, tag, id, (const struct SER__clearLink_ *)ptr, "SER:clearLink");
	case SOAP_TYPE_SER__clearLink_Response:
		return soap_out_SER__clearLink_Response(soap, tag, id, (const struct SER__clearLink_Response *)ptr, "SER:clearLink-Response");
	case SOAP_TYPE_SER__AddNumbers_:
		return soap_out_SER__AddNumbers_(soap, tag, id, (const struct SER__AddNumbers_ *)ptr, "SER:AddNumbers");
	case SOAP_TYPE_SER__AddNumbers_Response:
		return soap_out_SER__AddNumbers_Response(soap, tag, id, (const struct SER__AddNumbers_Response *)ptr, "SER:AddNumbers-Response");
	case SOAP_TYPE_SER__AddFileToSql:
		return soap_out_SER__AddFileToSql(soap, tag, id, (const struct SER__AddFileToSql *)ptr, "SER:AddFileToSql");
	case SOAP_TYPE_SER__AddFileToSqlResponse:
		return soap_out_SER__AddFileToSqlResponse(soap, tag, id, (const struct SER__AddFileToSqlResponse *)ptr, "SER:AddFileToSqlResponse");
	case SOAP_TYPE_SER__executeStorageProcess:
		return soap_out_SER__executeStorageProcess(soap, tag, id, (const struct SER__executeStorageProcess *)ptr, "SER:executeStorageProcess");
	case SOAP_TYPE_SER__executeStorageProcessResponse:
		return soap_out_SER__executeStorageProcessResponse(soap, tag, id, (const struct SER__executeStorageProcessResponse *)ptr, "SER:executeStorageProcessResponse");
	case SOAP_TYPE_SER__insertXml:
		return soap_out_SER__insertXml(soap, tag, id, (const struct SER__insertXml *)ptr, "SER:insertXml");
	case SOAP_TYPE_SER__insertXmlResponse:
		return soap_out_SER__insertXmlResponse(soap, tag, id, (const struct SER__insertXmlResponse *)ptr, "SER:insertXmlResponse");
	case SOAP_TYPE_SER__executeSql_USCOREencode:
		return soap_out_SER__executeSql_USCOREencode(soap, tag, id, (const struct SER__executeSql_USCOREencode *)ptr, "SER:executeSql_encode");
	case SOAP_TYPE_SER__executeSql_USCOREencodeResponse:
		return soap_out_SER__executeSql_USCOREencodeResponse(soap, tag, id, (const struct SER__executeSql_USCOREencodeResponse *)ptr, "SER:executeSql_encodeResponse");
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord:
		return soap_out_SER__executeSql_USCOREbackEncord(soap, tag, id, (const struct SER__executeSql_USCOREbackEncord *)ptr, "SER:executeSql_backEncord");
	case SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse:
		return soap_out_SER__executeSql_USCOREbackEncordResponse(soap, tag, id, (const struct SER__executeSql_USCOREbackEncordResponse *)ptr, "SER:executeSql_backEncordResponse");
	case SOAP_TYPE_SER__executeSql:
		return soap_out_SER__executeSql(soap, tag, id, (const struct SER__executeSql *)ptr, "SER:executeSql");
	case SOAP_TYPE_SER__executeSqlResponse:
		return soap_out_SER__executeSqlResponse(soap, tag, id, (const struct SER__executeSqlResponse *)ptr, "SER:executeSqlResponse");
	case SOAP_TYPE_SER__TestLinkSqlserver:
		return soap_out_SER__TestLinkSqlserver(soap, tag, id, (const struct SER__TestLinkSqlserver *)ptr, "SER:TestLinkSqlserver");
	case SOAP_TYPE_SER__TestLinkSqlserverResponse:
		return soap_out_SER__TestLinkSqlserverResponse(soap, tag, id, (const struct SER__TestLinkSqlserverResponse *)ptr, "SER:TestLinkSqlserverResponse");
	case SOAP_TYPE_SER__showExistLink:
		return soap_out_SER__showExistLink(soap, tag, id, (const struct SER__showExistLink *)ptr, "SER:showExistLink");
	case SOAP_TYPE_SER__showExistLinkResponse:
		return soap_out_SER__showExistLinkResponse(soap, tag, id, (const struct SER__showExistLinkResponse *)ptr, "SER:showExistLinkResponse");
	case SOAP_TYPE_SER__clearLink:
		return soap_out_SER__clearLink(soap, tag, id, (const struct SER__clearLink *)ptr, "SER:clearLink");
	case SOAP_TYPE_SER__clearLinkResponse:
		return soap_out_SER__clearLinkResponse(soap, tag, id, (const struct SER__clearLinkResponse *)ptr, "SER:clearLinkResponse");
	case SOAP_TYPE_SER__AddNumbers:
		return soap_out_SER__AddNumbers(soap, tag, id, (const struct SER__AddNumbers *)ptr, "SER:AddNumbers");
	case SOAP_TYPE_SER__AddNumbersResponse:
		return soap_out_SER__AddNumbersResponse(soap, tag, id, (const struct SER__AddNumbersResponse *)ptr, "SER:AddNumbersResponse");
	case SOAP_TYPE_PointerToMAC__GetServerInfo:
		return soap_out_PointerToMAC__GetServerInfo(soap, tag, id, (MAC__GetServerInfo *const*)ptr, "MAC:GetServerInfo");
	case SOAP_TYPE_PointerToMAC__GetLineServerList:
		return soap_out_PointerToMAC__GetLineServerList(soap, tag, id, (MAC__GetLineServerList *const*)ptr, "MAC:GetLineServerList");
	case SOAP_TYPE_PointerToMAC__addRobotRunState:
		return soap_out_PointerToMAC__addRobotRunState(soap, tag, id, (MAC__addRobotRunState *const*)ptr, "MAC:addRobotRunState");
	case SOAP_TYPE_PointerToMAC__GetLineServerInfo:
		return soap_out_PointerToMAC__GetLineServerInfo(soap, tag, id, (MAC__GetLineServerInfo *const*)ptr, "MAC:GetLineServerInfo");
	case SOAP_TYPE_PointerToMAC__fetchRobotConfig:
		return soap_out_PointerToMAC__fetchRobotConfig(soap, tag, id, (MAC__fetchRobotConfig *const*)ptr, "MAC:fetchRobotConfig");
	case SOAP_TYPE_wstring:
		return soap_out_wstring(soap, tag, id, (wchar_t*const*)(void*)&ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag, 0, NULL); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__wstring:
		soap_serialize_std__wstring(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_MAC__GetServerInfoResponse:
		((MAC__GetServerInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_MAC__GetServerInfo:
		((MAC__GetServerInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_MAC__GetLineServerListResponse:
		((MAC__GetLineServerListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_MAC__GetLineServerList:
		((MAC__GetLineServerList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_MAC__addRobotRunStateResponse:
		((MAC__addRobotRunStateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_MAC__addRobotRunState:
		((MAC__addRobotRunState *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_MAC__GetLineServerInfoResponse:
		((MAC__GetLineServerInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_MAC__GetLineServerInfo:
		((MAC__GetLineServerInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_MAC__fetchRobotConfigResponse:
		((MAC__fetchRobotConfigResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_MAC__fetchRobotConfig:
		((MAC__fetchRobotConfig *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SER__AddFileToSql_:
		soap_serialize_SER__AddFileToSql_(soap, (const struct SER__AddFileToSql_ *)ptr);
		break;
	case SOAP_TYPE_SER__AddFileToSql_Response:
		soap_serialize_SER__AddFileToSql_Response(soap, (const struct SER__AddFileToSql_Response *)ptr);
		break;
	case SOAP_TYPE_SER__executeStorageProcess_:
		soap_serialize_SER__executeStorageProcess_(soap, (const struct SER__executeStorageProcess_ *)ptr);
		break;
	case SOAP_TYPE_SER__executeStorageProcess_Response:
		soap_serialize_SER__executeStorageProcess_Response(soap, (const struct SER__executeStorageProcess_Response *)ptr);
		break;
	case SOAP_TYPE_SER__insertXml_:
		soap_serialize_SER__insertXml_(soap, (const struct SER__insertXml_ *)ptr);
		break;
	case SOAP_TYPE_SER__insertXml_Response:
		soap_serialize_SER__insertXml_Response(soap, (const struct SER__insertXml_Response *)ptr);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencode_:
		soap_serialize_SER__executeSql_USCOREencode_(soap, (const struct SER__executeSql_USCOREencode_ *)ptr);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencode_Response:
		soap_serialize_SER__executeSql_USCOREencode_Response(soap, (const struct SER__executeSql_USCOREencode_Response *)ptr);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_:
		soap_serialize_SER__executeSql_USCOREbackEncord_(soap, (const struct SER__executeSql_USCOREbackEncord_ *)ptr);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response:
		soap_serialize_SER__executeSql_USCOREbackEncord_Response(soap, (const struct SER__executeSql_USCOREbackEncord_Response *)ptr);
		break;
	case SOAP_TYPE_SER__executeSql_:
		soap_serialize_SER__executeSql_(soap, (const struct SER__executeSql_ *)ptr);
		break;
	case SOAP_TYPE_SER__executeSql_Response:
		soap_serialize_SER__executeSql_Response(soap, (const struct SER__executeSql_Response *)ptr);
		break;
	case SOAP_TYPE_SER__TestLinkSqlserver_:
		soap_serialize_SER__TestLinkSqlserver_(soap, (const struct SER__TestLinkSqlserver_ *)ptr);
		break;
	case SOAP_TYPE_SER__TestLinkSqlserver_Response:
		soap_serialize_SER__TestLinkSqlserver_Response(soap, (const struct SER__TestLinkSqlserver_Response *)ptr);
		break;
	case SOAP_TYPE_SER__showExistLink_:
		soap_serialize_SER__showExistLink_(soap, (const struct SER__showExistLink_ *)ptr);
		break;
	case SOAP_TYPE_SER__showExistLink_Response:
		soap_serialize_SER__showExistLink_Response(soap, (const struct SER__showExistLink_Response *)ptr);
		break;
	case SOAP_TYPE_SER__clearLink_:
		soap_serialize_SER__clearLink_(soap, (const struct SER__clearLink_ *)ptr);
		break;
	case SOAP_TYPE_SER__clearLink_Response:
		soap_serialize_SER__clearLink_Response(soap, (const struct SER__clearLink_Response *)ptr);
		break;
	case SOAP_TYPE_SER__AddNumbers_:
		soap_serialize_SER__AddNumbers_(soap, (const struct SER__AddNumbers_ *)ptr);
		break;
	case SOAP_TYPE_SER__AddNumbers_Response:
		soap_serialize_SER__AddNumbers_Response(soap, (const struct SER__AddNumbers_Response *)ptr);
		break;
	case SOAP_TYPE_SER__AddFileToSql:
		soap_serialize_SER__AddFileToSql(soap, (const struct SER__AddFileToSql *)ptr);
		break;
	case SOAP_TYPE_SER__AddFileToSqlResponse:
		soap_serialize_SER__AddFileToSqlResponse(soap, (const struct SER__AddFileToSqlResponse *)ptr);
		break;
	case SOAP_TYPE_SER__executeStorageProcess:
		soap_serialize_SER__executeStorageProcess(soap, (const struct SER__executeStorageProcess *)ptr);
		break;
	case SOAP_TYPE_SER__executeStorageProcessResponse:
		soap_serialize_SER__executeStorageProcessResponse(soap, (const struct SER__executeStorageProcessResponse *)ptr);
		break;
	case SOAP_TYPE_SER__insertXml:
		soap_serialize_SER__insertXml(soap, (const struct SER__insertXml *)ptr);
		break;
	case SOAP_TYPE_SER__insertXmlResponse:
		soap_serialize_SER__insertXmlResponse(soap, (const struct SER__insertXmlResponse *)ptr);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencode:
		soap_serialize_SER__executeSql_USCOREencode(soap, (const struct SER__executeSql_USCOREencode *)ptr);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencodeResponse:
		soap_serialize_SER__executeSql_USCOREencodeResponse(soap, (const struct SER__executeSql_USCOREencodeResponse *)ptr);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord:
		soap_serialize_SER__executeSql_USCOREbackEncord(soap, (const struct SER__executeSql_USCOREbackEncord *)ptr);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse:
		soap_serialize_SER__executeSql_USCOREbackEncordResponse(soap, (const struct SER__executeSql_USCOREbackEncordResponse *)ptr);
		break;
	case SOAP_TYPE_SER__executeSql:
		soap_serialize_SER__executeSql(soap, (const struct SER__executeSql *)ptr);
		break;
	case SOAP_TYPE_SER__executeSqlResponse:
		soap_serialize_SER__executeSqlResponse(soap, (const struct SER__executeSqlResponse *)ptr);
		break;
	case SOAP_TYPE_SER__TestLinkSqlserver:
		soap_serialize_SER__TestLinkSqlserver(soap, (const struct SER__TestLinkSqlserver *)ptr);
		break;
	case SOAP_TYPE_SER__TestLinkSqlserverResponse:
		soap_serialize_SER__TestLinkSqlserverResponse(soap, (const struct SER__TestLinkSqlserverResponse *)ptr);
		break;
	case SOAP_TYPE_SER__showExistLink:
		soap_serialize_SER__showExistLink(soap, (const struct SER__showExistLink *)ptr);
		break;
	case SOAP_TYPE_SER__showExistLinkResponse:
		soap_serialize_SER__showExistLinkResponse(soap, (const struct SER__showExistLinkResponse *)ptr);
		break;
	case SOAP_TYPE_SER__clearLink:
		soap_serialize_SER__clearLink(soap, (const struct SER__clearLink *)ptr);
		break;
	case SOAP_TYPE_SER__clearLinkResponse:
		soap_serialize_SER__clearLinkResponse(soap, (const struct SER__clearLinkResponse *)ptr);
		break;
	case SOAP_TYPE_SER__AddNumbers:
		soap_serialize_SER__AddNumbers(soap, (const struct SER__AddNumbers *)ptr);
		break;
	case SOAP_TYPE_SER__AddNumbersResponse:
		soap_serialize_SER__AddNumbersResponse(soap, (const struct SER__AddNumbersResponse *)ptr);
		break;
	case SOAP_TYPE___MAC__GetServerInfo:
		soap_serialize___MAC__GetServerInfo(soap, (const struct __MAC__GetServerInfo *)ptr);
		break;
	case SOAP_TYPE___MAC__GetLineServerList:
		soap_serialize___MAC__GetLineServerList(soap, (const struct __MAC__GetLineServerList *)ptr);
		break;
	case SOAP_TYPE___MAC__addRobotRunState:
		soap_serialize___MAC__addRobotRunState(soap, (const struct __MAC__addRobotRunState *)ptr);
		break;
	case SOAP_TYPE___MAC__GetLineServerInfo:
		soap_serialize___MAC__GetLineServerInfo(soap, (const struct __MAC__GetLineServerInfo *)ptr);
		break;
	case SOAP_TYPE___MAC__fetchRobotConfig:
		soap_serialize___MAC__fetchRobotConfig(soap, (const struct __MAC__fetchRobotConfig *)ptr);
		break;
	case SOAP_TYPE_PointerToMAC__GetServerInfo:
		soap_serialize_PointerToMAC__GetServerInfo(soap, (MAC__GetServerInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerToMAC__GetLineServerList:
		soap_serialize_PointerToMAC__GetLineServerList(soap, (MAC__GetLineServerList *const*)ptr);
		break;
	case SOAP_TYPE_PointerToMAC__addRobotRunState:
		soap_serialize_PointerToMAC__addRobotRunState(soap, (MAC__addRobotRunState *const*)ptr);
		break;
	case SOAP_TYPE_PointerToMAC__GetLineServerInfo:
		soap_serialize_PointerToMAC__GetLineServerInfo(soap, (MAC__GetLineServerInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerToMAC__fetchRobotConfig:
		soap_serialize_PointerToMAC__fetchRobotConfig(soap, (MAC__fetchRobotConfig *const*)ptr);
		break;
	case SOAP_TYPE_wstring:
		soap_serialize_wstring(soap, (wchar_t*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_MAC__fetchRobotConfig:
		return (void*)soap_instantiate_MAC__fetchRobotConfig(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MAC__fetchRobotConfigResponse:
		return (void*)soap_instantiate_MAC__fetchRobotConfigResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MAC__GetLineServerInfo:
		return (void*)soap_instantiate_MAC__GetLineServerInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MAC__GetLineServerInfoResponse:
		return (void*)soap_instantiate_MAC__GetLineServerInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MAC__addRobotRunState:
		return (void*)soap_instantiate_MAC__addRobotRunState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MAC__addRobotRunStateResponse:
		return (void*)soap_instantiate_MAC__addRobotRunStateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MAC__GetLineServerList:
		return (void*)soap_instantiate_MAC__GetLineServerList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MAC__GetLineServerListResponse:
		return (void*)soap_instantiate_MAC__GetLineServerListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MAC__GetServerInfo:
		return (void*)soap_instantiate_MAC__GetServerInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_MAC__GetServerInfoResponse:
		return (void*)soap_instantiate_MAC__GetServerInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___MAC__fetchRobotConfig:
		return (void*)soap_instantiate___MAC__fetchRobotConfig(soap, -1, type, arrayType, n);
	case SOAP_TYPE___MAC__GetLineServerInfo:
		return (void*)soap_instantiate___MAC__GetLineServerInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___MAC__addRobotRunState:
		return (void*)soap_instantiate___MAC__addRobotRunState(soap, -1, type, arrayType, n);
	case SOAP_TYPE___MAC__GetLineServerList:
		return (void*)soap_instantiate___MAC__GetLineServerList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___MAC__GetServerInfo:
		return (void*)soap_instantiate___MAC__GetServerInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__AddNumbersResponse:
		return (void*)soap_instantiate_SER__AddNumbersResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__AddNumbers:
		return (void*)soap_instantiate_SER__AddNumbers(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__wstring:
		return (void*)soap_instantiate_std__wstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__clearLinkResponse:
		return (void*)soap_instantiate_SER__clearLinkResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__clearLink:
		return (void*)soap_instantiate_SER__clearLink(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__showExistLinkResponse:
		return (void*)soap_instantiate_SER__showExistLinkResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__showExistLink:
		return (void*)soap_instantiate_SER__showExistLink(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__TestLinkSqlserverResponse:
		return (void*)soap_instantiate_SER__TestLinkSqlserverResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__TestLinkSqlserver:
		return (void*)soap_instantiate_SER__TestLinkSqlserver(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSqlResponse:
		return (void*)soap_instantiate_SER__executeSqlResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSql:
		return (void*)soap_instantiate_SER__executeSql(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse:
		return (void*)soap_instantiate_SER__executeSql_USCOREbackEncordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord:
		return (void*)soap_instantiate_SER__executeSql_USCOREbackEncord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSql_USCOREencodeResponse:
		return (void*)soap_instantiate_SER__executeSql_USCOREencodeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSql_USCOREencode:
		return (void*)soap_instantiate_SER__executeSql_USCOREencode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__insertXmlResponse:
		return (void*)soap_instantiate_SER__insertXmlResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__insertXml:
		return (void*)soap_instantiate_SER__insertXml(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeStorageProcessResponse:
		return (void*)soap_instantiate_SER__executeStorageProcessResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeStorageProcess:
		return (void*)soap_instantiate_SER__executeStorageProcess(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__AddFileToSqlResponse:
		return (void*)soap_instantiate_SER__AddFileToSqlResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__AddFileToSql:
		return (void*)soap_instantiate_SER__AddFileToSql(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__AddNumbers_Response:
		return (void*)soap_instantiate_SER__AddNumbers_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__AddNumbers_:
		return (void*)soap_instantiate_SER__AddNumbers_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__clearLink_Response:
		return (void*)soap_instantiate_SER__clearLink_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__clearLink_:
		return (void*)soap_instantiate_SER__clearLink_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__showExistLink_Response:
		return (void*)soap_instantiate_SER__showExistLink_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__showExistLink_:
		return (void*)soap_instantiate_SER__showExistLink_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__TestLinkSqlserver_Response:
		return (void*)soap_instantiate_SER__TestLinkSqlserver_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__TestLinkSqlserver_:
		return (void*)soap_instantiate_SER__TestLinkSqlserver_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSql_Response:
		return (void*)soap_instantiate_SER__executeSql_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSql_:
		return (void*)soap_instantiate_SER__executeSql_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response:
		return (void*)soap_instantiate_SER__executeSql_USCOREbackEncord_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_:
		return (void*)soap_instantiate_SER__executeSql_USCOREbackEncord_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSql_USCOREencode_Response:
		return (void*)soap_instantiate_SER__executeSql_USCOREencode_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeSql_USCOREencode_:
		return (void*)soap_instantiate_SER__executeSql_USCOREencode_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__insertXml_Response:
		return (void*)soap_instantiate_SER__insertXml_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__insertXml_:
		return (void*)soap_instantiate_SER__insertXml_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeStorageProcess_Response:
		return (void*)soap_instantiate_SER__executeStorageProcess_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__executeStorageProcess_:
		return (void*)soap_instantiate_SER__executeStorageProcess_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__AddFileToSql_Response:
		return (void*)soap_instantiate_SER__AddFileToSql_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SER__AddFileToSql_:
		return (void*)soap_instantiate_SER__AddFileToSql_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_MAC__fetchRobotConfig:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<MAC__fetchRobotConfig*>(p->ptr), MAC__fetchRobotConfig);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<MAC__fetchRobotConfig*>(p->ptr), MAC__fetchRobotConfig);
		break;
	case SOAP_TYPE_MAC__fetchRobotConfigResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<MAC__fetchRobotConfigResponse*>(p->ptr), MAC__fetchRobotConfigResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<MAC__fetchRobotConfigResponse*>(p->ptr), MAC__fetchRobotConfigResponse);
		break;
	case SOAP_TYPE_MAC__GetLineServerInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<MAC__GetLineServerInfo*>(p->ptr), MAC__GetLineServerInfo);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<MAC__GetLineServerInfo*>(p->ptr), MAC__GetLineServerInfo);
		break;
	case SOAP_TYPE_MAC__GetLineServerInfoResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<MAC__GetLineServerInfoResponse*>(p->ptr), MAC__GetLineServerInfoResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<MAC__GetLineServerInfoResponse*>(p->ptr), MAC__GetLineServerInfoResponse);
		break;
	case SOAP_TYPE_MAC__addRobotRunState:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<MAC__addRobotRunState*>(p->ptr), MAC__addRobotRunState);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<MAC__addRobotRunState*>(p->ptr), MAC__addRobotRunState);
		break;
	case SOAP_TYPE_MAC__addRobotRunStateResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<MAC__addRobotRunStateResponse*>(p->ptr), MAC__addRobotRunStateResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<MAC__addRobotRunStateResponse*>(p->ptr), MAC__addRobotRunStateResponse);
		break;
	case SOAP_TYPE_MAC__GetLineServerList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<MAC__GetLineServerList*>(p->ptr), MAC__GetLineServerList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<MAC__GetLineServerList*>(p->ptr), MAC__GetLineServerList);
		break;
	case SOAP_TYPE_MAC__GetLineServerListResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<MAC__GetLineServerListResponse*>(p->ptr), MAC__GetLineServerListResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<MAC__GetLineServerListResponse*>(p->ptr), MAC__GetLineServerListResponse);
		break;
	case SOAP_TYPE_MAC__GetServerInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<MAC__GetServerInfo*>(p->ptr), MAC__GetServerInfo);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<MAC__GetServerInfo*>(p->ptr), MAC__GetServerInfo);
		break;
	case SOAP_TYPE_MAC__GetServerInfoResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<MAC__GetServerInfoResponse*>(p->ptr), MAC__GetServerInfoResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<MAC__GetServerInfoResponse*>(p->ptr), MAC__GetServerInfoResponse);
		break;
	case SOAP_TYPE___MAC__fetchRobotConfig:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __MAC__fetchRobotConfig*>(p->ptr), struct __MAC__fetchRobotConfig);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __MAC__fetchRobotConfig*>(p->ptr), struct __MAC__fetchRobotConfig);
		break;
	case SOAP_TYPE___MAC__GetLineServerInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __MAC__GetLineServerInfo*>(p->ptr), struct __MAC__GetLineServerInfo);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __MAC__GetLineServerInfo*>(p->ptr), struct __MAC__GetLineServerInfo);
		break;
	case SOAP_TYPE___MAC__addRobotRunState:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __MAC__addRobotRunState*>(p->ptr), struct __MAC__addRobotRunState);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __MAC__addRobotRunState*>(p->ptr), struct __MAC__addRobotRunState);
		break;
	case SOAP_TYPE___MAC__GetLineServerList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __MAC__GetLineServerList*>(p->ptr), struct __MAC__GetLineServerList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __MAC__GetLineServerList*>(p->ptr), struct __MAC__GetLineServerList);
		break;
	case SOAP_TYPE___MAC__GetServerInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __MAC__GetServerInfo*>(p->ptr), struct __MAC__GetServerInfo);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __MAC__GetServerInfo*>(p->ptr), struct __MAC__GetServerInfo);
		break;
	case SOAP_TYPE_SER__AddNumbersResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__AddNumbersResponse*>(p->ptr), struct SER__AddNumbersResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__AddNumbersResponse*>(p->ptr), struct SER__AddNumbersResponse);
		break;
	case SOAP_TYPE_SER__AddNumbers:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__AddNumbers*>(p->ptr), struct SER__AddNumbers);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__AddNumbers*>(p->ptr), struct SER__AddNumbers);
		break;
	case SOAP_TYPE_std__wstring:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::wstring*>(p->ptr), std::wstring);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::wstring*>(p->ptr), std::wstring);
		break;
	case SOAP_TYPE_SER__clearLinkResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__clearLinkResponse*>(p->ptr), struct SER__clearLinkResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__clearLinkResponse*>(p->ptr), struct SER__clearLinkResponse);
		break;
	case SOAP_TYPE_SER__clearLink:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__clearLink*>(p->ptr), struct SER__clearLink);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__clearLink*>(p->ptr), struct SER__clearLink);
		break;
	case SOAP_TYPE_SER__showExistLinkResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__showExistLinkResponse*>(p->ptr), struct SER__showExistLinkResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__showExistLinkResponse*>(p->ptr), struct SER__showExistLinkResponse);
		break;
	case SOAP_TYPE_SER__showExistLink:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__showExistLink*>(p->ptr), struct SER__showExistLink);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__showExistLink*>(p->ptr), struct SER__showExistLink);
		break;
	case SOAP_TYPE_SER__TestLinkSqlserverResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__TestLinkSqlserverResponse*>(p->ptr), struct SER__TestLinkSqlserverResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__TestLinkSqlserverResponse*>(p->ptr), struct SER__TestLinkSqlserverResponse);
		break;
	case SOAP_TYPE_SER__TestLinkSqlserver:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__TestLinkSqlserver*>(p->ptr), struct SER__TestLinkSqlserver);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__TestLinkSqlserver*>(p->ptr), struct SER__TestLinkSqlserver);
		break;
	case SOAP_TYPE_SER__executeSqlResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSqlResponse*>(p->ptr), struct SER__executeSqlResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSqlResponse*>(p->ptr), struct SER__executeSqlResponse);
		break;
	case SOAP_TYPE_SER__executeSql:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSql*>(p->ptr), struct SER__executeSql);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSql*>(p->ptr), struct SER__executeSql);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSql_USCOREbackEncordResponse*>(p->ptr), struct SER__executeSql_USCOREbackEncordResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSql_USCOREbackEncordResponse*>(p->ptr), struct SER__executeSql_USCOREbackEncordResponse);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSql_USCOREbackEncord*>(p->ptr), struct SER__executeSql_USCOREbackEncord);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSql_USCOREbackEncord*>(p->ptr), struct SER__executeSql_USCOREbackEncord);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencodeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSql_USCOREencodeResponse*>(p->ptr), struct SER__executeSql_USCOREencodeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSql_USCOREencodeResponse*>(p->ptr), struct SER__executeSql_USCOREencodeResponse);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSql_USCOREencode*>(p->ptr), struct SER__executeSql_USCOREencode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSql_USCOREencode*>(p->ptr), struct SER__executeSql_USCOREencode);
		break;
	case SOAP_TYPE_SER__insertXmlResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__insertXmlResponse*>(p->ptr), struct SER__insertXmlResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__insertXmlResponse*>(p->ptr), struct SER__insertXmlResponse);
		break;
	case SOAP_TYPE_SER__insertXml:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__insertXml*>(p->ptr), struct SER__insertXml);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__insertXml*>(p->ptr), struct SER__insertXml);
		break;
	case SOAP_TYPE_SER__executeStorageProcessResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeStorageProcessResponse*>(p->ptr), struct SER__executeStorageProcessResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeStorageProcessResponse*>(p->ptr), struct SER__executeStorageProcessResponse);
		break;
	case SOAP_TYPE_SER__executeStorageProcess:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeStorageProcess*>(p->ptr), struct SER__executeStorageProcess);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeStorageProcess*>(p->ptr), struct SER__executeStorageProcess);
		break;
	case SOAP_TYPE_SER__AddFileToSqlResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__AddFileToSqlResponse*>(p->ptr), struct SER__AddFileToSqlResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__AddFileToSqlResponse*>(p->ptr), struct SER__AddFileToSqlResponse);
		break;
	case SOAP_TYPE_SER__AddFileToSql:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__AddFileToSql*>(p->ptr), struct SER__AddFileToSql);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__AddFileToSql*>(p->ptr), struct SER__AddFileToSql);
		break;
	case SOAP_TYPE_SER__AddNumbers_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__AddNumbers_Response*>(p->ptr), struct SER__AddNumbers_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__AddNumbers_Response*>(p->ptr), struct SER__AddNumbers_Response);
		break;
	case SOAP_TYPE_SER__AddNumbers_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__AddNumbers_*>(p->ptr), struct SER__AddNumbers_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__AddNumbers_*>(p->ptr), struct SER__AddNumbers_);
		break;
	case SOAP_TYPE_SER__clearLink_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__clearLink_Response*>(p->ptr), struct SER__clearLink_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__clearLink_Response*>(p->ptr), struct SER__clearLink_Response);
		break;
	case SOAP_TYPE_SER__clearLink_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__clearLink_*>(p->ptr), struct SER__clearLink_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__clearLink_*>(p->ptr), struct SER__clearLink_);
		break;
	case SOAP_TYPE_SER__showExistLink_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__showExistLink_Response*>(p->ptr), struct SER__showExistLink_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__showExistLink_Response*>(p->ptr), struct SER__showExistLink_Response);
		break;
	case SOAP_TYPE_SER__showExistLink_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__showExistLink_*>(p->ptr), struct SER__showExistLink_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__showExistLink_*>(p->ptr), struct SER__showExistLink_);
		break;
	case SOAP_TYPE_SER__TestLinkSqlserver_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__TestLinkSqlserver_Response*>(p->ptr), struct SER__TestLinkSqlserver_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__TestLinkSqlserver_Response*>(p->ptr), struct SER__TestLinkSqlserver_Response);
		break;
	case SOAP_TYPE_SER__TestLinkSqlserver_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__TestLinkSqlserver_*>(p->ptr), struct SER__TestLinkSqlserver_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__TestLinkSqlserver_*>(p->ptr), struct SER__TestLinkSqlserver_);
		break;
	case SOAP_TYPE_SER__executeSql_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSql_Response*>(p->ptr), struct SER__executeSql_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSql_Response*>(p->ptr), struct SER__executeSql_Response);
		break;
	case SOAP_TYPE_SER__executeSql_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSql_*>(p->ptr), struct SER__executeSql_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSql_*>(p->ptr), struct SER__executeSql_);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSql_USCOREbackEncord_Response*>(p->ptr), struct SER__executeSql_USCOREbackEncord_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSql_USCOREbackEncord_Response*>(p->ptr), struct SER__executeSql_USCOREbackEncord_Response);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSql_USCOREbackEncord_*>(p->ptr), struct SER__executeSql_USCOREbackEncord_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSql_USCOREbackEncord_*>(p->ptr), struct SER__executeSql_USCOREbackEncord_);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencode_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSql_USCOREencode_Response*>(p->ptr), struct SER__executeSql_USCOREencode_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSql_USCOREencode_Response*>(p->ptr), struct SER__executeSql_USCOREencode_Response);
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencode_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeSql_USCOREencode_*>(p->ptr), struct SER__executeSql_USCOREencode_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeSql_USCOREencode_*>(p->ptr), struct SER__executeSql_USCOREencode_);
		break;
	case SOAP_TYPE_SER__insertXml_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__insertXml_Response*>(p->ptr), struct SER__insertXml_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__insertXml_Response*>(p->ptr), struct SER__insertXml_Response);
		break;
	case SOAP_TYPE_SER__insertXml_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__insertXml_*>(p->ptr), struct SER__insertXml_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__insertXml_*>(p->ptr), struct SER__insertXml_);
		break;
	case SOAP_TYPE_SER__executeStorageProcess_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeStorageProcess_Response*>(p->ptr), struct SER__executeStorageProcess_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeStorageProcess_Response*>(p->ptr), struct SER__executeStorageProcess_Response);
		break;
	case SOAP_TYPE_SER__executeStorageProcess_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__executeStorageProcess_*>(p->ptr), struct SER__executeStorageProcess_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__executeStorageProcess_*>(p->ptr), struct SER__executeStorageProcess_);
		break;
	case SOAP_TYPE_SER__AddFileToSql_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__AddFileToSql_Response*>(p->ptr), struct SER__AddFileToSql_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__AddFileToSql_Response*>(p->ptr), struct SER__AddFileToSql_Response);
		break;
	case SOAP_TYPE_SER__AddFileToSql_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SER__AddFileToSql_*>(p->ptr), struct SER__AddFileToSql_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SER__AddFileToSql_*>(p->ptr), struct SER__AddFileToSql_);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_MAC__fetchRobotConfig:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy MAC__fetchRobotConfig type=%d location=%p object=%p\n", t, p, q));
		*(MAC__fetchRobotConfig*)p = *(MAC__fetchRobotConfig*)q;
		break;
	case SOAP_TYPE_MAC__fetchRobotConfigResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy MAC__fetchRobotConfigResponse type=%d location=%p object=%p\n", t, p, q));
		*(MAC__fetchRobotConfigResponse*)p = *(MAC__fetchRobotConfigResponse*)q;
		break;
	case SOAP_TYPE_MAC__GetLineServerInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy MAC__GetLineServerInfo type=%d location=%p object=%p\n", t, p, q));
		*(MAC__GetLineServerInfo*)p = *(MAC__GetLineServerInfo*)q;
		break;
	case SOAP_TYPE_MAC__GetLineServerInfoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy MAC__GetLineServerInfoResponse type=%d location=%p object=%p\n", t, p, q));
		*(MAC__GetLineServerInfoResponse*)p = *(MAC__GetLineServerInfoResponse*)q;
		break;
	case SOAP_TYPE_MAC__addRobotRunState:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy MAC__addRobotRunState type=%d location=%p object=%p\n", t, p, q));
		*(MAC__addRobotRunState*)p = *(MAC__addRobotRunState*)q;
		break;
	case SOAP_TYPE_MAC__addRobotRunStateResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy MAC__addRobotRunStateResponse type=%d location=%p object=%p\n", t, p, q));
		*(MAC__addRobotRunStateResponse*)p = *(MAC__addRobotRunStateResponse*)q;
		break;
	case SOAP_TYPE_MAC__GetLineServerList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy MAC__GetLineServerList type=%d location=%p object=%p\n", t, p, q));
		*(MAC__GetLineServerList*)p = *(MAC__GetLineServerList*)q;
		break;
	case SOAP_TYPE_MAC__GetLineServerListResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy MAC__GetLineServerListResponse type=%d location=%p object=%p\n", t, p, q));
		*(MAC__GetLineServerListResponse*)p = *(MAC__GetLineServerListResponse*)q;
		break;
	case SOAP_TYPE_MAC__GetServerInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy MAC__GetServerInfo type=%d location=%p object=%p\n", t, p, q));
		*(MAC__GetServerInfo*)p = *(MAC__GetServerInfo*)q;
		break;
	case SOAP_TYPE_MAC__GetServerInfoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy MAC__GetServerInfoResponse type=%d location=%p object=%p\n", t, p, q));
		*(MAC__GetServerInfoResponse*)p = *(MAC__GetServerInfoResponse*)q;
		break;
	case SOAP_TYPE___MAC__fetchRobotConfig:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __MAC__fetchRobotConfig type=%d location=%p object=%p\n", t, p, q));
		*(struct __MAC__fetchRobotConfig*)p = *(struct __MAC__fetchRobotConfig*)q;
		break;
	case SOAP_TYPE___MAC__GetLineServerInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __MAC__GetLineServerInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct __MAC__GetLineServerInfo*)p = *(struct __MAC__GetLineServerInfo*)q;
		break;
	case SOAP_TYPE___MAC__addRobotRunState:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __MAC__addRobotRunState type=%d location=%p object=%p\n", t, p, q));
		*(struct __MAC__addRobotRunState*)p = *(struct __MAC__addRobotRunState*)q;
		break;
	case SOAP_TYPE___MAC__GetLineServerList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __MAC__GetLineServerList type=%d location=%p object=%p\n", t, p, q));
		*(struct __MAC__GetLineServerList*)p = *(struct __MAC__GetLineServerList*)q;
		break;
	case SOAP_TYPE___MAC__GetServerInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __MAC__GetServerInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct __MAC__GetServerInfo*)p = *(struct __MAC__GetServerInfo*)q;
		break;
	case SOAP_TYPE_SER__AddNumbersResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__AddNumbersResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__AddNumbersResponse*)p = *(struct SER__AddNumbersResponse*)q;
		break;
	case SOAP_TYPE_SER__AddNumbers:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__AddNumbers type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__AddNumbers*)p = *(struct SER__AddNumbers*)q;
		break;
	case SOAP_TYPE_std__wstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::wstring type=%d location=%p object=%p\n", t, p, q));
		*(std::wstring*)p = *(std::wstring*)q;
		break;
	case SOAP_TYPE_SER__clearLinkResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__clearLinkResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__clearLinkResponse*)p = *(struct SER__clearLinkResponse*)q;
		break;
	case SOAP_TYPE_SER__clearLink:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__clearLink type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__clearLink*)p = *(struct SER__clearLink*)q;
		break;
	case SOAP_TYPE_SER__showExistLinkResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__showExistLinkResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__showExistLinkResponse*)p = *(struct SER__showExistLinkResponse*)q;
		break;
	case SOAP_TYPE_SER__showExistLink:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__showExistLink type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__showExistLink*)p = *(struct SER__showExistLink*)q;
		break;
	case SOAP_TYPE_SER__TestLinkSqlserverResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__TestLinkSqlserverResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__TestLinkSqlserverResponse*)p = *(struct SER__TestLinkSqlserverResponse*)q;
		break;
	case SOAP_TYPE_SER__TestLinkSqlserver:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__TestLinkSqlserver type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__TestLinkSqlserver*)p = *(struct SER__TestLinkSqlserver*)q;
		break;
	case SOAP_TYPE_SER__executeSqlResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSqlResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSqlResponse*)p = *(struct SER__executeSqlResponse*)q;
		break;
	case SOAP_TYPE_SER__executeSql:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSql type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSql*)p = *(struct SER__executeSql*)q;
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSql_USCOREbackEncordResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSql_USCOREbackEncordResponse*)p = *(struct SER__executeSql_USCOREbackEncordResponse*)q;
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSql_USCOREbackEncord type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSql_USCOREbackEncord*)p = *(struct SER__executeSql_USCOREbackEncord*)q;
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencodeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSql_USCOREencodeResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSql_USCOREencodeResponse*)p = *(struct SER__executeSql_USCOREencodeResponse*)q;
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSql_USCOREencode type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSql_USCOREencode*)p = *(struct SER__executeSql_USCOREencode*)q;
		break;
	case SOAP_TYPE_SER__insertXmlResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__insertXmlResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__insertXmlResponse*)p = *(struct SER__insertXmlResponse*)q;
		break;
	case SOAP_TYPE_SER__insertXml:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__insertXml type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__insertXml*)p = *(struct SER__insertXml*)q;
		break;
	case SOAP_TYPE_SER__executeStorageProcessResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeStorageProcessResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeStorageProcessResponse*)p = *(struct SER__executeStorageProcessResponse*)q;
		break;
	case SOAP_TYPE_SER__executeStorageProcess:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeStorageProcess type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeStorageProcess*)p = *(struct SER__executeStorageProcess*)q;
		break;
	case SOAP_TYPE_SER__AddFileToSqlResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__AddFileToSqlResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__AddFileToSqlResponse*)p = *(struct SER__AddFileToSqlResponse*)q;
		break;
	case SOAP_TYPE_SER__AddFileToSql:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__AddFileToSql type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__AddFileToSql*)p = *(struct SER__AddFileToSql*)q;
		break;
	case SOAP_TYPE_SER__AddNumbers_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__AddNumbers_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__AddNumbers_Response*)p = *(struct SER__AddNumbers_Response*)q;
		break;
	case SOAP_TYPE_SER__AddNumbers_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__AddNumbers_ type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__AddNumbers_*)p = *(struct SER__AddNumbers_*)q;
		break;
	case SOAP_TYPE_SER__clearLink_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__clearLink_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__clearLink_Response*)p = *(struct SER__clearLink_Response*)q;
		break;
	case SOAP_TYPE_SER__clearLink_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__clearLink_ type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__clearLink_*)p = *(struct SER__clearLink_*)q;
		break;
	case SOAP_TYPE_SER__showExistLink_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__showExistLink_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__showExistLink_Response*)p = *(struct SER__showExistLink_Response*)q;
		break;
	case SOAP_TYPE_SER__showExistLink_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__showExistLink_ type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__showExistLink_*)p = *(struct SER__showExistLink_*)q;
		break;
	case SOAP_TYPE_SER__TestLinkSqlserver_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__TestLinkSqlserver_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__TestLinkSqlserver_Response*)p = *(struct SER__TestLinkSqlserver_Response*)q;
		break;
	case SOAP_TYPE_SER__TestLinkSqlserver_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__TestLinkSqlserver_ type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__TestLinkSqlserver_*)p = *(struct SER__TestLinkSqlserver_*)q;
		break;
	case SOAP_TYPE_SER__executeSql_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSql_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSql_Response*)p = *(struct SER__executeSql_Response*)q;
		break;
	case SOAP_TYPE_SER__executeSql_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSql_ type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSql_*)p = *(struct SER__executeSql_*)q;
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSql_USCOREbackEncord_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSql_USCOREbackEncord_Response*)p = *(struct SER__executeSql_USCOREbackEncord_Response*)q;
		break;
	case SOAP_TYPE_SER__executeSql_USCOREbackEncord_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSql_USCOREbackEncord_ type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSql_USCOREbackEncord_*)p = *(struct SER__executeSql_USCOREbackEncord_*)q;
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencode_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSql_USCOREencode_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSql_USCOREencode_Response*)p = *(struct SER__executeSql_USCOREencode_Response*)q;
		break;
	case SOAP_TYPE_SER__executeSql_USCOREencode_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeSql_USCOREencode_ type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeSql_USCOREencode_*)p = *(struct SER__executeSql_USCOREencode_*)q;
		break;
	case SOAP_TYPE_SER__insertXml_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__insertXml_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__insertXml_Response*)p = *(struct SER__insertXml_Response*)q;
		break;
	case SOAP_TYPE_SER__insertXml_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__insertXml_ type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__insertXml_*)p = *(struct SER__insertXml_*)q;
		break;
	case SOAP_TYPE_SER__executeStorageProcess_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeStorageProcess_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeStorageProcess_Response*)p = *(struct SER__executeStorageProcess_Response*)q;
		break;
	case SOAP_TYPE_SER__executeStorageProcess_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__executeStorageProcess_ type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__executeStorageProcess_*)p = *(struct SER__executeStorageProcess_*)q;
		break;
	case SOAP_TYPE_SER__AddFileToSql_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__AddFileToSql_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__AddFileToSql_Response*)p = *(struct SER__AddFileToSql_Response*)q;
		break;
	case SOAP_TYPE_SER__AddFileToSql_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SER__AddFileToSql_ type=%d location=%p object=%p\n", t, p, q));
		*(struct SER__AddFileToSql_*)p = *(struct SER__AddFileToSql_*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap *soap, const std::wstring *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__wstring), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	wchar_t *t;
		s = (std::wstring*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_wstring_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__wstring, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__wstring(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::wstring *p;
	size_t k = sizeof(std::wstring);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__wstring, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::wstring);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::wstring, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::wstring location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	if (soap_out_std__wstring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void MAC__GetServerInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->MAC__GetServerInfoResponse::return_ = NULL;
}

void MAC__GetServerInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->MAC__GetServerInfoResponse::return_);
#endif
}

int MAC__GetServerInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_MAC__GetServerInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetServerInfoResponse(struct soap *soap, const char *tag, int id, const MAC__GetServerInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MAC__GetServerInfoResponse), type))
		return soap->error;
	if (soap_out_wstring(soap, "return", -1, (wchar_t*const*)&a->MAC__GetServerInfoResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *MAC__GetServerInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_MAC__GetServerInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 MAC__GetServerInfoResponse * SOAP_FMAC4 soap_in_MAC__GetServerInfoResponse(struct soap *soap, const char *tag, MAC__GetServerInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (MAC__GetServerInfoResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MAC__GetServerInfoResponse, sizeof(MAC__GetServerInfoResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_MAC__GetServerInfoResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (MAC__GetServerInfoResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "return", (wchar_t**)&a->MAC__GetServerInfoResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (MAC__GetServerInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MAC__GetServerInfoResponse, SOAP_TYPE_MAC__GetServerInfoResponse, sizeof(MAC__GetServerInfoResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 MAC__GetServerInfoResponse * SOAP_FMAC2 soap_instantiate_MAC__GetServerInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MAC__GetServerInfoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	MAC__GetServerInfoResponse *p;
	size_t k = sizeof(MAC__GetServerInfoResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_MAC__GetServerInfoResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, MAC__GetServerInfoResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, MAC__GetServerInfoResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated MAC__GetServerInfoResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int MAC__GetServerInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_MAC__GetServerInfoResponse(soap, tag ? tag : "MAC:GetServerInfoResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *MAC__GetServerInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_MAC__GetServerInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 MAC__GetServerInfoResponse * SOAP_FMAC4 soap_get_MAC__GetServerInfoResponse(struct soap *soap, MAC__GetServerInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_MAC__GetServerInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void MAC__GetServerInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->MAC__GetServerInfo::serverId);
	soap_default_int(soap, &this->MAC__GetServerInfo::postId);
	soap_default_bool(soap, &this->MAC__GetServerInfo::outUse);
	soap_default_bool(soap, &this->MAC__GetServerInfo::isSync);
}

void MAC__GetServerInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int MAC__GetServerInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_MAC__GetServerInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetServerInfo(struct soap *soap, const char *tag, int id, const MAC__GetServerInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MAC__GetServerInfo), type))
		return soap->error;
	if (soap_out_int(soap, "serverId", -1, &a->MAC__GetServerInfo::serverId, ""))
		return soap->error;
	if (soap_out_int(soap, "postId", -1, &a->MAC__GetServerInfo::postId, ""))
		return soap->error;
	if (soap_out_bool(soap, "outUse", -1, &a->MAC__GetServerInfo::outUse, ""))
		return soap->error;
	if (soap_out_bool(soap, "isSync", -1, &a->MAC__GetServerInfo::isSync, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *MAC__GetServerInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_MAC__GetServerInfo(soap, tag, this, type);
}

SOAP_FMAC3 MAC__GetServerInfo * SOAP_FMAC4 soap_in_MAC__GetServerInfo(struct soap *soap, const char *tag, MAC__GetServerInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (MAC__GetServerInfo*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MAC__GetServerInfo, sizeof(MAC__GetServerInfo), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_MAC__GetServerInfo)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (MAC__GetServerInfo *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_serverId1 = 1;
	size_t soap_flag_postId1 = 1;
	size_t soap_flag_outUse1 = 1;
	size_t soap_flag_isSync1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "serverId", &a->MAC__GetServerInfo::serverId, "xsd:int"))
				{	soap_flag_serverId1--;
					continue;
				}
			}
			if (soap_flag_postId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "postId", &a->MAC__GetServerInfo::postId, "xsd:int"))
				{	soap_flag_postId1--;
					continue;
				}
			}
			if (soap_flag_outUse1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "outUse", &a->MAC__GetServerInfo::outUse, "xsd:boolean"))
				{	soap_flag_outUse1--;
					continue;
				}
			}
			if (soap_flag_isSync1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "isSync", &a->MAC__GetServerInfo::isSync, "xsd:boolean"))
				{	soap_flag_isSync1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverId1 > 0 || soap_flag_postId1 > 0 || soap_flag_outUse1 > 0 || soap_flag_isSync1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (MAC__GetServerInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MAC__GetServerInfo, SOAP_TYPE_MAC__GetServerInfo, sizeof(MAC__GetServerInfo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 MAC__GetServerInfo * SOAP_FMAC2 soap_instantiate_MAC__GetServerInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MAC__GetServerInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	MAC__GetServerInfo *p;
	size_t k = sizeof(MAC__GetServerInfo);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_MAC__GetServerInfo, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, MAC__GetServerInfo);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, MAC__GetServerInfo, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated MAC__GetServerInfo location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int MAC__GetServerInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_MAC__GetServerInfo(soap, tag ? tag : "MAC:GetServerInfo", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *MAC__GetServerInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_MAC__GetServerInfo(soap, this, tag, type);
}

SOAP_FMAC3 MAC__GetServerInfo * SOAP_FMAC4 soap_get_MAC__GetServerInfo(struct soap *soap, MAC__GetServerInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_MAC__GetServerInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void MAC__GetLineServerListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->MAC__GetLineServerListResponse::return_ = NULL;
}

void MAC__GetLineServerListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->MAC__GetLineServerListResponse::return_);
#endif
}

int MAC__GetLineServerListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_MAC__GetLineServerListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetLineServerListResponse(struct soap *soap, const char *tag, int id, const MAC__GetLineServerListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MAC__GetLineServerListResponse), type))
		return soap->error;
	if (soap_out_wstring(soap, "return", -1, (wchar_t*const*)&a->MAC__GetLineServerListResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *MAC__GetLineServerListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_MAC__GetLineServerListResponse(soap, tag, this, type);
}

SOAP_FMAC3 MAC__GetLineServerListResponse * SOAP_FMAC4 soap_in_MAC__GetLineServerListResponse(struct soap *soap, const char *tag, MAC__GetLineServerListResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (MAC__GetLineServerListResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MAC__GetLineServerListResponse, sizeof(MAC__GetLineServerListResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_MAC__GetLineServerListResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (MAC__GetLineServerListResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "return", (wchar_t**)&a->MAC__GetLineServerListResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (MAC__GetLineServerListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MAC__GetLineServerListResponse, SOAP_TYPE_MAC__GetLineServerListResponse, sizeof(MAC__GetLineServerListResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 MAC__GetLineServerListResponse * SOAP_FMAC2 soap_instantiate_MAC__GetLineServerListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MAC__GetLineServerListResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	MAC__GetLineServerListResponse *p;
	size_t k = sizeof(MAC__GetLineServerListResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_MAC__GetLineServerListResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, MAC__GetLineServerListResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, MAC__GetLineServerListResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated MAC__GetLineServerListResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int MAC__GetLineServerListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_MAC__GetLineServerListResponse(soap, tag ? tag : "MAC:GetLineServerListResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *MAC__GetLineServerListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_MAC__GetLineServerListResponse(soap, this, tag, type);
}

SOAP_FMAC3 MAC__GetLineServerListResponse * SOAP_FMAC4 soap_get_MAC__GetLineServerListResponse(struct soap *soap, MAC__GetLineServerListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_MAC__GetLineServerListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void MAC__GetLineServerList::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->MAC__GetLineServerList::outUse);
}

void MAC__GetLineServerList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int MAC__GetLineServerList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_MAC__GetLineServerList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetLineServerList(struct soap *soap, const char *tag, int id, const MAC__GetLineServerList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MAC__GetLineServerList), type))
		return soap->error;
	if (soap_out_bool(soap, "outUse", -1, &a->MAC__GetLineServerList::outUse, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *MAC__GetLineServerList::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_MAC__GetLineServerList(soap, tag, this, type);
}

SOAP_FMAC3 MAC__GetLineServerList * SOAP_FMAC4 soap_in_MAC__GetLineServerList(struct soap *soap, const char *tag, MAC__GetLineServerList *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (MAC__GetLineServerList*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MAC__GetLineServerList, sizeof(MAC__GetLineServerList), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_MAC__GetLineServerList)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (MAC__GetLineServerList *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_outUse1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_outUse1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "outUse", &a->MAC__GetLineServerList::outUse, "xsd:boolean"))
				{	soap_flag_outUse1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_outUse1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (MAC__GetLineServerList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MAC__GetLineServerList, SOAP_TYPE_MAC__GetLineServerList, sizeof(MAC__GetLineServerList), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 MAC__GetLineServerList * SOAP_FMAC2 soap_instantiate_MAC__GetLineServerList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MAC__GetLineServerList(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	MAC__GetLineServerList *p;
	size_t k = sizeof(MAC__GetLineServerList);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_MAC__GetLineServerList, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, MAC__GetLineServerList);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, MAC__GetLineServerList, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated MAC__GetLineServerList location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int MAC__GetLineServerList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_MAC__GetLineServerList(soap, tag ? tag : "MAC:GetLineServerList", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *MAC__GetLineServerList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_MAC__GetLineServerList(soap, this, tag, type);
}

SOAP_FMAC3 MAC__GetLineServerList * SOAP_FMAC4 soap_get_MAC__GetLineServerList(struct soap *soap, MAC__GetLineServerList *p, const char *tag, const char *type)
{
	if ((p = soap_in_MAC__GetLineServerList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void MAC__addRobotRunStateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->MAC__addRobotRunStateResponse::return_ = NULL;
}

void MAC__addRobotRunStateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->MAC__addRobotRunStateResponse::return_);
#endif
}

int MAC__addRobotRunStateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_MAC__addRobotRunStateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__addRobotRunStateResponse(struct soap *soap, const char *tag, int id, const MAC__addRobotRunStateResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MAC__addRobotRunStateResponse), type))
		return soap->error;
	if (soap_out_wstring(soap, "return", -1, (wchar_t*const*)&a->MAC__addRobotRunStateResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *MAC__addRobotRunStateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_MAC__addRobotRunStateResponse(soap, tag, this, type);
}

SOAP_FMAC3 MAC__addRobotRunStateResponse * SOAP_FMAC4 soap_in_MAC__addRobotRunStateResponse(struct soap *soap, const char *tag, MAC__addRobotRunStateResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (MAC__addRobotRunStateResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MAC__addRobotRunStateResponse, sizeof(MAC__addRobotRunStateResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_MAC__addRobotRunStateResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (MAC__addRobotRunStateResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "return", (wchar_t**)&a->MAC__addRobotRunStateResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (MAC__addRobotRunStateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MAC__addRobotRunStateResponse, SOAP_TYPE_MAC__addRobotRunStateResponse, sizeof(MAC__addRobotRunStateResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 MAC__addRobotRunStateResponse * SOAP_FMAC2 soap_instantiate_MAC__addRobotRunStateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MAC__addRobotRunStateResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	MAC__addRobotRunStateResponse *p;
	size_t k = sizeof(MAC__addRobotRunStateResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_MAC__addRobotRunStateResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, MAC__addRobotRunStateResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, MAC__addRobotRunStateResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated MAC__addRobotRunStateResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int MAC__addRobotRunStateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_MAC__addRobotRunStateResponse(soap, tag ? tag : "MAC:addRobotRunStateResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *MAC__addRobotRunStateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_MAC__addRobotRunStateResponse(soap, this, tag, type);
}

SOAP_FMAC3 MAC__addRobotRunStateResponse * SOAP_FMAC4 soap_get_MAC__addRobotRunStateResponse(struct soap *soap, MAC__addRobotRunStateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_MAC__addRobotRunStateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void MAC__addRobotRunState::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->MAC__addRobotRunState::token = NULL;
	this->MAC__addRobotRunState::managerIP = NULL;
	soap_default_int(soap, &this->MAC__addRobotRunState::LineId);
	soap_default_int(soap, &this->MAC__addRobotRunState::PostId);
	soap_default_int(soap, &this->MAC__addRobotRunState::runningNum);
}

void MAC__addRobotRunState::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->MAC__addRobotRunState::token);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->MAC__addRobotRunState::managerIP);
#endif
}

int MAC__addRobotRunState::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_MAC__addRobotRunState(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__addRobotRunState(struct soap *soap, const char *tag, int id, const MAC__addRobotRunState *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MAC__addRobotRunState), type))
		return soap->error;
	if (soap_out_wstring(soap, "token", -1, (wchar_t*const*)&a->MAC__addRobotRunState::token, ""))
		return soap->error;
	if (soap_out_wstring(soap, "managerIP", -1, (wchar_t*const*)&a->MAC__addRobotRunState::managerIP, ""))
		return soap->error;
	if (soap_out_int(soap, "LineId", -1, &a->MAC__addRobotRunState::LineId, ""))
		return soap->error;
	if (soap_out_int(soap, "PostId", -1, &a->MAC__addRobotRunState::PostId, ""))
		return soap->error;
	if (soap_out_int(soap, "runningNum", -1, &a->MAC__addRobotRunState::runningNum, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *MAC__addRobotRunState::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_MAC__addRobotRunState(soap, tag, this, type);
}

SOAP_FMAC3 MAC__addRobotRunState * SOAP_FMAC4 soap_in_MAC__addRobotRunState(struct soap *soap, const char *tag, MAC__addRobotRunState *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (MAC__addRobotRunState*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MAC__addRobotRunState, sizeof(MAC__addRobotRunState), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_MAC__addRobotRunState)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (MAC__addRobotRunState *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_token1 = 1;
	size_t soap_flag_managerIP1 = 1;
	size_t soap_flag_LineId1 = 1;
	size_t soap_flag_PostId1 = 1;
	size_t soap_flag_runningNum1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_token1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "token", (wchar_t**)&a->MAC__addRobotRunState::token, "xsd:string"))
				{	soap_flag_token1--;
					continue;
				}
			}
			if (soap_flag_managerIP1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "managerIP", (wchar_t**)&a->MAC__addRobotRunState::managerIP, "xsd:string"))
				{	soap_flag_managerIP1--;
					continue;
				}
			}
			if (soap_flag_LineId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "LineId", &a->MAC__addRobotRunState::LineId, "xsd:int"))
				{	soap_flag_LineId1--;
					continue;
				}
			}
			if (soap_flag_PostId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "PostId", &a->MAC__addRobotRunState::PostId, "xsd:int"))
				{	soap_flag_PostId1--;
					continue;
				}
			}
			if (soap_flag_runningNum1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "runningNum", &a->MAC__addRobotRunState::runningNum, "xsd:int"))
				{	soap_flag_runningNum1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_LineId1 > 0 || soap_flag_PostId1 > 0 || soap_flag_runningNum1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (MAC__addRobotRunState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MAC__addRobotRunState, SOAP_TYPE_MAC__addRobotRunState, sizeof(MAC__addRobotRunState), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 MAC__addRobotRunState * SOAP_FMAC2 soap_instantiate_MAC__addRobotRunState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MAC__addRobotRunState(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	MAC__addRobotRunState *p;
	size_t k = sizeof(MAC__addRobotRunState);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_MAC__addRobotRunState, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, MAC__addRobotRunState);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, MAC__addRobotRunState, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated MAC__addRobotRunState location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int MAC__addRobotRunState::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_MAC__addRobotRunState(soap, tag ? tag : "MAC:addRobotRunState", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *MAC__addRobotRunState::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_MAC__addRobotRunState(soap, this, tag, type);
}

SOAP_FMAC3 MAC__addRobotRunState * SOAP_FMAC4 soap_get_MAC__addRobotRunState(struct soap *soap, MAC__addRobotRunState *p, const char *tag, const char *type)
{
	if ((p = soap_in_MAC__addRobotRunState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void MAC__GetLineServerInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->MAC__GetLineServerInfoResponse::return_ = NULL;
}

void MAC__GetLineServerInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->MAC__GetLineServerInfoResponse::return_);
#endif
}

int MAC__GetLineServerInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_MAC__GetLineServerInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetLineServerInfoResponse(struct soap *soap, const char *tag, int id, const MAC__GetLineServerInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MAC__GetLineServerInfoResponse), type))
		return soap->error;
	if (soap_out_wstring(soap, "return", -1, (wchar_t*const*)&a->MAC__GetLineServerInfoResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *MAC__GetLineServerInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_MAC__GetLineServerInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 MAC__GetLineServerInfoResponse * SOAP_FMAC4 soap_in_MAC__GetLineServerInfoResponse(struct soap *soap, const char *tag, MAC__GetLineServerInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (MAC__GetLineServerInfoResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MAC__GetLineServerInfoResponse, sizeof(MAC__GetLineServerInfoResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_MAC__GetLineServerInfoResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (MAC__GetLineServerInfoResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "return", (wchar_t**)&a->MAC__GetLineServerInfoResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (MAC__GetLineServerInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MAC__GetLineServerInfoResponse, SOAP_TYPE_MAC__GetLineServerInfoResponse, sizeof(MAC__GetLineServerInfoResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 MAC__GetLineServerInfoResponse * SOAP_FMAC2 soap_instantiate_MAC__GetLineServerInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MAC__GetLineServerInfoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	MAC__GetLineServerInfoResponse *p;
	size_t k = sizeof(MAC__GetLineServerInfoResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_MAC__GetLineServerInfoResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, MAC__GetLineServerInfoResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, MAC__GetLineServerInfoResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated MAC__GetLineServerInfoResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int MAC__GetLineServerInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_MAC__GetLineServerInfoResponse(soap, tag ? tag : "MAC:GetLineServerInfoResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *MAC__GetLineServerInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_MAC__GetLineServerInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 MAC__GetLineServerInfoResponse * SOAP_FMAC4 soap_get_MAC__GetLineServerInfoResponse(struct soap *soap, MAC__GetLineServerInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_MAC__GetLineServerInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void MAC__GetLineServerInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->MAC__GetLineServerInfo::token = NULL;
	soap_default_int(soap, &this->MAC__GetLineServerInfo::lineId);
	soap_default_bool(soap, &this->MAC__GetLineServerInfo::outUse);
}

void MAC__GetLineServerInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->MAC__GetLineServerInfo::token);
#endif
}

int MAC__GetLineServerInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_MAC__GetLineServerInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetLineServerInfo(struct soap *soap, const char *tag, int id, const MAC__GetLineServerInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MAC__GetLineServerInfo), type))
		return soap->error;
	if (soap_out_wstring(soap, "token", -1, (wchar_t*const*)&a->MAC__GetLineServerInfo::token, ""))
		return soap->error;
	if (soap_out_int(soap, "lineId", -1, &a->MAC__GetLineServerInfo::lineId, ""))
		return soap->error;
	if (soap_out_bool(soap, "outUse", -1, &a->MAC__GetLineServerInfo::outUse, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *MAC__GetLineServerInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_MAC__GetLineServerInfo(soap, tag, this, type);
}

SOAP_FMAC3 MAC__GetLineServerInfo * SOAP_FMAC4 soap_in_MAC__GetLineServerInfo(struct soap *soap, const char *tag, MAC__GetLineServerInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (MAC__GetLineServerInfo*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MAC__GetLineServerInfo, sizeof(MAC__GetLineServerInfo), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_MAC__GetLineServerInfo)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (MAC__GetLineServerInfo *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_token1 = 1;
	size_t soap_flag_lineId1 = 1;
	size_t soap_flag_outUse1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_token1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "token", (wchar_t**)&a->MAC__GetLineServerInfo::token, "xsd:string"))
				{	soap_flag_token1--;
					continue;
				}
			}
			if (soap_flag_lineId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "lineId", &a->MAC__GetLineServerInfo::lineId, "xsd:int"))
				{	soap_flag_lineId1--;
					continue;
				}
			}
			if (soap_flag_outUse1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "outUse", &a->MAC__GetLineServerInfo::outUse, "xsd:boolean"))
				{	soap_flag_outUse1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_lineId1 > 0 || soap_flag_outUse1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (MAC__GetLineServerInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MAC__GetLineServerInfo, SOAP_TYPE_MAC__GetLineServerInfo, sizeof(MAC__GetLineServerInfo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 MAC__GetLineServerInfo * SOAP_FMAC2 soap_instantiate_MAC__GetLineServerInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MAC__GetLineServerInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	MAC__GetLineServerInfo *p;
	size_t k = sizeof(MAC__GetLineServerInfo);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_MAC__GetLineServerInfo, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, MAC__GetLineServerInfo);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, MAC__GetLineServerInfo, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated MAC__GetLineServerInfo location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int MAC__GetLineServerInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_MAC__GetLineServerInfo(soap, tag ? tag : "MAC:GetLineServerInfo", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *MAC__GetLineServerInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_MAC__GetLineServerInfo(soap, this, tag, type);
}

SOAP_FMAC3 MAC__GetLineServerInfo * SOAP_FMAC4 soap_get_MAC__GetLineServerInfo(struct soap *soap, MAC__GetLineServerInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_MAC__GetLineServerInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void MAC__fetchRobotConfigResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->MAC__fetchRobotConfigResponse::return_ = NULL;
}

void MAC__fetchRobotConfigResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->MAC__fetchRobotConfigResponse::return_);
#endif
}

int MAC__fetchRobotConfigResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_MAC__fetchRobotConfigResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__fetchRobotConfigResponse(struct soap *soap, const char *tag, int id, const MAC__fetchRobotConfigResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MAC__fetchRobotConfigResponse), type))
		return soap->error;
	if (soap_out_wstring(soap, "return", -1, (wchar_t*const*)&a->MAC__fetchRobotConfigResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *MAC__fetchRobotConfigResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_MAC__fetchRobotConfigResponse(soap, tag, this, type);
}

SOAP_FMAC3 MAC__fetchRobotConfigResponse * SOAP_FMAC4 soap_in_MAC__fetchRobotConfigResponse(struct soap *soap, const char *tag, MAC__fetchRobotConfigResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (MAC__fetchRobotConfigResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MAC__fetchRobotConfigResponse, sizeof(MAC__fetchRobotConfigResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_MAC__fetchRobotConfigResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (MAC__fetchRobotConfigResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "return", (wchar_t**)&a->MAC__fetchRobotConfigResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (MAC__fetchRobotConfigResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MAC__fetchRobotConfigResponse, SOAP_TYPE_MAC__fetchRobotConfigResponse, sizeof(MAC__fetchRobotConfigResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 MAC__fetchRobotConfigResponse * SOAP_FMAC2 soap_instantiate_MAC__fetchRobotConfigResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MAC__fetchRobotConfigResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	MAC__fetchRobotConfigResponse *p;
	size_t k = sizeof(MAC__fetchRobotConfigResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_MAC__fetchRobotConfigResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, MAC__fetchRobotConfigResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, MAC__fetchRobotConfigResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated MAC__fetchRobotConfigResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int MAC__fetchRobotConfigResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_MAC__fetchRobotConfigResponse(soap, tag ? tag : "MAC:fetchRobotConfigResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *MAC__fetchRobotConfigResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_MAC__fetchRobotConfigResponse(soap, this, tag, type);
}

SOAP_FMAC3 MAC__fetchRobotConfigResponse * SOAP_FMAC4 soap_get_MAC__fetchRobotConfigResponse(struct soap *soap, MAC__fetchRobotConfigResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_MAC__fetchRobotConfigResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void MAC__fetchRobotConfig::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->MAC__fetchRobotConfig::token = NULL;
	this->MAC__fetchRobotConfig::managerIP = NULL;
}

void MAC__fetchRobotConfig::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->MAC__fetchRobotConfig::token);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->MAC__fetchRobotConfig::managerIP);
#endif
}

int MAC__fetchRobotConfig::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_MAC__fetchRobotConfig(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__fetchRobotConfig(struct soap *soap, const char *tag, int id, const MAC__fetchRobotConfig *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_MAC__fetchRobotConfig), type))
		return soap->error;
	if (soap_out_wstring(soap, "token", -1, (wchar_t*const*)&a->MAC__fetchRobotConfig::token, ""))
		return soap->error;
	if (soap_out_wstring(soap, "managerIP", -1, (wchar_t*const*)&a->MAC__fetchRobotConfig::managerIP, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *MAC__fetchRobotConfig::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_MAC__fetchRobotConfig(soap, tag, this, type);
}

SOAP_FMAC3 MAC__fetchRobotConfig * SOAP_FMAC4 soap_in_MAC__fetchRobotConfig(struct soap *soap, const char *tag, MAC__fetchRobotConfig *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (MAC__fetchRobotConfig*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_MAC__fetchRobotConfig, sizeof(MAC__fetchRobotConfig), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_MAC__fetchRobotConfig)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (MAC__fetchRobotConfig *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_token1 = 1;
	size_t soap_flag_managerIP1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_token1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "token", (wchar_t**)&a->MAC__fetchRobotConfig::token, "xsd:string"))
				{	soap_flag_token1--;
					continue;
				}
			}
			if (soap_flag_managerIP1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "managerIP", (wchar_t**)&a->MAC__fetchRobotConfig::managerIP, "xsd:string"))
				{	soap_flag_managerIP1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (MAC__fetchRobotConfig *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_MAC__fetchRobotConfig, SOAP_TYPE_MAC__fetchRobotConfig, sizeof(MAC__fetchRobotConfig), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 MAC__fetchRobotConfig * SOAP_FMAC2 soap_instantiate_MAC__fetchRobotConfig(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_MAC__fetchRobotConfig(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	MAC__fetchRobotConfig *p;
	size_t k = sizeof(MAC__fetchRobotConfig);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_MAC__fetchRobotConfig, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, MAC__fetchRobotConfig);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, MAC__fetchRobotConfig, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated MAC__fetchRobotConfig location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int MAC__fetchRobotConfig::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_MAC__fetchRobotConfig(soap, tag ? tag : "MAC:fetchRobotConfig", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *MAC__fetchRobotConfig::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_MAC__fetchRobotConfig(soap, this, tag, type);
}

SOAP_FMAC3 MAC__fetchRobotConfig * SOAP_FMAC4 soap_get_MAC__fetchRobotConfig(struct soap *soap, MAC__fetchRobotConfig *p, const char *tag, const char *type)
{
	if ((p = soap_in_MAC__fetchRobotConfig(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddFileToSql_(struct soap *soap, struct SER__AddFileToSql_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->strFileName);
	soap_default_std__wstring(soap, &a->sPointer);
	soap_default_std__wstring(soap, &a->tablenamefieldname);
	soap_default_std__wstring(soap, &a->fileIP);
	soap_default_std__wstring(soap, &a->fileUse);
	soap_default_std__wstring(soap, &a->filePassword);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddFileToSql_(struct soap *soap, const struct SER__AddFileToSql_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->strFileName);
	soap_serialize_std__wstring(soap, &a->sPointer);
	soap_serialize_std__wstring(soap, &a->tablenamefieldname);
	soap_serialize_std__wstring(soap, &a->fileIP);
	soap_serialize_std__wstring(soap, &a->fileUse);
	soap_serialize_std__wstring(soap, &a->filePassword);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddFileToSql_(struct soap *soap, const char *tag, int id, const struct SER__AddFileToSql_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__AddFileToSql_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "strFileName", -1, &a->strFileName, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sPointer", -1, &a->sPointer, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "tablenamefieldname", -1, &a->tablenamefieldname, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "fileIP", -1, &a->fileIP, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "fileUse", -1, &a->fileUse, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "filePassword", -1, &a->filePassword, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__AddFileToSql_ * SOAP_FMAC4 soap_in_SER__AddFileToSql_(struct soap *soap, const char *tag, struct SER__AddFileToSql_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_strFileName = 1;
	size_t soap_flag_sPointer = 1;
	size_t soap_flag_tablenamefieldname = 1;
	size_t soap_flag_fileIP = 1;
	size_t soap_flag_fileUse = 1;
	size_t soap_flag_filePassword = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__AddFileToSql_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__AddFileToSql_, sizeof(struct SER__AddFileToSql_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__AddFileToSql_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_strFileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "strFileName", &a->strFileName, "xsd:string"))
				{	soap_flag_strFileName--;
					continue;
				}
			}
			if (soap_flag_sPointer && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sPointer", &a->sPointer, "xsd:string"))
				{	soap_flag_sPointer--;
					continue;
				}
			}
			if (soap_flag_tablenamefieldname && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "tablenamefieldname", &a->tablenamefieldname, "xsd:string"))
				{	soap_flag_tablenamefieldname--;
					continue;
				}
			}
			if (soap_flag_fileIP && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "fileIP", &a->fileIP, "xsd:string"))
				{	soap_flag_fileIP--;
					continue;
				}
			}
			if (soap_flag_fileUse && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "fileUse", &a->fileUse, "xsd:string"))
				{	soap_flag_fileUse--;
					continue;
				}
			}
			if (soap_flag_filePassword && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "filePassword", &a->filePassword, "xsd:string"))
				{	soap_flag_filePassword--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_strFileName > 0 || soap_flag_sPointer > 0 || soap_flag_tablenamefieldname > 0 || soap_flag_fileIP > 0 || soap_flag_fileUse > 0 || soap_flag_filePassword > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__AddFileToSql_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__AddFileToSql_, SOAP_TYPE_SER__AddFileToSql_, sizeof(struct SER__AddFileToSql_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__AddFileToSql_ * SOAP_FMAC2 soap_instantiate_SER__AddFileToSql_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__AddFileToSql_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__AddFileToSql_ *p;
	size_t k = sizeof(struct SER__AddFileToSql_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__AddFileToSql_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__AddFileToSql_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__AddFileToSql_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__AddFileToSql_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddFileToSql_(struct soap *soap, const struct SER__AddFileToSql_ *a, const char *tag, const char *type)
{
	if (soap_out_SER__AddFileToSql_(soap, tag ? tag : "SER:AddFileToSql", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__AddFileToSql_ * SOAP_FMAC4 soap_get_SER__AddFileToSql_(struct soap *soap, struct SER__AddFileToSql_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__AddFileToSql_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddFileToSql_Response(struct soap *soap, struct SER__AddFileToSql_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->AddFileToSqlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddFileToSql_Response(struct soap *soap, const struct SER__AddFileToSql_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->AddFileToSqlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddFileToSql_Response(struct soap *soap, const char *tag, int id, const struct SER__AddFileToSql_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__AddFileToSql_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "AddFileToSqlResult", -1, &a->AddFileToSqlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__AddFileToSql_Response * SOAP_FMAC4 soap_in_SER__AddFileToSql_Response(struct soap *soap, const char *tag, struct SER__AddFileToSql_Response *a, const char *type)
{
	size_t soap_flag_AddFileToSqlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__AddFileToSql_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__AddFileToSql_Response, sizeof(struct SER__AddFileToSql_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__AddFileToSql_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddFileToSqlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "AddFileToSqlResult", &a->AddFileToSqlResult, "xsd:string"))
				{	soap_flag_AddFileToSqlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AddFileToSqlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__AddFileToSql_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__AddFileToSql_Response, SOAP_TYPE_SER__AddFileToSql_Response, sizeof(struct SER__AddFileToSql_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__AddFileToSql_Response * SOAP_FMAC2 soap_instantiate_SER__AddFileToSql_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__AddFileToSql_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__AddFileToSql_Response *p;
	size_t k = sizeof(struct SER__AddFileToSql_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__AddFileToSql_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__AddFileToSql_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__AddFileToSql_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__AddFileToSql_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddFileToSql_Response(struct soap *soap, const struct SER__AddFileToSql_Response *a, const char *tag, const char *type)
{
	if (soap_out_SER__AddFileToSql_Response(soap, tag ? tag : "SER:AddFileToSql-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__AddFileToSql_Response * SOAP_FMAC4 soap_get_SER__AddFileToSql_Response(struct soap *soap, struct SER__AddFileToSql_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__AddFileToSql_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeStorageProcess_(struct soap *soap, struct SER__executeStorageProcess_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->StorageProcessName);
	soap_default_std__wstring(soap, &a->Parameters);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeStorageProcess_(struct soap *soap, const struct SER__executeStorageProcess_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->StorageProcessName);
	soap_serialize_std__wstring(soap, &a->Parameters);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeStorageProcess_(struct soap *soap, const char *tag, int id, const struct SER__executeStorageProcess_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeStorageProcess_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "StorageProcessName", -1, &a->StorageProcessName, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "Parameters", -1, &a->Parameters, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeStorageProcess_ * SOAP_FMAC4 soap_in_SER__executeStorageProcess_(struct soap *soap, const char *tag, struct SER__executeStorageProcess_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_StorageProcessName = 1;
	size_t soap_flag_Parameters = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeStorageProcess_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeStorageProcess_, sizeof(struct SER__executeStorageProcess_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeStorageProcess_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_StorageProcessName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "StorageProcessName", &a->StorageProcessName, "xsd:string"))
				{	soap_flag_StorageProcessName--;
					continue;
				}
			}
			if (soap_flag_Parameters && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "Parameters", &a->Parameters, "xsd:string"))
				{	soap_flag_Parameters--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_StorageProcessName > 0 || soap_flag_Parameters > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeStorageProcess_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeStorageProcess_, SOAP_TYPE_SER__executeStorageProcess_, sizeof(struct SER__executeStorageProcess_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeStorageProcess_ * SOAP_FMAC2 soap_instantiate_SER__executeStorageProcess_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeStorageProcess_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeStorageProcess_ *p;
	size_t k = sizeof(struct SER__executeStorageProcess_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeStorageProcess_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeStorageProcess_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeStorageProcess_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeStorageProcess_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeStorageProcess_(struct soap *soap, const struct SER__executeStorageProcess_ *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeStorageProcess_(soap, tag ? tag : "SER:executeStorageProcess", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeStorageProcess_ * SOAP_FMAC4 soap_get_SER__executeStorageProcess_(struct soap *soap, struct SER__executeStorageProcess_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeStorageProcess_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeStorageProcess_Response(struct soap *soap, struct SER__executeStorageProcess_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeStorageProcessResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeStorageProcess_Response(struct soap *soap, const struct SER__executeStorageProcess_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeStorageProcessResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeStorageProcess_Response(struct soap *soap, const char *tag, int id, const struct SER__executeStorageProcess_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeStorageProcess_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeStorageProcessResult", -1, &a->executeStorageProcessResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeStorageProcess_Response * SOAP_FMAC4 soap_in_SER__executeStorageProcess_Response(struct soap *soap, const char *tag, struct SER__executeStorageProcess_Response *a, const char *type)
{
	size_t soap_flag_executeStorageProcessResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeStorageProcess_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeStorageProcess_Response, sizeof(struct SER__executeStorageProcess_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeStorageProcess_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeStorageProcessResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeStorageProcessResult", &a->executeStorageProcessResult, "xsd:string"))
				{	soap_flag_executeStorageProcessResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeStorageProcessResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeStorageProcess_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeStorageProcess_Response, SOAP_TYPE_SER__executeStorageProcess_Response, sizeof(struct SER__executeStorageProcess_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeStorageProcess_Response * SOAP_FMAC2 soap_instantiate_SER__executeStorageProcess_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeStorageProcess_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeStorageProcess_Response *p;
	size_t k = sizeof(struct SER__executeStorageProcess_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeStorageProcess_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeStorageProcess_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeStorageProcess_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeStorageProcess_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeStorageProcess_Response(struct soap *soap, const struct SER__executeStorageProcess_Response *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeStorageProcess_Response(soap, tag ? tag : "SER:executeStorageProcess-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeStorageProcess_Response * SOAP_FMAC4 soap_get_SER__executeStorageProcess_Response(struct soap *soap, struct SER__executeStorageProcess_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeStorageProcess_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__insertXml_(struct soap *soap, struct SER__insertXml_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->strXml);
	soap_default_bool(soap, &a->encode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__insertXml_(struct soap *soap, const struct SER__insertXml_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->strXml);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__insertXml_(struct soap *soap, const char *tag, int id, const struct SER__insertXml_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__insertXml_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "strXml", -1, &a->strXml, ""))
		return soap->error;
	if (soap_out_bool(soap, "encode", -1, &a->encode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__insertXml_ * SOAP_FMAC4 soap_in_SER__insertXml_(struct soap *soap, const char *tag, struct SER__insertXml_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_strXml = 1;
	size_t soap_flag_encode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__insertXml_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__insertXml_, sizeof(struct SER__insertXml_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__insertXml_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_strXml && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "strXml", &a->strXml, "xsd:string"))
				{	soap_flag_strXml--;
					continue;
				}
			}
			if (soap_flag_encode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "encode", &a->encode, "xsd:boolean"))
				{	soap_flag_encode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_strXml > 0 || soap_flag_encode > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__insertXml_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__insertXml_, SOAP_TYPE_SER__insertXml_, sizeof(struct SER__insertXml_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__insertXml_ * SOAP_FMAC2 soap_instantiate_SER__insertXml_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__insertXml_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__insertXml_ *p;
	size_t k = sizeof(struct SER__insertXml_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__insertXml_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__insertXml_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__insertXml_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__insertXml_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__insertXml_(struct soap *soap, const struct SER__insertXml_ *a, const char *tag, const char *type)
{
	if (soap_out_SER__insertXml_(soap, tag ? tag : "SER:insertXml", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__insertXml_ * SOAP_FMAC4 soap_get_SER__insertXml_(struct soap *soap, struct SER__insertXml_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__insertXml_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__insertXml_Response(struct soap *soap, struct SER__insertXml_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->insertXmlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__insertXml_Response(struct soap *soap, const struct SER__insertXml_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->insertXmlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__insertXml_Response(struct soap *soap, const char *tag, int id, const struct SER__insertXml_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__insertXml_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "insertXmlResult", -1, &a->insertXmlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__insertXml_Response * SOAP_FMAC4 soap_in_SER__insertXml_Response(struct soap *soap, const char *tag, struct SER__insertXml_Response *a, const char *type)
{
	size_t soap_flag_insertXmlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__insertXml_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__insertXml_Response, sizeof(struct SER__insertXml_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__insertXml_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_insertXmlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "insertXmlResult", &a->insertXmlResult, "xsd:string"))
				{	soap_flag_insertXmlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_insertXmlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__insertXml_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__insertXml_Response, SOAP_TYPE_SER__insertXml_Response, sizeof(struct SER__insertXml_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__insertXml_Response * SOAP_FMAC2 soap_instantiate_SER__insertXml_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__insertXml_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__insertXml_Response *p;
	size_t k = sizeof(struct SER__insertXml_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__insertXml_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__insertXml_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__insertXml_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__insertXml_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__insertXml_Response(struct soap *soap, const struct SER__insertXml_Response *a, const char *tag, const char *type)
{
	if (soap_out_SER__insertXml_Response(soap, tag ? tag : "SER:insertXml-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__insertXml_Response * SOAP_FMAC4 soap_get_SER__insertXml_Response(struct soap *soap, struct SER__insertXml_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__insertXml_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREencode_(struct soap *soap, struct SER__executeSql_USCOREencode_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREencode_(struct soap *soap, const struct SER__executeSql_USCOREencode_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREencode_(struct soap *soap, const char *tag, int id, const struct SER__executeSql_USCOREencode_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSql_USCOREencode_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSql_USCOREencode_ * SOAP_FMAC4 soap_in_SER__executeSql_USCOREencode_(struct soap *soap, const char *tag, struct SER__executeSql_USCOREencode_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSql_USCOREencode_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSql_USCOREencode_, sizeof(struct SER__executeSql_USCOREencode_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSql_USCOREencode_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSql_USCOREencode_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSql_USCOREencode_, SOAP_TYPE_SER__executeSql_USCOREencode_, sizeof(struct SER__executeSql_USCOREencode_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSql_USCOREencode_ * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREencode_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSql_USCOREencode_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSql_USCOREencode_ *p;
	size_t k = sizeof(struct SER__executeSql_USCOREencode_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSql_USCOREencode_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSql_USCOREencode_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSql_USCOREencode_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSql_USCOREencode_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREencode_(struct soap *soap, const struct SER__executeSql_USCOREencode_ *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSql_USCOREencode_(soap, tag ? tag : "SER:executeSql_encode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSql_USCOREencode_ * SOAP_FMAC4 soap_get_SER__executeSql_USCOREencode_(struct soap *soap, struct SER__executeSql_USCOREencode_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSql_USCOREencode_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREencode_Response(struct soap *soap, struct SER__executeSql_USCOREencode_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSql_USCOREencodeResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREencode_Response(struct soap *soap, const struct SER__executeSql_USCOREencode_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSql_USCOREencodeResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREencode_Response(struct soap *soap, const char *tag, int id, const struct SER__executeSql_USCOREencode_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSql_USCOREencode_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSql_encodeResult", -1, &a->executeSql_USCOREencodeResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSql_USCOREencode_Response * SOAP_FMAC4 soap_in_SER__executeSql_USCOREencode_Response(struct soap *soap, const char *tag, struct SER__executeSql_USCOREencode_Response *a, const char *type)
{
	size_t soap_flag_executeSql_USCOREencodeResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSql_USCOREencode_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSql_USCOREencode_Response, sizeof(struct SER__executeSql_USCOREencode_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSql_USCOREencode_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSql_USCOREencodeResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSql_encodeResult", &a->executeSql_USCOREencodeResult, "xsd:string"))
				{	soap_flag_executeSql_USCOREencodeResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSql_USCOREencodeResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSql_USCOREencode_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSql_USCOREencode_Response, SOAP_TYPE_SER__executeSql_USCOREencode_Response, sizeof(struct SER__executeSql_USCOREencode_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSql_USCOREencode_Response * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREencode_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSql_USCOREencode_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSql_USCOREencode_Response *p;
	size_t k = sizeof(struct SER__executeSql_USCOREencode_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSql_USCOREencode_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSql_USCOREencode_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSql_USCOREencode_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSql_USCOREencode_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREencode_Response(struct soap *soap, const struct SER__executeSql_USCOREencode_Response *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSql_USCOREencode_Response(soap, tag ? tag : "SER:executeSql_encode-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSql_USCOREencode_Response * SOAP_FMAC4 soap_get_SER__executeSql_USCOREencode_Response(struct soap *soap, struct SER__executeSql_USCOREencode_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSql_USCOREencode_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREbackEncord_(struct soap *soap, struct SER__executeSql_USCOREbackEncord_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREbackEncord_(struct soap *soap, const struct SER__executeSql_USCOREbackEncord_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREbackEncord_(struct soap *soap, const char *tag, int id, const struct SER__executeSql_USCOREbackEncord_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSql_USCOREbackEncord_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord_ * SOAP_FMAC4 soap_in_SER__executeSql_USCOREbackEncord_(struct soap *soap, const char *tag, struct SER__executeSql_USCOREbackEncord_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSql_USCOREbackEncord_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSql_USCOREbackEncord_, sizeof(struct SER__executeSql_USCOREbackEncord_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSql_USCOREbackEncord_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSql_USCOREbackEncord_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSql_USCOREbackEncord_, SOAP_TYPE_SER__executeSql_USCOREbackEncord_, sizeof(struct SER__executeSql_USCOREbackEncord_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSql_USCOREbackEncord_ * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREbackEncord_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSql_USCOREbackEncord_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSql_USCOREbackEncord_ *p;
	size_t k = sizeof(struct SER__executeSql_USCOREbackEncord_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSql_USCOREbackEncord_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSql_USCOREbackEncord_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSql_USCOREbackEncord_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSql_USCOREbackEncord_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREbackEncord_(struct soap *soap, const struct SER__executeSql_USCOREbackEncord_ *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSql_USCOREbackEncord_(soap, tag ? tag : "SER:executeSql_backEncord", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord_ * SOAP_FMAC4 soap_get_SER__executeSql_USCOREbackEncord_(struct soap *soap, struct SER__executeSql_USCOREbackEncord_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSql_USCOREbackEncord_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, struct SER__executeSql_USCOREbackEncord_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSql_USCOREbackEncordResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, const struct SER__executeSql_USCOREbackEncord_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSql_USCOREbackEncordResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *tag, int id, const struct SER__executeSql_USCOREbackEncord_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSql_backEncordResult", -1, &a->executeSql_USCOREbackEncordResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord_Response * SOAP_FMAC4 soap_in_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *tag, struct SER__executeSql_USCOREbackEncord_Response *a, const char *type)
{
	size_t soap_flag_executeSql_USCOREbackEncordResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSql_USCOREbackEncord_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response, sizeof(struct SER__executeSql_USCOREbackEncord_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSql_USCOREbackEncord_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSql_USCOREbackEncordResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSql_backEncordResult", &a->executeSql_USCOREbackEncordResult, "xsd:string"))
				{	soap_flag_executeSql_USCOREbackEncordResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSql_USCOREbackEncordResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSql_USCOREbackEncord_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response, SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response, sizeof(struct SER__executeSql_USCOREbackEncord_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSql_USCOREbackEncord_Response * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSql_USCOREbackEncord_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSql_USCOREbackEncord_Response *p;
	size_t k = sizeof(struct SER__executeSql_USCOREbackEncord_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSql_USCOREbackEncord_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSql_USCOREbackEncord_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSql_USCOREbackEncord_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, const struct SER__executeSql_USCOREbackEncord_Response *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSql_USCOREbackEncord_Response(soap, tag ? tag : "SER:executeSql_backEncord-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord_Response * SOAP_FMAC4 soap_get_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, struct SER__executeSql_USCOREbackEncord_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSql_USCOREbackEncord_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_(struct soap *soap, struct SER__executeSql_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_(struct soap *soap, const struct SER__executeSql_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_(struct soap *soap, const char *tag, int id, const struct SER__executeSql_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSql_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSql_ * SOAP_FMAC4 soap_in_SER__executeSql_(struct soap *soap, const char *tag, struct SER__executeSql_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSql_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSql_, sizeof(struct SER__executeSql_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSql_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSql_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSql_, SOAP_TYPE_SER__executeSql_, sizeof(struct SER__executeSql_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSql_ * SOAP_FMAC2 soap_instantiate_SER__executeSql_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSql_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSql_ *p;
	size_t k = sizeof(struct SER__executeSql_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSql_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSql_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSql_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSql_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_(struct soap *soap, const struct SER__executeSql_ *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSql_(soap, tag ? tag : "SER:executeSql", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSql_ * SOAP_FMAC4 soap_get_SER__executeSql_(struct soap *soap, struct SER__executeSql_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSql_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_Response(struct soap *soap, struct SER__executeSql_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSqlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_Response(struct soap *soap, const struct SER__executeSql_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSqlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_Response(struct soap *soap, const char *tag, int id, const struct SER__executeSql_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSql_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSqlResult", -1, &a->executeSqlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSql_Response * SOAP_FMAC4 soap_in_SER__executeSql_Response(struct soap *soap, const char *tag, struct SER__executeSql_Response *a, const char *type)
{
	size_t soap_flag_executeSqlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSql_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSql_Response, sizeof(struct SER__executeSql_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSql_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSqlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSqlResult", &a->executeSqlResult, "xsd:string"))
				{	soap_flag_executeSqlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSqlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSql_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSql_Response, SOAP_TYPE_SER__executeSql_Response, sizeof(struct SER__executeSql_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSql_Response * SOAP_FMAC2 soap_instantiate_SER__executeSql_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSql_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSql_Response *p;
	size_t k = sizeof(struct SER__executeSql_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSql_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSql_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSql_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSql_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_Response(struct soap *soap, const struct SER__executeSql_Response *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSql_Response(soap, tag ? tag : "SER:executeSql-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSql_Response * SOAP_FMAC4 soap_get_SER__executeSql_Response(struct soap *soap, struct SER__executeSql_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSql_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__TestLinkSqlserver_(struct soap *soap, struct SER__TestLinkSqlserver_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__TestLinkSqlserver_(struct soap *soap, const struct SER__TestLinkSqlserver_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__TestLinkSqlserver_(struct soap *soap, const char *tag, int id, const struct SER__TestLinkSqlserver_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__TestLinkSqlserver_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__TestLinkSqlserver_ * SOAP_FMAC4 soap_in_SER__TestLinkSqlserver_(struct soap *soap, const char *tag, struct SER__TestLinkSqlserver_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__TestLinkSqlserver_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__TestLinkSqlserver_, sizeof(struct SER__TestLinkSqlserver_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__TestLinkSqlserver_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__TestLinkSqlserver_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__TestLinkSqlserver_, SOAP_TYPE_SER__TestLinkSqlserver_, sizeof(struct SER__TestLinkSqlserver_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__TestLinkSqlserver_ * SOAP_FMAC2 soap_instantiate_SER__TestLinkSqlserver_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__TestLinkSqlserver_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__TestLinkSqlserver_ *p;
	size_t k = sizeof(struct SER__TestLinkSqlserver_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__TestLinkSqlserver_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__TestLinkSqlserver_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__TestLinkSqlserver_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__TestLinkSqlserver_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__TestLinkSqlserver_(struct soap *soap, const struct SER__TestLinkSqlserver_ *a, const char *tag, const char *type)
{
	if (soap_out_SER__TestLinkSqlserver_(soap, tag ? tag : "SER:TestLinkSqlserver", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__TestLinkSqlserver_ * SOAP_FMAC4 soap_get_SER__TestLinkSqlserver_(struct soap *soap, struct SER__TestLinkSqlserver_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__TestLinkSqlserver_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__TestLinkSqlserver_Response(struct soap *soap, struct SER__TestLinkSqlserver_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->TestLinkSqlserverResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__TestLinkSqlserver_Response(struct soap *soap, const struct SER__TestLinkSqlserver_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->TestLinkSqlserverResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__TestLinkSqlserver_Response(struct soap *soap, const char *tag, int id, const struct SER__TestLinkSqlserver_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__TestLinkSqlserver_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "TestLinkSqlserverResult", -1, &a->TestLinkSqlserverResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__TestLinkSqlserver_Response * SOAP_FMAC4 soap_in_SER__TestLinkSqlserver_Response(struct soap *soap, const char *tag, struct SER__TestLinkSqlserver_Response *a, const char *type)
{
	size_t soap_flag_TestLinkSqlserverResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__TestLinkSqlserver_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__TestLinkSqlserver_Response, sizeof(struct SER__TestLinkSqlserver_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__TestLinkSqlserver_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TestLinkSqlserverResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "TestLinkSqlserverResult", &a->TestLinkSqlserverResult, "xsd:string"))
				{	soap_flag_TestLinkSqlserverResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TestLinkSqlserverResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__TestLinkSqlserver_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__TestLinkSqlserver_Response, SOAP_TYPE_SER__TestLinkSqlserver_Response, sizeof(struct SER__TestLinkSqlserver_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__TestLinkSqlserver_Response * SOAP_FMAC2 soap_instantiate_SER__TestLinkSqlserver_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__TestLinkSqlserver_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__TestLinkSqlserver_Response *p;
	size_t k = sizeof(struct SER__TestLinkSqlserver_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__TestLinkSqlserver_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__TestLinkSqlserver_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__TestLinkSqlserver_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__TestLinkSqlserver_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__TestLinkSqlserver_Response(struct soap *soap, const struct SER__TestLinkSqlserver_Response *a, const char *tag, const char *type)
{
	if (soap_out_SER__TestLinkSqlserver_Response(soap, tag ? tag : "SER:TestLinkSqlserver-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__TestLinkSqlserver_Response * SOAP_FMAC4 soap_get_SER__TestLinkSqlserver_Response(struct soap *soap, struct SER__TestLinkSqlserver_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__TestLinkSqlserver_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__showExistLink_(struct soap *soap, struct SER__showExistLink_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__showExistLink_(struct soap *soap, const struct SER__showExistLink_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__showExistLink_(struct soap *soap, const char *tag, int id, const struct SER__showExistLink_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__showExistLink_), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__showExistLink_ * SOAP_FMAC4 soap_in_SER__showExistLink_(struct soap *soap, const char *tag, struct SER__showExistLink_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__showExistLink_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__showExistLink_, sizeof(struct SER__showExistLink_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SER__showExistLink_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SER__showExistLink_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__showExistLink_, SOAP_TYPE_SER__showExistLink_, sizeof(struct SER__showExistLink_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__showExistLink_ * SOAP_FMAC2 soap_instantiate_SER__showExistLink_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__showExistLink_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__showExistLink_ *p;
	size_t k = sizeof(struct SER__showExistLink_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__showExistLink_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__showExistLink_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__showExistLink_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__showExistLink_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__showExistLink_(struct soap *soap, const struct SER__showExistLink_ *a, const char *tag, const char *type)
{
	if (soap_out_SER__showExistLink_(soap, tag ? tag : "SER:showExistLink", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__showExistLink_ * SOAP_FMAC4 soap_get_SER__showExistLink_(struct soap *soap, struct SER__showExistLink_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__showExistLink_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__showExistLink_Response(struct soap *soap, struct SER__showExistLink_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->showExistLinkResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__showExistLink_Response(struct soap *soap, const struct SER__showExistLink_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->showExistLinkResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__showExistLink_Response(struct soap *soap, const char *tag, int id, const struct SER__showExistLink_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__showExistLink_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "showExistLinkResult", -1, &a->showExistLinkResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__showExistLink_Response * SOAP_FMAC4 soap_in_SER__showExistLink_Response(struct soap *soap, const char *tag, struct SER__showExistLink_Response *a, const char *type)
{
	size_t soap_flag_showExistLinkResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__showExistLink_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__showExistLink_Response, sizeof(struct SER__showExistLink_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__showExistLink_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_showExistLinkResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "showExistLinkResult", &a->showExistLinkResult, "xsd:string"))
				{	soap_flag_showExistLinkResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_showExistLinkResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__showExistLink_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__showExistLink_Response, SOAP_TYPE_SER__showExistLink_Response, sizeof(struct SER__showExistLink_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__showExistLink_Response * SOAP_FMAC2 soap_instantiate_SER__showExistLink_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__showExistLink_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__showExistLink_Response *p;
	size_t k = sizeof(struct SER__showExistLink_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__showExistLink_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__showExistLink_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__showExistLink_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__showExistLink_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__showExistLink_Response(struct soap *soap, const struct SER__showExistLink_Response *a, const char *tag, const char *type)
{
	if (soap_out_SER__showExistLink_Response(soap, tag ? tag : "SER:showExistLink-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__showExistLink_Response * SOAP_FMAC4 soap_get_SER__showExistLink_Response(struct soap *soap, struct SER__showExistLink_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__showExistLink_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__clearLink_(struct soap *soap, struct SER__clearLink_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->bTimeContrl);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__clearLink_(struct soap *soap, const struct SER__clearLink_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__clearLink_(struct soap *soap, const char *tag, int id, const struct SER__clearLink_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__clearLink_), type))
		return soap->error;
	if (soap_out_bool(soap, "bTimeContrl", -1, &a->bTimeContrl, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__clearLink_ * SOAP_FMAC4 soap_in_SER__clearLink_(struct soap *soap, const char *tag, struct SER__clearLink_ *a, const char *type)
{
	size_t soap_flag_bTimeContrl = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__clearLink_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__clearLink_, sizeof(struct SER__clearLink_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SER__clearLink_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_bTimeContrl && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "bTimeContrl", &a->bTimeContrl, "xsd:boolean"))
				{	soap_flag_bTimeContrl--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_bTimeContrl > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__clearLink_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__clearLink_, SOAP_TYPE_SER__clearLink_, sizeof(struct SER__clearLink_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__clearLink_ * SOAP_FMAC2 soap_instantiate_SER__clearLink_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__clearLink_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__clearLink_ *p;
	size_t k = sizeof(struct SER__clearLink_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__clearLink_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__clearLink_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__clearLink_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__clearLink_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__clearLink_(struct soap *soap, const struct SER__clearLink_ *a, const char *tag, const char *type)
{
	if (soap_out_SER__clearLink_(soap, tag ? tag : "SER:clearLink", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__clearLink_ * SOAP_FMAC4 soap_get_SER__clearLink_(struct soap *soap, struct SER__clearLink_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__clearLink_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__clearLink_Response(struct soap *soap, struct SER__clearLink_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->clearLinkResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__clearLink_Response(struct soap *soap, const struct SER__clearLink_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->clearLinkResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__clearLink_Response(struct soap *soap, const char *tag, int id, const struct SER__clearLink_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__clearLink_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "clearLinkResult", -1, &a->clearLinkResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__clearLink_Response * SOAP_FMAC4 soap_in_SER__clearLink_Response(struct soap *soap, const char *tag, struct SER__clearLink_Response *a, const char *type)
{
	size_t soap_flag_clearLinkResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__clearLink_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__clearLink_Response, sizeof(struct SER__clearLink_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__clearLink_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_clearLinkResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "clearLinkResult", &a->clearLinkResult, "xsd:string"))
				{	soap_flag_clearLinkResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_clearLinkResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__clearLink_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__clearLink_Response, SOAP_TYPE_SER__clearLink_Response, sizeof(struct SER__clearLink_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__clearLink_Response * SOAP_FMAC2 soap_instantiate_SER__clearLink_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__clearLink_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__clearLink_Response *p;
	size_t k = sizeof(struct SER__clearLink_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__clearLink_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__clearLink_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__clearLink_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__clearLink_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__clearLink_Response(struct soap *soap, const struct SER__clearLink_Response *a, const char *tag, const char *type)
{
	if (soap_out_SER__clearLink_Response(soap, tag ? tag : "SER:clearLink-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__clearLink_Response * SOAP_FMAC4 soap_get_SER__clearLink_Response(struct soap *soap, struct SER__clearLink_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__clearLink_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddNumbers_(struct soap *soap, struct SER__AddNumbers_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->NumberOne);
	soap_default_int(soap, &a->NumberTwo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddNumbers_(struct soap *soap, const struct SER__AddNumbers_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddNumbers_(struct soap *soap, const char *tag, int id, const struct SER__AddNumbers_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__AddNumbers_), type))
		return soap->error;
	if (soap_out_int(soap, "NumberOne", -1, &a->NumberOne, ""))
		return soap->error;
	if (soap_out_int(soap, "NumberTwo", -1, &a->NumberTwo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__AddNumbers_ * SOAP_FMAC4 soap_in_SER__AddNumbers_(struct soap *soap, const char *tag, struct SER__AddNumbers_ *a, const char *type)
{
	size_t soap_flag_NumberOne = 1;
	size_t soap_flag_NumberTwo = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__AddNumbers_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__AddNumbers_, sizeof(struct SER__AddNumbers_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SER__AddNumbers_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NumberOne && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "NumberOne", &a->NumberOne, "xsd:int"))
				{	soap_flag_NumberOne--;
					continue;
				}
			}
			if (soap_flag_NumberTwo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "NumberTwo", &a->NumberTwo, "xsd:int"))
				{	soap_flag_NumberTwo--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_NumberOne > 0 || soap_flag_NumberTwo > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__AddNumbers_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__AddNumbers_, SOAP_TYPE_SER__AddNumbers_, sizeof(struct SER__AddNumbers_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__AddNumbers_ * SOAP_FMAC2 soap_instantiate_SER__AddNumbers_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__AddNumbers_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__AddNumbers_ *p;
	size_t k = sizeof(struct SER__AddNumbers_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__AddNumbers_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__AddNumbers_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__AddNumbers_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__AddNumbers_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddNumbers_(struct soap *soap, const struct SER__AddNumbers_ *a, const char *tag, const char *type)
{
	if (soap_out_SER__AddNumbers_(soap, tag ? tag : "SER:AddNumbers", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__AddNumbers_ * SOAP_FMAC4 soap_get_SER__AddNumbers_(struct soap *soap, struct SER__AddNumbers_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__AddNumbers_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddNumbers_Response(struct soap *soap, struct SER__AddNumbers_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->AddNumbersResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddNumbers_Response(struct soap *soap, const struct SER__AddNumbers_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddNumbers_Response(struct soap *soap, const char *tag, int id, const struct SER__AddNumbers_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__AddNumbers_Response), type))
		return soap->error;
	if (soap_out_int(soap, "AddNumbersResult", -1, &a->AddNumbersResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__AddNumbers_Response * SOAP_FMAC4 soap_in_SER__AddNumbers_Response(struct soap *soap, const char *tag, struct SER__AddNumbers_Response *a, const char *type)
{
	size_t soap_flag_AddNumbersResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__AddNumbers_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__AddNumbers_Response, sizeof(struct SER__AddNumbers_Response), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SER__AddNumbers_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddNumbersResult && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "AddNumbersResult", &a->AddNumbersResult, "xsd:int"))
				{	soap_flag_AddNumbersResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AddNumbersResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__AddNumbers_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__AddNumbers_Response, SOAP_TYPE_SER__AddNumbers_Response, sizeof(struct SER__AddNumbers_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__AddNumbers_Response * SOAP_FMAC2 soap_instantiate_SER__AddNumbers_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__AddNumbers_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__AddNumbers_Response *p;
	size_t k = sizeof(struct SER__AddNumbers_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__AddNumbers_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__AddNumbers_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__AddNumbers_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__AddNumbers_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddNumbers_Response(struct soap *soap, const struct SER__AddNumbers_Response *a, const char *tag, const char *type)
{
	if (soap_out_SER__AddNumbers_Response(soap, tag ? tag : "SER:AddNumbers-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__AddNumbers_Response * SOAP_FMAC4 soap_get_SER__AddNumbers_Response(struct soap *soap, struct SER__AddNumbers_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__AddNumbers_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddFileToSql(struct soap *soap, struct SER__AddFileToSql *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->strFileName);
	soap_default_std__wstring(soap, &a->sPointer);
	soap_default_std__wstring(soap, &a->tablenamefieldname);
	soap_default_std__wstring(soap, &a->fileIP);
	soap_default_std__wstring(soap, &a->fileUse);
	soap_default_std__wstring(soap, &a->filePassword);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddFileToSql(struct soap *soap, const struct SER__AddFileToSql *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->strFileName);
	soap_serialize_std__wstring(soap, &a->sPointer);
	soap_serialize_std__wstring(soap, &a->tablenamefieldname);
	soap_serialize_std__wstring(soap, &a->fileIP);
	soap_serialize_std__wstring(soap, &a->fileUse);
	soap_serialize_std__wstring(soap, &a->filePassword);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddFileToSql(struct soap *soap, const char *tag, int id, const struct SER__AddFileToSql *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__AddFileToSql), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "strFileName", -1, &a->strFileName, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sPointer", -1, &a->sPointer, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "tablenamefieldname", -1, &a->tablenamefieldname, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "fileIP", -1, &a->fileIP, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "fileUse", -1, &a->fileUse, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "filePassword", -1, &a->filePassword, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__AddFileToSql * SOAP_FMAC4 soap_in_SER__AddFileToSql(struct soap *soap, const char *tag, struct SER__AddFileToSql *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_strFileName = 1;
	size_t soap_flag_sPointer = 1;
	size_t soap_flag_tablenamefieldname = 1;
	size_t soap_flag_fileIP = 1;
	size_t soap_flag_fileUse = 1;
	size_t soap_flag_filePassword = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__AddFileToSql*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__AddFileToSql, sizeof(struct SER__AddFileToSql), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__AddFileToSql(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_strFileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "strFileName", &a->strFileName, "xsd:string"))
				{	soap_flag_strFileName--;
					continue;
				}
			}
			if (soap_flag_sPointer && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sPointer", &a->sPointer, "xsd:string"))
				{	soap_flag_sPointer--;
					continue;
				}
			}
			if (soap_flag_tablenamefieldname && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "tablenamefieldname", &a->tablenamefieldname, "xsd:string"))
				{	soap_flag_tablenamefieldname--;
					continue;
				}
			}
			if (soap_flag_fileIP && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "fileIP", &a->fileIP, "xsd:string"))
				{	soap_flag_fileIP--;
					continue;
				}
			}
			if (soap_flag_fileUse && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "fileUse", &a->fileUse, "xsd:string"))
				{	soap_flag_fileUse--;
					continue;
				}
			}
			if (soap_flag_filePassword && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "filePassword", &a->filePassword, "xsd:string"))
				{	soap_flag_filePassword--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_strFileName > 0 || soap_flag_sPointer > 0 || soap_flag_tablenamefieldname > 0 || soap_flag_fileIP > 0 || soap_flag_fileUse > 0 || soap_flag_filePassword > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__AddFileToSql *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__AddFileToSql, SOAP_TYPE_SER__AddFileToSql, sizeof(struct SER__AddFileToSql), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__AddFileToSql * SOAP_FMAC2 soap_instantiate_SER__AddFileToSql(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__AddFileToSql(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__AddFileToSql *p;
	size_t k = sizeof(struct SER__AddFileToSql);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__AddFileToSql, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__AddFileToSql);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__AddFileToSql, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__AddFileToSql location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddFileToSql(struct soap *soap, const struct SER__AddFileToSql *a, const char *tag, const char *type)
{
	if (soap_out_SER__AddFileToSql(soap, tag ? tag : "SER:AddFileToSql", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__AddFileToSql * SOAP_FMAC4 soap_get_SER__AddFileToSql(struct soap *soap, struct SER__AddFileToSql *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__AddFileToSql(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddFileToSqlResponse(struct soap *soap, struct SER__AddFileToSqlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->AddFileToSqlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddFileToSqlResponse(struct soap *soap, const struct SER__AddFileToSqlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->AddFileToSqlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddFileToSqlResponse(struct soap *soap, const char *tag, int id, const struct SER__AddFileToSqlResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__AddFileToSqlResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "AddFileToSqlResult", -1, &a->AddFileToSqlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__AddFileToSqlResponse * SOAP_FMAC4 soap_in_SER__AddFileToSqlResponse(struct soap *soap, const char *tag, struct SER__AddFileToSqlResponse *a, const char *type)
{
	size_t soap_flag_AddFileToSqlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__AddFileToSqlResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__AddFileToSqlResponse, sizeof(struct SER__AddFileToSqlResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__AddFileToSqlResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddFileToSqlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "AddFileToSqlResult", &a->AddFileToSqlResult, "xsd:string"))
				{	soap_flag_AddFileToSqlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AddFileToSqlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__AddFileToSqlResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__AddFileToSqlResponse, SOAP_TYPE_SER__AddFileToSqlResponse, sizeof(struct SER__AddFileToSqlResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__AddFileToSqlResponse * SOAP_FMAC2 soap_instantiate_SER__AddFileToSqlResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__AddFileToSqlResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__AddFileToSqlResponse *p;
	size_t k = sizeof(struct SER__AddFileToSqlResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__AddFileToSqlResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__AddFileToSqlResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__AddFileToSqlResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__AddFileToSqlResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddFileToSqlResponse(struct soap *soap, const struct SER__AddFileToSqlResponse *a, const char *tag, const char *type)
{
	if (soap_out_SER__AddFileToSqlResponse(soap, tag ? tag : "SER:AddFileToSqlResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__AddFileToSqlResponse * SOAP_FMAC4 soap_get_SER__AddFileToSqlResponse(struct soap *soap, struct SER__AddFileToSqlResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__AddFileToSqlResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeStorageProcess(struct soap *soap, struct SER__executeStorageProcess *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->StorageProcessName);
	soap_default_std__wstring(soap, &a->Parameters);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeStorageProcess(struct soap *soap, const struct SER__executeStorageProcess *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->StorageProcessName);
	soap_serialize_std__wstring(soap, &a->Parameters);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeStorageProcess(struct soap *soap, const char *tag, int id, const struct SER__executeStorageProcess *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeStorageProcess), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "StorageProcessName", -1, &a->StorageProcessName, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "Parameters", -1, &a->Parameters, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeStorageProcess * SOAP_FMAC4 soap_in_SER__executeStorageProcess(struct soap *soap, const char *tag, struct SER__executeStorageProcess *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_StorageProcessName = 1;
	size_t soap_flag_Parameters = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeStorageProcess*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeStorageProcess, sizeof(struct SER__executeStorageProcess), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeStorageProcess(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_StorageProcessName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "StorageProcessName", &a->StorageProcessName, "xsd:string"))
				{	soap_flag_StorageProcessName--;
					continue;
				}
			}
			if (soap_flag_Parameters && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "Parameters", &a->Parameters, "xsd:string"))
				{	soap_flag_Parameters--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_StorageProcessName > 0 || soap_flag_Parameters > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeStorageProcess *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeStorageProcess, SOAP_TYPE_SER__executeStorageProcess, sizeof(struct SER__executeStorageProcess), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeStorageProcess * SOAP_FMAC2 soap_instantiate_SER__executeStorageProcess(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeStorageProcess(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeStorageProcess *p;
	size_t k = sizeof(struct SER__executeStorageProcess);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeStorageProcess, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeStorageProcess);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeStorageProcess, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeStorageProcess location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeStorageProcess(struct soap *soap, const struct SER__executeStorageProcess *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeStorageProcess(soap, tag ? tag : "SER:executeStorageProcess", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeStorageProcess * SOAP_FMAC4 soap_get_SER__executeStorageProcess(struct soap *soap, struct SER__executeStorageProcess *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeStorageProcess(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeStorageProcessResponse(struct soap *soap, struct SER__executeStorageProcessResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeStorageProcessResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeStorageProcessResponse(struct soap *soap, const struct SER__executeStorageProcessResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeStorageProcessResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeStorageProcessResponse(struct soap *soap, const char *tag, int id, const struct SER__executeStorageProcessResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeStorageProcessResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeStorageProcessResult", -1, &a->executeStorageProcessResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeStorageProcessResponse * SOAP_FMAC4 soap_in_SER__executeStorageProcessResponse(struct soap *soap, const char *tag, struct SER__executeStorageProcessResponse *a, const char *type)
{
	size_t soap_flag_executeStorageProcessResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeStorageProcessResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeStorageProcessResponse, sizeof(struct SER__executeStorageProcessResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeStorageProcessResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeStorageProcessResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeStorageProcessResult", &a->executeStorageProcessResult, "xsd:string"))
				{	soap_flag_executeStorageProcessResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeStorageProcessResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeStorageProcessResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeStorageProcessResponse, SOAP_TYPE_SER__executeStorageProcessResponse, sizeof(struct SER__executeStorageProcessResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeStorageProcessResponse * SOAP_FMAC2 soap_instantiate_SER__executeStorageProcessResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeStorageProcessResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeStorageProcessResponse *p;
	size_t k = sizeof(struct SER__executeStorageProcessResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeStorageProcessResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeStorageProcessResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeStorageProcessResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeStorageProcessResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeStorageProcessResponse(struct soap *soap, const struct SER__executeStorageProcessResponse *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeStorageProcessResponse(soap, tag ? tag : "SER:executeStorageProcessResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeStorageProcessResponse * SOAP_FMAC4 soap_get_SER__executeStorageProcessResponse(struct soap *soap, struct SER__executeStorageProcessResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeStorageProcessResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__insertXml(struct soap *soap, struct SER__insertXml *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->strXml);
	soap_default_bool(soap, &a->encode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__insertXml(struct soap *soap, const struct SER__insertXml *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->strXml);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__insertXml(struct soap *soap, const char *tag, int id, const struct SER__insertXml *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__insertXml), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "strXml", -1, &a->strXml, ""))
		return soap->error;
	if (soap_out_bool(soap, "encode", -1, &a->encode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__insertXml * SOAP_FMAC4 soap_in_SER__insertXml(struct soap *soap, const char *tag, struct SER__insertXml *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_strXml = 1;
	size_t soap_flag_encode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__insertXml*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__insertXml, sizeof(struct SER__insertXml), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__insertXml(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_strXml && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "strXml", &a->strXml, "xsd:string"))
				{	soap_flag_strXml--;
					continue;
				}
			}
			if (soap_flag_encode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "encode", &a->encode, "xsd:boolean"))
				{	soap_flag_encode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_strXml > 0 || soap_flag_encode > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__insertXml *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__insertXml, SOAP_TYPE_SER__insertXml, sizeof(struct SER__insertXml), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__insertXml * SOAP_FMAC2 soap_instantiate_SER__insertXml(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__insertXml(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__insertXml *p;
	size_t k = sizeof(struct SER__insertXml);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__insertXml, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__insertXml);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__insertXml, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__insertXml location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__insertXml(struct soap *soap, const struct SER__insertXml *a, const char *tag, const char *type)
{
	if (soap_out_SER__insertXml(soap, tag ? tag : "SER:insertXml", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__insertXml * SOAP_FMAC4 soap_get_SER__insertXml(struct soap *soap, struct SER__insertXml *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__insertXml(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__insertXmlResponse(struct soap *soap, struct SER__insertXmlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->insertXmlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__insertXmlResponse(struct soap *soap, const struct SER__insertXmlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->insertXmlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__insertXmlResponse(struct soap *soap, const char *tag, int id, const struct SER__insertXmlResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__insertXmlResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "insertXmlResult", -1, &a->insertXmlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__insertXmlResponse * SOAP_FMAC4 soap_in_SER__insertXmlResponse(struct soap *soap, const char *tag, struct SER__insertXmlResponse *a, const char *type)
{
	size_t soap_flag_insertXmlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__insertXmlResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__insertXmlResponse, sizeof(struct SER__insertXmlResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__insertXmlResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_insertXmlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "insertXmlResult", &a->insertXmlResult, "xsd:string"))
				{	soap_flag_insertXmlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_insertXmlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__insertXmlResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__insertXmlResponse, SOAP_TYPE_SER__insertXmlResponse, sizeof(struct SER__insertXmlResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__insertXmlResponse * SOAP_FMAC2 soap_instantiate_SER__insertXmlResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__insertXmlResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__insertXmlResponse *p;
	size_t k = sizeof(struct SER__insertXmlResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__insertXmlResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__insertXmlResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__insertXmlResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__insertXmlResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__insertXmlResponse(struct soap *soap, const struct SER__insertXmlResponse *a, const char *tag, const char *type)
{
	if (soap_out_SER__insertXmlResponse(soap, tag ? tag : "SER:insertXmlResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__insertXmlResponse * SOAP_FMAC4 soap_get_SER__insertXmlResponse(struct soap *soap, struct SER__insertXmlResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__insertXmlResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREencode(struct soap *soap, struct SER__executeSql_USCOREencode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREencode(struct soap *soap, const struct SER__executeSql_USCOREencode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREencode(struct soap *soap, const char *tag, int id, const struct SER__executeSql_USCOREencode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSql_USCOREencode), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSql_USCOREencode * SOAP_FMAC4 soap_in_SER__executeSql_USCOREencode(struct soap *soap, const char *tag, struct SER__executeSql_USCOREencode *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSql_USCOREencode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSql_USCOREencode, sizeof(struct SER__executeSql_USCOREencode), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSql_USCOREencode(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSql_USCOREencode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSql_USCOREencode, SOAP_TYPE_SER__executeSql_USCOREencode, sizeof(struct SER__executeSql_USCOREencode), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSql_USCOREencode * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREencode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSql_USCOREencode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSql_USCOREencode *p;
	size_t k = sizeof(struct SER__executeSql_USCOREencode);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSql_USCOREencode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSql_USCOREencode);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSql_USCOREencode, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSql_USCOREencode location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREencode(struct soap *soap, const struct SER__executeSql_USCOREencode *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSql_USCOREencode(soap, tag ? tag : "SER:executeSql_encode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSql_USCOREencode * SOAP_FMAC4 soap_get_SER__executeSql_USCOREencode(struct soap *soap, struct SER__executeSql_USCOREencode *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSql_USCOREencode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREencodeResponse(struct soap *soap, struct SER__executeSql_USCOREencodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSql_USCOREencodeResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREencodeResponse(struct soap *soap, const struct SER__executeSql_USCOREencodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSql_USCOREencodeResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREencodeResponse(struct soap *soap, const char *tag, int id, const struct SER__executeSql_USCOREencodeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSql_USCOREencodeResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSql_encodeResult", -1, &a->executeSql_USCOREencodeResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSql_USCOREencodeResponse * SOAP_FMAC4 soap_in_SER__executeSql_USCOREencodeResponse(struct soap *soap, const char *tag, struct SER__executeSql_USCOREencodeResponse *a, const char *type)
{
	size_t soap_flag_executeSql_USCOREencodeResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSql_USCOREencodeResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSql_USCOREencodeResponse, sizeof(struct SER__executeSql_USCOREencodeResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSql_USCOREencodeResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSql_USCOREencodeResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSql_encodeResult", &a->executeSql_USCOREencodeResult, "xsd:string"))
				{	soap_flag_executeSql_USCOREencodeResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSql_USCOREencodeResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSql_USCOREencodeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSql_USCOREencodeResponse, SOAP_TYPE_SER__executeSql_USCOREencodeResponse, sizeof(struct SER__executeSql_USCOREencodeResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSql_USCOREencodeResponse * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREencodeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSql_USCOREencodeResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSql_USCOREencodeResponse *p;
	size_t k = sizeof(struct SER__executeSql_USCOREencodeResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSql_USCOREencodeResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSql_USCOREencodeResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSql_USCOREencodeResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSql_USCOREencodeResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREencodeResponse(struct soap *soap, const struct SER__executeSql_USCOREencodeResponse *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSql_USCOREencodeResponse(soap, tag ? tag : "SER:executeSql_encodeResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSql_USCOREencodeResponse * SOAP_FMAC4 soap_get_SER__executeSql_USCOREencodeResponse(struct soap *soap, struct SER__executeSql_USCOREencodeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSql_USCOREencodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREbackEncord(struct soap *soap, struct SER__executeSql_USCOREbackEncord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREbackEncord(struct soap *soap, const struct SER__executeSql_USCOREbackEncord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREbackEncord(struct soap *soap, const char *tag, int id, const struct SER__executeSql_USCOREbackEncord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSql_USCOREbackEncord), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord * SOAP_FMAC4 soap_in_SER__executeSql_USCOREbackEncord(struct soap *soap, const char *tag, struct SER__executeSql_USCOREbackEncord *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSql_USCOREbackEncord*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSql_USCOREbackEncord, sizeof(struct SER__executeSql_USCOREbackEncord), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSql_USCOREbackEncord(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSql_USCOREbackEncord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSql_USCOREbackEncord, SOAP_TYPE_SER__executeSql_USCOREbackEncord, sizeof(struct SER__executeSql_USCOREbackEncord), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSql_USCOREbackEncord * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREbackEncord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSql_USCOREbackEncord(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSql_USCOREbackEncord *p;
	size_t k = sizeof(struct SER__executeSql_USCOREbackEncord);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSql_USCOREbackEncord, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSql_USCOREbackEncord);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSql_USCOREbackEncord, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSql_USCOREbackEncord location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREbackEncord(struct soap *soap, const struct SER__executeSql_USCOREbackEncord *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSql_USCOREbackEncord(soap, tag ? tag : "SER:executeSql_backEncord", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord * SOAP_FMAC4 soap_get_SER__executeSql_USCOREbackEncord(struct soap *soap, struct SER__executeSql_USCOREbackEncord *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSql_USCOREbackEncord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, struct SER__executeSql_USCOREbackEncordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSql_USCOREbackEncordResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, const struct SER__executeSql_USCOREbackEncordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSql_USCOREbackEncordResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *tag, int id, const struct SER__executeSql_USCOREbackEncordResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSql_backEncordResult", -1, &a->executeSql_USCOREbackEncordResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSql_USCOREbackEncordResponse * SOAP_FMAC4 soap_in_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *tag, struct SER__executeSql_USCOREbackEncordResponse *a, const char *type)
{
	size_t soap_flag_executeSql_USCOREbackEncordResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSql_USCOREbackEncordResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse, sizeof(struct SER__executeSql_USCOREbackEncordResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSql_USCOREbackEncordResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSql_USCOREbackEncordResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSql_backEncordResult", &a->executeSql_USCOREbackEncordResult, "xsd:string"))
				{	soap_flag_executeSql_USCOREbackEncordResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSql_USCOREbackEncordResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSql_USCOREbackEncordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse, SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse, sizeof(struct SER__executeSql_USCOREbackEncordResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSql_USCOREbackEncordResponse * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSql_USCOREbackEncordResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSql_USCOREbackEncordResponse *p;
	size_t k = sizeof(struct SER__executeSql_USCOREbackEncordResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSql_USCOREbackEncordResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSql_USCOREbackEncordResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSql_USCOREbackEncordResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, const struct SER__executeSql_USCOREbackEncordResponse *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSql_USCOREbackEncordResponse(soap, tag ? tag : "SER:executeSql_backEncordResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSql_USCOREbackEncordResponse * SOAP_FMAC4 soap_get_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, struct SER__executeSql_USCOREbackEncordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSql_USCOREbackEncordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql(struct soap *soap, struct SER__executeSql *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql(struct soap *soap, const struct SER__executeSql *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql(struct soap *soap, const char *tag, int id, const struct SER__executeSql *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSql), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSql * SOAP_FMAC4 soap_in_SER__executeSql(struct soap *soap, const char *tag, struct SER__executeSql *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSql*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSql, sizeof(struct SER__executeSql), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSql(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSql *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSql, SOAP_TYPE_SER__executeSql, sizeof(struct SER__executeSql), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSql * SOAP_FMAC2 soap_instantiate_SER__executeSql(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSql(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSql *p;
	size_t k = sizeof(struct SER__executeSql);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSql, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSql);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSql, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSql location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql(struct soap *soap, const struct SER__executeSql *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSql(soap, tag ? tag : "SER:executeSql", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSql * SOAP_FMAC4 soap_get_SER__executeSql(struct soap *soap, struct SER__executeSql *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSql(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSqlResponse(struct soap *soap, struct SER__executeSqlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSqlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSqlResponse(struct soap *soap, const struct SER__executeSqlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSqlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSqlResponse(struct soap *soap, const char *tag, int id, const struct SER__executeSqlResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__executeSqlResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSqlResult", -1, &a->executeSqlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__executeSqlResponse * SOAP_FMAC4 soap_in_SER__executeSqlResponse(struct soap *soap, const char *tag, struct SER__executeSqlResponse *a, const char *type)
{
	size_t soap_flag_executeSqlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__executeSqlResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__executeSqlResponse, sizeof(struct SER__executeSqlResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__executeSqlResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSqlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSqlResult", &a->executeSqlResult, "xsd:string"))
				{	soap_flag_executeSqlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSqlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__executeSqlResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__executeSqlResponse, SOAP_TYPE_SER__executeSqlResponse, sizeof(struct SER__executeSqlResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__executeSqlResponse * SOAP_FMAC2 soap_instantiate_SER__executeSqlResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__executeSqlResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__executeSqlResponse *p;
	size_t k = sizeof(struct SER__executeSqlResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__executeSqlResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__executeSqlResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__executeSqlResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__executeSqlResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSqlResponse(struct soap *soap, const struct SER__executeSqlResponse *a, const char *tag, const char *type)
{
	if (soap_out_SER__executeSqlResponse(soap, tag ? tag : "SER:executeSqlResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__executeSqlResponse * SOAP_FMAC4 soap_get_SER__executeSqlResponse(struct soap *soap, struct SER__executeSqlResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__executeSqlResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__TestLinkSqlserver(struct soap *soap, struct SER__TestLinkSqlserver *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__TestLinkSqlserver(struct soap *soap, const struct SER__TestLinkSqlserver *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__TestLinkSqlserver(struct soap *soap, const char *tag, int id, const struct SER__TestLinkSqlserver *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__TestLinkSqlserver), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__TestLinkSqlserver * SOAP_FMAC4 soap_in_SER__TestLinkSqlserver(struct soap *soap, const char *tag, struct SER__TestLinkSqlserver *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__TestLinkSqlserver*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__TestLinkSqlserver, sizeof(struct SER__TestLinkSqlserver), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__TestLinkSqlserver(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__TestLinkSqlserver *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__TestLinkSqlserver, SOAP_TYPE_SER__TestLinkSqlserver, sizeof(struct SER__TestLinkSqlserver), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__TestLinkSqlserver * SOAP_FMAC2 soap_instantiate_SER__TestLinkSqlserver(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__TestLinkSqlserver(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__TestLinkSqlserver *p;
	size_t k = sizeof(struct SER__TestLinkSqlserver);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__TestLinkSqlserver, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__TestLinkSqlserver);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__TestLinkSqlserver, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__TestLinkSqlserver location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__TestLinkSqlserver(struct soap *soap, const struct SER__TestLinkSqlserver *a, const char *tag, const char *type)
{
	if (soap_out_SER__TestLinkSqlserver(soap, tag ? tag : "SER:TestLinkSqlserver", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__TestLinkSqlserver * SOAP_FMAC4 soap_get_SER__TestLinkSqlserver(struct soap *soap, struct SER__TestLinkSqlserver *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__TestLinkSqlserver(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__TestLinkSqlserverResponse(struct soap *soap, struct SER__TestLinkSqlserverResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->TestLinkSqlserverResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__TestLinkSqlserverResponse(struct soap *soap, const struct SER__TestLinkSqlserverResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->TestLinkSqlserverResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__TestLinkSqlserverResponse(struct soap *soap, const char *tag, int id, const struct SER__TestLinkSqlserverResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__TestLinkSqlserverResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "TestLinkSqlserverResult", -1, &a->TestLinkSqlserverResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__TestLinkSqlserverResponse * SOAP_FMAC4 soap_in_SER__TestLinkSqlserverResponse(struct soap *soap, const char *tag, struct SER__TestLinkSqlserverResponse *a, const char *type)
{
	size_t soap_flag_TestLinkSqlserverResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__TestLinkSqlserverResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__TestLinkSqlserverResponse, sizeof(struct SER__TestLinkSqlserverResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__TestLinkSqlserverResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TestLinkSqlserverResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "TestLinkSqlserverResult", &a->TestLinkSqlserverResult, "xsd:string"))
				{	soap_flag_TestLinkSqlserverResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TestLinkSqlserverResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__TestLinkSqlserverResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__TestLinkSqlserverResponse, SOAP_TYPE_SER__TestLinkSqlserverResponse, sizeof(struct SER__TestLinkSqlserverResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__TestLinkSqlserverResponse * SOAP_FMAC2 soap_instantiate_SER__TestLinkSqlserverResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__TestLinkSqlserverResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__TestLinkSqlserverResponse *p;
	size_t k = sizeof(struct SER__TestLinkSqlserverResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__TestLinkSqlserverResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__TestLinkSqlserverResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__TestLinkSqlserverResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__TestLinkSqlserverResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__TestLinkSqlserverResponse(struct soap *soap, const struct SER__TestLinkSqlserverResponse *a, const char *tag, const char *type)
{
	if (soap_out_SER__TestLinkSqlserverResponse(soap, tag ? tag : "SER:TestLinkSqlserverResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__TestLinkSqlserverResponse * SOAP_FMAC4 soap_get_SER__TestLinkSqlserverResponse(struct soap *soap, struct SER__TestLinkSqlserverResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__TestLinkSqlserverResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__showExistLink(struct soap *soap, struct SER__showExistLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__showExistLink(struct soap *soap, const struct SER__showExistLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__showExistLink(struct soap *soap, const char *tag, int id, const struct SER__showExistLink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__showExistLink), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__showExistLink * SOAP_FMAC4 soap_in_SER__showExistLink(struct soap *soap, const char *tag, struct SER__showExistLink *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__showExistLink*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__showExistLink, sizeof(struct SER__showExistLink), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SER__showExistLink(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SER__showExistLink *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__showExistLink, SOAP_TYPE_SER__showExistLink, sizeof(struct SER__showExistLink), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__showExistLink * SOAP_FMAC2 soap_instantiate_SER__showExistLink(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__showExistLink(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__showExistLink *p;
	size_t k = sizeof(struct SER__showExistLink);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__showExistLink, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__showExistLink);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__showExistLink, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__showExistLink location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__showExistLink(struct soap *soap, const struct SER__showExistLink *a, const char *tag, const char *type)
{
	if (soap_out_SER__showExistLink(soap, tag ? tag : "SER:showExistLink", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__showExistLink * SOAP_FMAC4 soap_get_SER__showExistLink(struct soap *soap, struct SER__showExistLink *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__showExistLink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__showExistLinkResponse(struct soap *soap, struct SER__showExistLinkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->showExistLinkResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__showExistLinkResponse(struct soap *soap, const struct SER__showExistLinkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->showExistLinkResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__showExistLinkResponse(struct soap *soap, const char *tag, int id, const struct SER__showExistLinkResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__showExistLinkResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "showExistLinkResult", -1, &a->showExistLinkResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__showExistLinkResponse * SOAP_FMAC4 soap_in_SER__showExistLinkResponse(struct soap *soap, const char *tag, struct SER__showExistLinkResponse *a, const char *type)
{
	size_t soap_flag_showExistLinkResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__showExistLinkResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__showExistLinkResponse, sizeof(struct SER__showExistLinkResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__showExistLinkResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_showExistLinkResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "showExistLinkResult", &a->showExistLinkResult, "xsd:string"))
				{	soap_flag_showExistLinkResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_showExistLinkResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__showExistLinkResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__showExistLinkResponse, SOAP_TYPE_SER__showExistLinkResponse, sizeof(struct SER__showExistLinkResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__showExistLinkResponse * SOAP_FMAC2 soap_instantiate_SER__showExistLinkResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__showExistLinkResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__showExistLinkResponse *p;
	size_t k = sizeof(struct SER__showExistLinkResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__showExistLinkResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__showExistLinkResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__showExistLinkResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__showExistLinkResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__showExistLinkResponse(struct soap *soap, const struct SER__showExistLinkResponse *a, const char *tag, const char *type)
{
	if (soap_out_SER__showExistLinkResponse(soap, tag ? tag : "SER:showExistLinkResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__showExistLinkResponse * SOAP_FMAC4 soap_get_SER__showExistLinkResponse(struct soap *soap, struct SER__showExistLinkResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__showExistLinkResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__clearLink(struct soap *soap, struct SER__clearLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->bTimeContrl);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__clearLink(struct soap *soap, const struct SER__clearLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__clearLink(struct soap *soap, const char *tag, int id, const struct SER__clearLink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__clearLink), type))
		return soap->error;
	if (soap_out_bool(soap, "bTimeContrl", -1, &a->bTimeContrl, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__clearLink * SOAP_FMAC4 soap_in_SER__clearLink(struct soap *soap, const char *tag, struct SER__clearLink *a, const char *type)
{
	size_t soap_flag_bTimeContrl = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__clearLink*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__clearLink, sizeof(struct SER__clearLink), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SER__clearLink(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_bTimeContrl && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "bTimeContrl", &a->bTimeContrl, "xsd:boolean"))
				{	soap_flag_bTimeContrl--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_bTimeContrl > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__clearLink *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__clearLink, SOAP_TYPE_SER__clearLink, sizeof(struct SER__clearLink), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__clearLink * SOAP_FMAC2 soap_instantiate_SER__clearLink(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__clearLink(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__clearLink *p;
	size_t k = sizeof(struct SER__clearLink);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__clearLink, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__clearLink);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__clearLink, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__clearLink location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__clearLink(struct soap *soap, const struct SER__clearLink *a, const char *tag, const char *type)
{
	if (soap_out_SER__clearLink(soap, tag ? tag : "SER:clearLink", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__clearLink * SOAP_FMAC4 soap_get_SER__clearLink(struct soap *soap, struct SER__clearLink *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__clearLink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__clearLinkResponse(struct soap *soap, struct SER__clearLinkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->clearLinkResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__clearLinkResponse(struct soap *soap, const struct SER__clearLinkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->clearLinkResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__clearLinkResponse(struct soap *soap, const char *tag, int id, const struct SER__clearLinkResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__clearLinkResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "clearLinkResult", -1, &a->clearLinkResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__clearLinkResponse * SOAP_FMAC4 soap_in_SER__clearLinkResponse(struct soap *soap, const char *tag, struct SER__clearLinkResponse *a, const char *type)
{
	size_t soap_flag_clearLinkResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__clearLinkResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__clearLinkResponse, sizeof(struct SER__clearLinkResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_SER__clearLinkResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_clearLinkResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "clearLinkResult", &a->clearLinkResult, "xsd:string"))
				{	soap_flag_clearLinkResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_clearLinkResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__clearLinkResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__clearLinkResponse, SOAP_TYPE_SER__clearLinkResponse, sizeof(struct SER__clearLinkResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__clearLinkResponse * SOAP_FMAC2 soap_instantiate_SER__clearLinkResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__clearLinkResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__clearLinkResponse *p;
	size_t k = sizeof(struct SER__clearLinkResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__clearLinkResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__clearLinkResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__clearLinkResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__clearLinkResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__clearLinkResponse(struct soap *soap, const struct SER__clearLinkResponse *a, const char *tag, const char *type)
{
	if (soap_out_SER__clearLinkResponse(soap, tag ? tag : "SER:clearLinkResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__clearLinkResponse * SOAP_FMAC4 soap_get_SER__clearLinkResponse(struct soap *soap, struct SER__clearLinkResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__clearLinkResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddNumbers(struct soap *soap, struct SER__AddNumbers *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->NumberOne);
	soap_default_int(soap, &a->NumberTwo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddNumbers(struct soap *soap, const struct SER__AddNumbers *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddNumbers(struct soap *soap, const char *tag, int id, const struct SER__AddNumbers *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__AddNumbers), type))
		return soap->error;
	if (soap_out_int(soap, "NumberOne", -1, &a->NumberOne, ""))
		return soap->error;
	if (soap_out_int(soap, "NumberTwo", -1, &a->NumberTwo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__AddNumbers * SOAP_FMAC4 soap_in_SER__AddNumbers(struct soap *soap, const char *tag, struct SER__AddNumbers *a, const char *type)
{
	size_t soap_flag_NumberOne = 1;
	size_t soap_flag_NumberTwo = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__AddNumbers*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__AddNumbers, sizeof(struct SER__AddNumbers), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SER__AddNumbers(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NumberOne && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "NumberOne", &a->NumberOne, "xsd:int"))
				{	soap_flag_NumberOne--;
					continue;
				}
			}
			if (soap_flag_NumberTwo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "NumberTwo", &a->NumberTwo, "xsd:int"))
				{	soap_flag_NumberTwo--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_NumberOne > 0 || soap_flag_NumberTwo > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__AddNumbers *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__AddNumbers, SOAP_TYPE_SER__AddNumbers, sizeof(struct SER__AddNumbers), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__AddNumbers * SOAP_FMAC2 soap_instantiate_SER__AddNumbers(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__AddNumbers(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__AddNumbers *p;
	size_t k = sizeof(struct SER__AddNumbers);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__AddNumbers, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__AddNumbers);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__AddNumbers, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__AddNumbers location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddNumbers(struct soap *soap, const struct SER__AddNumbers *a, const char *tag, const char *type)
{
	if (soap_out_SER__AddNumbers(soap, tag ? tag : "SER:AddNumbers", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__AddNumbers * SOAP_FMAC4 soap_get_SER__AddNumbers(struct soap *soap, struct SER__AddNumbers *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__AddNumbers(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddNumbersResponse(struct soap *soap, struct SER__AddNumbersResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->AddNumbersResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddNumbersResponse(struct soap *soap, const struct SER__AddNumbersResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddNumbersResponse(struct soap *soap, const char *tag, int id, const struct SER__AddNumbersResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SER__AddNumbersResponse), type))
		return soap->error;
	if (soap_out_int(soap, "AddNumbersResult", -1, &a->AddNumbersResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SER__AddNumbersResponse * SOAP_FMAC4 soap_in_SER__AddNumbersResponse(struct soap *soap, const char *tag, struct SER__AddNumbersResponse *a, const char *type)
{
	size_t soap_flag_AddNumbersResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SER__AddNumbersResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SER__AddNumbersResponse, sizeof(struct SER__AddNumbersResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SER__AddNumbersResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddNumbersResult && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "AddNumbersResult", &a->AddNumbersResult, "xsd:int"))
				{	soap_flag_AddNumbersResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AddNumbersResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct SER__AddNumbersResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SER__AddNumbersResponse, SOAP_TYPE_SER__AddNumbersResponse, sizeof(struct SER__AddNumbersResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SER__AddNumbersResponse * SOAP_FMAC2 soap_instantiate_SER__AddNumbersResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SER__AddNumbersResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SER__AddNumbersResponse *p;
	size_t k = sizeof(struct SER__AddNumbersResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SER__AddNumbersResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SER__AddNumbersResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SER__AddNumbersResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SER__AddNumbersResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddNumbersResponse(struct soap *soap, const struct SER__AddNumbersResponse *a, const char *tag, const char *type)
{
	if (soap_out_SER__AddNumbersResponse(soap, tag ? tag : "SER:AddNumbersResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SER__AddNumbersResponse * SOAP_FMAC4 soap_get_SER__AddNumbersResponse(struct soap *soap, struct SER__AddNumbersResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_SER__AddNumbersResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MAC__GetServerInfo(struct soap *soap, struct __MAC__GetServerInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MAC__GetServerInfo_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MAC__GetServerInfo(struct soap *soap, const struct __MAC__GetServerInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToMAC__GetServerInfo(soap, &a->MAC__GetServerInfo_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MAC__GetServerInfo(struct soap *soap, const char *tag, int id, const struct __MAC__GetServerInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerToMAC__GetServerInfo(soap, "MAC:GetServerInfo", -1, &a->MAC__GetServerInfo_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MAC__GetServerInfo * SOAP_FMAC4 soap_in___MAC__GetServerInfo(struct soap *soap, const char *tag, struct __MAC__GetServerInfo *a, const char *type)
{
	size_t soap_flag_MAC__GetServerInfo_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __MAC__GetServerInfo*)soap_id_enter(soap, "", a, SOAP_TYPE___MAC__GetServerInfo, sizeof(struct __MAC__GetServerInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MAC__GetServerInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MAC__GetServerInfo_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToMAC__GetServerInfo(soap, "MAC:GetServerInfo", &a->MAC__GetServerInfo_, "MAC:GetServerInfo"))
				{	soap_flag_MAC__GetServerInfo_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __MAC__GetServerInfo * SOAP_FMAC2 soap_instantiate___MAC__GetServerInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MAC__GetServerInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __MAC__GetServerInfo *p;
	size_t k = sizeof(struct __MAC__GetServerInfo);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___MAC__GetServerInfo, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __MAC__GetServerInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __MAC__GetServerInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __MAC__GetServerInfo location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MAC__GetServerInfo(struct soap *soap, const struct __MAC__GetServerInfo *a, const char *tag, const char *type)
{
	if (soap_out___MAC__GetServerInfo(soap, tag ? tag : "-MAC:GetServerInfo", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MAC__GetServerInfo * SOAP_FMAC4 soap_get___MAC__GetServerInfo(struct soap *soap, struct __MAC__GetServerInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___MAC__GetServerInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MAC__GetLineServerList(struct soap *soap, struct __MAC__GetLineServerList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MAC__GetLineServerList_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MAC__GetLineServerList(struct soap *soap, const struct __MAC__GetLineServerList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToMAC__GetLineServerList(soap, &a->MAC__GetLineServerList_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MAC__GetLineServerList(struct soap *soap, const char *tag, int id, const struct __MAC__GetLineServerList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerToMAC__GetLineServerList(soap, "MAC:GetLineServerList", -1, &a->MAC__GetLineServerList_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MAC__GetLineServerList * SOAP_FMAC4 soap_in___MAC__GetLineServerList(struct soap *soap, const char *tag, struct __MAC__GetLineServerList *a, const char *type)
{
	size_t soap_flag_MAC__GetLineServerList_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __MAC__GetLineServerList*)soap_id_enter(soap, "", a, SOAP_TYPE___MAC__GetLineServerList, sizeof(struct __MAC__GetLineServerList), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MAC__GetLineServerList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MAC__GetLineServerList_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToMAC__GetLineServerList(soap, "MAC:GetLineServerList", &a->MAC__GetLineServerList_, "MAC:GetLineServerList"))
				{	soap_flag_MAC__GetLineServerList_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __MAC__GetLineServerList * SOAP_FMAC2 soap_instantiate___MAC__GetLineServerList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MAC__GetLineServerList(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __MAC__GetLineServerList *p;
	size_t k = sizeof(struct __MAC__GetLineServerList);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___MAC__GetLineServerList, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __MAC__GetLineServerList);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __MAC__GetLineServerList, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __MAC__GetLineServerList location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MAC__GetLineServerList(struct soap *soap, const struct __MAC__GetLineServerList *a, const char *tag, const char *type)
{
	if (soap_out___MAC__GetLineServerList(soap, tag ? tag : "-MAC:GetLineServerList", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MAC__GetLineServerList * SOAP_FMAC4 soap_get___MAC__GetLineServerList(struct soap *soap, struct __MAC__GetLineServerList *p, const char *tag, const char *type)
{
	if ((p = soap_in___MAC__GetLineServerList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MAC__addRobotRunState(struct soap *soap, struct __MAC__addRobotRunState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MAC__addRobotRunState_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MAC__addRobotRunState(struct soap *soap, const struct __MAC__addRobotRunState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToMAC__addRobotRunState(soap, &a->MAC__addRobotRunState_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MAC__addRobotRunState(struct soap *soap, const char *tag, int id, const struct __MAC__addRobotRunState *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerToMAC__addRobotRunState(soap, "MAC:addRobotRunState", -1, &a->MAC__addRobotRunState_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MAC__addRobotRunState * SOAP_FMAC4 soap_in___MAC__addRobotRunState(struct soap *soap, const char *tag, struct __MAC__addRobotRunState *a, const char *type)
{
	size_t soap_flag_MAC__addRobotRunState_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __MAC__addRobotRunState*)soap_id_enter(soap, "", a, SOAP_TYPE___MAC__addRobotRunState, sizeof(struct __MAC__addRobotRunState), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MAC__addRobotRunState(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MAC__addRobotRunState_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToMAC__addRobotRunState(soap, "MAC:addRobotRunState", &a->MAC__addRobotRunState_, "MAC:addRobotRunState"))
				{	soap_flag_MAC__addRobotRunState_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __MAC__addRobotRunState * SOAP_FMAC2 soap_instantiate___MAC__addRobotRunState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MAC__addRobotRunState(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __MAC__addRobotRunState *p;
	size_t k = sizeof(struct __MAC__addRobotRunState);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___MAC__addRobotRunState, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __MAC__addRobotRunState);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __MAC__addRobotRunState, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __MAC__addRobotRunState location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MAC__addRobotRunState(struct soap *soap, const struct __MAC__addRobotRunState *a, const char *tag, const char *type)
{
	if (soap_out___MAC__addRobotRunState(soap, tag ? tag : "-MAC:addRobotRunState", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MAC__addRobotRunState * SOAP_FMAC4 soap_get___MAC__addRobotRunState(struct soap *soap, struct __MAC__addRobotRunState *p, const char *tag, const char *type)
{
	if ((p = soap_in___MAC__addRobotRunState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MAC__GetLineServerInfo(struct soap *soap, struct __MAC__GetLineServerInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MAC__GetLineServerInfo_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MAC__GetLineServerInfo(struct soap *soap, const struct __MAC__GetLineServerInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToMAC__GetLineServerInfo(soap, &a->MAC__GetLineServerInfo_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MAC__GetLineServerInfo(struct soap *soap, const char *tag, int id, const struct __MAC__GetLineServerInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerToMAC__GetLineServerInfo(soap, "MAC:GetLineServerInfo", -1, &a->MAC__GetLineServerInfo_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MAC__GetLineServerInfo * SOAP_FMAC4 soap_in___MAC__GetLineServerInfo(struct soap *soap, const char *tag, struct __MAC__GetLineServerInfo *a, const char *type)
{
	size_t soap_flag_MAC__GetLineServerInfo_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __MAC__GetLineServerInfo*)soap_id_enter(soap, "", a, SOAP_TYPE___MAC__GetLineServerInfo, sizeof(struct __MAC__GetLineServerInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MAC__GetLineServerInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MAC__GetLineServerInfo_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToMAC__GetLineServerInfo(soap, "MAC:GetLineServerInfo", &a->MAC__GetLineServerInfo_, "MAC:GetLineServerInfo"))
				{	soap_flag_MAC__GetLineServerInfo_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __MAC__GetLineServerInfo * SOAP_FMAC2 soap_instantiate___MAC__GetLineServerInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MAC__GetLineServerInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __MAC__GetLineServerInfo *p;
	size_t k = sizeof(struct __MAC__GetLineServerInfo);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___MAC__GetLineServerInfo, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __MAC__GetLineServerInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __MAC__GetLineServerInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __MAC__GetLineServerInfo location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MAC__GetLineServerInfo(struct soap *soap, const struct __MAC__GetLineServerInfo *a, const char *tag, const char *type)
{
	if (soap_out___MAC__GetLineServerInfo(soap, tag ? tag : "-MAC:GetLineServerInfo", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MAC__GetLineServerInfo * SOAP_FMAC4 soap_get___MAC__GetLineServerInfo(struct soap *soap, struct __MAC__GetLineServerInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___MAC__GetLineServerInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MAC__fetchRobotConfig(struct soap *soap, struct __MAC__fetchRobotConfig *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MAC__fetchRobotConfig_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MAC__fetchRobotConfig(struct soap *soap, const struct __MAC__fetchRobotConfig *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToMAC__fetchRobotConfig(soap, &a->MAC__fetchRobotConfig_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MAC__fetchRobotConfig(struct soap *soap, const char *tag, int id, const struct __MAC__fetchRobotConfig *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerToMAC__fetchRobotConfig(soap, "MAC:fetchRobotConfig", -1, &a->MAC__fetchRobotConfig_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MAC__fetchRobotConfig * SOAP_FMAC4 soap_in___MAC__fetchRobotConfig(struct soap *soap, const char *tag, struct __MAC__fetchRobotConfig *a, const char *type)
{
	size_t soap_flag_MAC__fetchRobotConfig_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __MAC__fetchRobotConfig*)soap_id_enter(soap, "", a, SOAP_TYPE___MAC__fetchRobotConfig, sizeof(struct __MAC__fetchRobotConfig), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MAC__fetchRobotConfig(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MAC__fetchRobotConfig_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToMAC__fetchRobotConfig(soap, "MAC:fetchRobotConfig", &a->MAC__fetchRobotConfig_, "MAC:fetchRobotConfig"))
				{	soap_flag_MAC__fetchRobotConfig_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __MAC__fetchRobotConfig * SOAP_FMAC2 soap_instantiate___MAC__fetchRobotConfig(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MAC__fetchRobotConfig(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __MAC__fetchRobotConfig *p;
	size_t k = sizeof(struct __MAC__fetchRobotConfig);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___MAC__fetchRobotConfig, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __MAC__fetchRobotConfig);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __MAC__fetchRobotConfig, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __MAC__fetchRobotConfig location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MAC__fetchRobotConfig(struct soap *soap, const struct __MAC__fetchRobotConfig *a, const char *tag, const char *type)
{
	if (soap_out___MAC__fetchRobotConfig(soap, tag ? tag : "-MAC:fetchRobotConfig", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MAC__fetchRobotConfig * SOAP_FMAC4 soap_get___MAC__fetchRobotConfig(struct soap *soap, struct __MAC__fetchRobotConfig *p, const char *tag, const char *type)
{
	if ((p = soap_in___MAC__fetchRobotConfig(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToMAC__GetServerInfo(struct soap *soap, MAC__GetServerInfo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_MAC__GetServerInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToMAC__GetServerInfo(struct soap *soap, const char *tag, int id, MAC__GetServerInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_MAC__GetServerInfo, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_MAC__GetServerInfo ? type : NULL);
}

SOAP_FMAC3 MAC__GetServerInfo ** SOAP_FMAC4 soap_in_PointerToMAC__GetServerInfo(struct soap *soap, const char *tag, MAC__GetServerInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (MAC__GetServerInfo **)soap_malloc(soap, sizeof(MAC__GetServerInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (MAC__GetServerInfo *)soap_instantiate_MAC__GetServerInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (MAC__GetServerInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_MAC__GetServerInfo, sizeof(MAC__GetServerInfo), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToMAC__GetServerInfo(struct soap *soap, MAC__GetServerInfo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToMAC__GetServerInfo(soap, tag ? tag : "MAC:GetServerInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 MAC__GetServerInfo ** SOAP_FMAC4 soap_get_PointerToMAC__GetServerInfo(struct soap *soap, MAC__GetServerInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToMAC__GetServerInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToMAC__GetLineServerList(struct soap *soap, MAC__GetLineServerList *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_MAC__GetLineServerList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToMAC__GetLineServerList(struct soap *soap, const char *tag, int id, MAC__GetLineServerList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_MAC__GetLineServerList, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_MAC__GetLineServerList ? type : NULL);
}

SOAP_FMAC3 MAC__GetLineServerList ** SOAP_FMAC4 soap_in_PointerToMAC__GetLineServerList(struct soap *soap, const char *tag, MAC__GetLineServerList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (MAC__GetLineServerList **)soap_malloc(soap, sizeof(MAC__GetLineServerList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (MAC__GetLineServerList *)soap_instantiate_MAC__GetLineServerList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (MAC__GetLineServerList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_MAC__GetLineServerList, sizeof(MAC__GetLineServerList), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToMAC__GetLineServerList(struct soap *soap, MAC__GetLineServerList *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToMAC__GetLineServerList(soap, tag ? tag : "MAC:GetLineServerList", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 MAC__GetLineServerList ** SOAP_FMAC4 soap_get_PointerToMAC__GetLineServerList(struct soap *soap, MAC__GetLineServerList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToMAC__GetLineServerList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToMAC__addRobotRunState(struct soap *soap, MAC__addRobotRunState *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_MAC__addRobotRunState))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToMAC__addRobotRunState(struct soap *soap, const char *tag, int id, MAC__addRobotRunState *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_MAC__addRobotRunState, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_MAC__addRobotRunState ? type : NULL);
}

SOAP_FMAC3 MAC__addRobotRunState ** SOAP_FMAC4 soap_in_PointerToMAC__addRobotRunState(struct soap *soap, const char *tag, MAC__addRobotRunState **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (MAC__addRobotRunState **)soap_malloc(soap, sizeof(MAC__addRobotRunState *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (MAC__addRobotRunState *)soap_instantiate_MAC__addRobotRunState(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (MAC__addRobotRunState **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_MAC__addRobotRunState, sizeof(MAC__addRobotRunState), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToMAC__addRobotRunState(struct soap *soap, MAC__addRobotRunState *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToMAC__addRobotRunState(soap, tag ? tag : "MAC:addRobotRunState", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 MAC__addRobotRunState ** SOAP_FMAC4 soap_get_PointerToMAC__addRobotRunState(struct soap *soap, MAC__addRobotRunState **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToMAC__addRobotRunState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToMAC__GetLineServerInfo(struct soap *soap, MAC__GetLineServerInfo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_MAC__GetLineServerInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToMAC__GetLineServerInfo(struct soap *soap, const char *tag, int id, MAC__GetLineServerInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_MAC__GetLineServerInfo, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_MAC__GetLineServerInfo ? type : NULL);
}

SOAP_FMAC3 MAC__GetLineServerInfo ** SOAP_FMAC4 soap_in_PointerToMAC__GetLineServerInfo(struct soap *soap, const char *tag, MAC__GetLineServerInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (MAC__GetLineServerInfo **)soap_malloc(soap, sizeof(MAC__GetLineServerInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (MAC__GetLineServerInfo *)soap_instantiate_MAC__GetLineServerInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (MAC__GetLineServerInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_MAC__GetLineServerInfo, sizeof(MAC__GetLineServerInfo), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToMAC__GetLineServerInfo(struct soap *soap, MAC__GetLineServerInfo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToMAC__GetLineServerInfo(soap, tag ? tag : "MAC:GetLineServerInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 MAC__GetLineServerInfo ** SOAP_FMAC4 soap_get_PointerToMAC__GetLineServerInfo(struct soap *soap, MAC__GetLineServerInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToMAC__GetLineServerInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToMAC__fetchRobotConfig(struct soap *soap, MAC__fetchRobotConfig *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_MAC__fetchRobotConfig))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToMAC__fetchRobotConfig(struct soap *soap, const char *tag, int id, MAC__fetchRobotConfig *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_MAC__fetchRobotConfig, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_MAC__fetchRobotConfig ? type : NULL);
}

SOAP_FMAC3 MAC__fetchRobotConfig ** SOAP_FMAC4 soap_in_PointerToMAC__fetchRobotConfig(struct soap *soap, const char *tag, MAC__fetchRobotConfig **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (MAC__fetchRobotConfig **)soap_malloc(soap, sizeof(MAC__fetchRobotConfig *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (MAC__fetchRobotConfig *)soap_instantiate_MAC__fetchRobotConfig(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (MAC__fetchRobotConfig **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_MAC__fetchRobotConfig, sizeof(MAC__fetchRobotConfig), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToMAC__fetchRobotConfig(struct soap *soap, MAC__fetchRobotConfig *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToMAC__fetchRobotConfig(soap, tag ? tag : "MAC:fetchRobotConfig", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 MAC__fetchRobotConfig ** SOAP_FMAC4 soap_get_PointerToMAC__fetchRobotConfig(struct soap *soap, MAC__fetchRobotConfig **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToMAC__fetchRobotConfig(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap *soap, wchar_t *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_wstring);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap *soap, const char *tag, int id, wchar_t *const*a, const char *type)
{
	return soap_outwstring(soap, tag, id, a, type, SOAP_TYPE_wstring);
}

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap *soap, const char *tag, wchar_t **a, const char *type)
{
	a = soap_inwstring(soap, tag, a, type, SOAP_TYPE_wstring, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_new_wstring(struct soap *soap, int n)
{
	wchar_t * *a = static_cast<wchar_t * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(wchar_t *)));
	for (wchar_t * *p = a; p && n--; ++p)
		soap_default_wstring(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap *soap, wchar_t *const*a, const char *tag, const char *type)
{
	if (soap_out_wstring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap *soap, wchar_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
