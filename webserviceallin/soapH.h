/* soapH.h
   Generated by gSOAP 2.8.111 for .\web_service_allin.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__wstring_DEFINED
#define SOAP_TYPE_std__wstring_DEFINED

inline void soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);

#define soap_std__wstring2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2std__wstring(soap, s, a) soap_s2stdwchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);
SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL);
}

inline std::wstring * soap_new_req_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}

inline std::wstring * soap_new_set_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_std__wstring(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_std__wstring(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__wstring(struct soap *soap, const char *URL, std::wstring *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__wstring(struct soap *soap, std::wstring *p)
{
	if (::soap_read_std__wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_MAC__GetServerInfoResponse_DEFINED
#define SOAP_TYPE_MAC__GetServerInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetServerInfoResponse(struct soap*, const char*, int, const MAC__GetServerInfoResponse *, const char*);
SOAP_FMAC3 MAC__GetServerInfoResponse * SOAP_FMAC4 soap_in_MAC__GetServerInfoResponse(struct soap*, const char*, MAC__GetServerInfoResponse *, const char*);
SOAP_FMAC1 MAC__GetServerInfoResponse * SOAP_FMAC2 soap_instantiate_MAC__GetServerInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline MAC__GetServerInfoResponse * soap_new_MAC__GetServerInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_MAC__GetServerInfoResponse(soap, n, NULL, NULL, NULL);
}

inline MAC__GetServerInfoResponse * soap_new_req_MAC__GetServerInfoResponse(
	struct soap *soap)
{
	MAC__GetServerInfoResponse *_p = ::soap_new_MAC__GetServerInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline MAC__GetServerInfoResponse * soap_new_set_MAC__GetServerInfoResponse(
	struct soap *soap,
	wchar_t *return_)
{
	MAC__GetServerInfoResponse *_p = ::soap_new_MAC__GetServerInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__GetServerInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_MAC__GetServerInfoResponse(struct soap *soap, MAC__GetServerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetServerInfoResponse", p->soap_type() == SOAP_TYPE_MAC__GetServerInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_MAC__GetServerInfoResponse(struct soap *soap, const char *URL, MAC__GetServerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetServerInfoResponse", p->soap_type() == SOAP_TYPE_MAC__GetServerInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_MAC__GetServerInfoResponse(struct soap *soap, const char *URL, MAC__GetServerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetServerInfoResponse", p->soap_type() == SOAP_TYPE_MAC__GetServerInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_MAC__GetServerInfoResponse(struct soap *soap, const char *URL, MAC__GetServerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetServerInfoResponse", p->soap_type() == SOAP_TYPE_MAC__GetServerInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 MAC__GetServerInfoResponse * SOAP_FMAC4 soap_get_MAC__GetServerInfoResponse(struct soap*, MAC__GetServerInfoResponse *, const char*, const char*);

inline int soap_read_MAC__GetServerInfoResponse(struct soap *soap, MAC__GetServerInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_MAC__GetServerInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_MAC__GetServerInfoResponse(struct soap *soap, const char *URL, MAC__GetServerInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_MAC__GetServerInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_MAC__GetServerInfoResponse(struct soap *soap, MAC__GetServerInfoResponse *p)
{
	if (::soap_read_MAC__GetServerInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_MAC__GetServerInfo_DEFINED
#define SOAP_TYPE_MAC__GetServerInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetServerInfo(struct soap*, const char*, int, const MAC__GetServerInfo *, const char*);
SOAP_FMAC3 MAC__GetServerInfo * SOAP_FMAC4 soap_in_MAC__GetServerInfo(struct soap*, const char*, MAC__GetServerInfo *, const char*);
SOAP_FMAC1 MAC__GetServerInfo * SOAP_FMAC2 soap_instantiate_MAC__GetServerInfo(struct soap*, int, const char*, const char*, size_t*);

inline MAC__GetServerInfo * soap_new_MAC__GetServerInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_MAC__GetServerInfo(soap, n, NULL, NULL, NULL);
}

inline MAC__GetServerInfo * soap_new_req_MAC__GetServerInfo(
	struct soap *soap,
	int serverId,
	int postId,
	bool outUse,
	bool isSync)
{
	MAC__GetServerInfo *_p = ::soap_new_MAC__GetServerInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__GetServerInfo::serverId = serverId;
		_p->MAC__GetServerInfo::postId = postId;
		_p->MAC__GetServerInfo::outUse = outUse;
		_p->MAC__GetServerInfo::isSync = isSync;
	}
	return _p;
}

inline MAC__GetServerInfo * soap_new_set_MAC__GetServerInfo(
	struct soap *soap,
	int serverId,
	int postId,
	bool outUse,
	bool isSync)
{
	MAC__GetServerInfo *_p = ::soap_new_MAC__GetServerInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__GetServerInfo::serverId = serverId;
		_p->MAC__GetServerInfo::postId = postId;
		_p->MAC__GetServerInfo::outUse = outUse;
		_p->MAC__GetServerInfo::isSync = isSync;
	}
	return _p;
}

inline int soap_write_MAC__GetServerInfo(struct soap *soap, MAC__GetServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetServerInfo", p->soap_type() == SOAP_TYPE_MAC__GetServerInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_MAC__GetServerInfo(struct soap *soap, const char *URL, MAC__GetServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetServerInfo", p->soap_type() == SOAP_TYPE_MAC__GetServerInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_MAC__GetServerInfo(struct soap *soap, const char *URL, MAC__GetServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetServerInfo", p->soap_type() == SOAP_TYPE_MAC__GetServerInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_MAC__GetServerInfo(struct soap *soap, const char *URL, MAC__GetServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetServerInfo", p->soap_type() == SOAP_TYPE_MAC__GetServerInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 MAC__GetServerInfo * SOAP_FMAC4 soap_get_MAC__GetServerInfo(struct soap*, MAC__GetServerInfo *, const char*, const char*);

inline int soap_read_MAC__GetServerInfo(struct soap *soap, MAC__GetServerInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_MAC__GetServerInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_MAC__GetServerInfo(struct soap *soap, const char *URL, MAC__GetServerInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_MAC__GetServerInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_MAC__GetServerInfo(struct soap *soap, MAC__GetServerInfo *p)
{
	if (::soap_read_MAC__GetServerInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_MAC__GetLineServerListResponse_DEFINED
#define SOAP_TYPE_MAC__GetLineServerListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetLineServerListResponse(struct soap*, const char*, int, const MAC__GetLineServerListResponse *, const char*);
SOAP_FMAC3 MAC__GetLineServerListResponse * SOAP_FMAC4 soap_in_MAC__GetLineServerListResponse(struct soap*, const char*, MAC__GetLineServerListResponse *, const char*);
SOAP_FMAC1 MAC__GetLineServerListResponse * SOAP_FMAC2 soap_instantiate_MAC__GetLineServerListResponse(struct soap*, int, const char*, const char*, size_t*);

inline MAC__GetLineServerListResponse * soap_new_MAC__GetLineServerListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_MAC__GetLineServerListResponse(soap, n, NULL, NULL, NULL);
}

inline MAC__GetLineServerListResponse * soap_new_req_MAC__GetLineServerListResponse(
	struct soap *soap)
{
	MAC__GetLineServerListResponse *_p = ::soap_new_MAC__GetLineServerListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline MAC__GetLineServerListResponse * soap_new_set_MAC__GetLineServerListResponse(
	struct soap *soap,
	wchar_t *return_)
{
	MAC__GetLineServerListResponse *_p = ::soap_new_MAC__GetLineServerListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__GetLineServerListResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_MAC__GetLineServerListResponse(struct soap *soap, MAC__GetLineServerListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerListResponse", p->soap_type() == SOAP_TYPE_MAC__GetLineServerListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_MAC__GetLineServerListResponse(struct soap *soap, const char *URL, MAC__GetLineServerListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerListResponse", p->soap_type() == SOAP_TYPE_MAC__GetLineServerListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_MAC__GetLineServerListResponse(struct soap *soap, const char *URL, MAC__GetLineServerListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerListResponse", p->soap_type() == SOAP_TYPE_MAC__GetLineServerListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_MAC__GetLineServerListResponse(struct soap *soap, const char *URL, MAC__GetLineServerListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerListResponse", p->soap_type() == SOAP_TYPE_MAC__GetLineServerListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 MAC__GetLineServerListResponse * SOAP_FMAC4 soap_get_MAC__GetLineServerListResponse(struct soap*, MAC__GetLineServerListResponse *, const char*, const char*);

inline int soap_read_MAC__GetLineServerListResponse(struct soap *soap, MAC__GetLineServerListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_MAC__GetLineServerListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_MAC__GetLineServerListResponse(struct soap *soap, const char *URL, MAC__GetLineServerListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_MAC__GetLineServerListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_MAC__GetLineServerListResponse(struct soap *soap, MAC__GetLineServerListResponse *p)
{
	if (::soap_read_MAC__GetLineServerListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_MAC__GetLineServerList_DEFINED
#define SOAP_TYPE_MAC__GetLineServerList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetLineServerList(struct soap*, const char*, int, const MAC__GetLineServerList *, const char*);
SOAP_FMAC3 MAC__GetLineServerList * SOAP_FMAC4 soap_in_MAC__GetLineServerList(struct soap*, const char*, MAC__GetLineServerList *, const char*);
SOAP_FMAC1 MAC__GetLineServerList * SOAP_FMAC2 soap_instantiate_MAC__GetLineServerList(struct soap*, int, const char*, const char*, size_t*);

inline MAC__GetLineServerList * soap_new_MAC__GetLineServerList(struct soap *soap, int n = -1)
{
	return soap_instantiate_MAC__GetLineServerList(soap, n, NULL, NULL, NULL);
}

inline MAC__GetLineServerList * soap_new_req_MAC__GetLineServerList(
	struct soap *soap,
	bool outUse)
{
	MAC__GetLineServerList *_p = ::soap_new_MAC__GetLineServerList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__GetLineServerList::outUse = outUse;
	}
	return _p;
}

inline MAC__GetLineServerList * soap_new_set_MAC__GetLineServerList(
	struct soap *soap,
	bool outUse)
{
	MAC__GetLineServerList *_p = ::soap_new_MAC__GetLineServerList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__GetLineServerList::outUse = outUse;
	}
	return _p;
}

inline int soap_write_MAC__GetLineServerList(struct soap *soap, MAC__GetLineServerList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerList", p->soap_type() == SOAP_TYPE_MAC__GetLineServerList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_MAC__GetLineServerList(struct soap *soap, const char *URL, MAC__GetLineServerList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerList", p->soap_type() == SOAP_TYPE_MAC__GetLineServerList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_MAC__GetLineServerList(struct soap *soap, const char *URL, MAC__GetLineServerList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerList", p->soap_type() == SOAP_TYPE_MAC__GetLineServerList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_MAC__GetLineServerList(struct soap *soap, const char *URL, MAC__GetLineServerList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerList", p->soap_type() == SOAP_TYPE_MAC__GetLineServerList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 MAC__GetLineServerList * SOAP_FMAC4 soap_get_MAC__GetLineServerList(struct soap*, MAC__GetLineServerList *, const char*, const char*);

inline int soap_read_MAC__GetLineServerList(struct soap *soap, MAC__GetLineServerList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_MAC__GetLineServerList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_MAC__GetLineServerList(struct soap *soap, const char *URL, MAC__GetLineServerList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_MAC__GetLineServerList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_MAC__GetLineServerList(struct soap *soap, MAC__GetLineServerList *p)
{
	if (::soap_read_MAC__GetLineServerList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_MAC__addRobotRunStateResponse_DEFINED
#define SOAP_TYPE_MAC__addRobotRunStateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__addRobotRunStateResponse(struct soap*, const char*, int, const MAC__addRobotRunStateResponse *, const char*);
SOAP_FMAC3 MAC__addRobotRunStateResponse * SOAP_FMAC4 soap_in_MAC__addRobotRunStateResponse(struct soap*, const char*, MAC__addRobotRunStateResponse *, const char*);
SOAP_FMAC1 MAC__addRobotRunStateResponse * SOAP_FMAC2 soap_instantiate_MAC__addRobotRunStateResponse(struct soap*, int, const char*, const char*, size_t*);

inline MAC__addRobotRunStateResponse * soap_new_MAC__addRobotRunStateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_MAC__addRobotRunStateResponse(soap, n, NULL, NULL, NULL);
}

inline MAC__addRobotRunStateResponse * soap_new_req_MAC__addRobotRunStateResponse(
	struct soap *soap)
{
	MAC__addRobotRunStateResponse *_p = ::soap_new_MAC__addRobotRunStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline MAC__addRobotRunStateResponse * soap_new_set_MAC__addRobotRunStateResponse(
	struct soap *soap,
	wchar_t *return_)
{
	MAC__addRobotRunStateResponse *_p = ::soap_new_MAC__addRobotRunStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__addRobotRunStateResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_MAC__addRobotRunStateResponse(struct soap *soap, MAC__addRobotRunStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:addRobotRunStateResponse", p->soap_type() == SOAP_TYPE_MAC__addRobotRunStateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_MAC__addRobotRunStateResponse(struct soap *soap, const char *URL, MAC__addRobotRunStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:addRobotRunStateResponse", p->soap_type() == SOAP_TYPE_MAC__addRobotRunStateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_MAC__addRobotRunStateResponse(struct soap *soap, const char *URL, MAC__addRobotRunStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:addRobotRunStateResponse", p->soap_type() == SOAP_TYPE_MAC__addRobotRunStateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_MAC__addRobotRunStateResponse(struct soap *soap, const char *URL, MAC__addRobotRunStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:addRobotRunStateResponse", p->soap_type() == SOAP_TYPE_MAC__addRobotRunStateResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 MAC__addRobotRunStateResponse * SOAP_FMAC4 soap_get_MAC__addRobotRunStateResponse(struct soap*, MAC__addRobotRunStateResponse *, const char*, const char*);

inline int soap_read_MAC__addRobotRunStateResponse(struct soap *soap, MAC__addRobotRunStateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_MAC__addRobotRunStateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_MAC__addRobotRunStateResponse(struct soap *soap, const char *URL, MAC__addRobotRunStateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_MAC__addRobotRunStateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_MAC__addRobotRunStateResponse(struct soap *soap, MAC__addRobotRunStateResponse *p)
{
	if (::soap_read_MAC__addRobotRunStateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_MAC__addRobotRunState_DEFINED
#define SOAP_TYPE_MAC__addRobotRunState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__addRobotRunState(struct soap*, const char*, int, const MAC__addRobotRunState *, const char*);
SOAP_FMAC3 MAC__addRobotRunState * SOAP_FMAC4 soap_in_MAC__addRobotRunState(struct soap*, const char*, MAC__addRobotRunState *, const char*);
SOAP_FMAC1 MAC__addRobotRunState * SOAP_FMAC2 soap_instantiate_MAC__addRobotRunState(struct soap*, int, const char*, const char*, size_t*);

inline MAC__addRobotRunState * soap_new_MAC__addRobotRunState(struct soap *soap, int n = -1)
{
	return soap_instantiate_MAC__addRobotRunState(soap, n, NULL, NULL, NULL);
}

inline MAC__addRobotRunState * soap_new_req_MAC__addRobotRunState(
	struct soap *soap,
	int LineId,
	int PostId,
	int runningNum)
{
	MAC__addRobotRunState *_p = ::soap_new_MAC__addRobotRunState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__addRobotRunState::LineId = LineId;
		_p->MAC__addRobotRunState::PostId = PostId;
		_p->MAC__addRobotRunState::runningNum = runningNum;
	}
	return _p;
}

inline MAC__addRobotRunState * soap_new_set_MAC__addRobotRunState(
	struct soap *soap,
	wchar_t *token,
	wchar_t *managerIP,
	int LineId,
	int PostId,
	int runningNum)
{
	MAC__addRobotRunState *_p = ::soap_new_MAC__addRobotRunState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__addRobotRunState::token = token;
		_p->MAC__addRobotRunState::managerIP = managerIP;
		_p->MAC__addRobotRunState::LineId = LineId;
		_p->MAC__addRobotRunState::PostId = PostId;
		_p->MAC__addRobotRunState::runningNum = runningNum;
	}
	return _p;
}

inline int soap_write_MAC__addRobotRunState(struct soap *soap, MAC__addRobotRunState const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:addRobotRunState", p->soap_type() == SOAP_TYPE_MAC__addRobotRunState ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_MAC__addRobotRunState(struct soap *soap, const char *URL, MAC__addRobotRunState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:addRobotRunState", p->soap_type() == SOAP_TYPE_MAC__addRobotRunState ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_MAC__addRobotRunState(struct soap *soap, const char *URL, MAC__addRobotRunState const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:addRobotRunState", p->soap_type() == SOAP_TYPE_MAC__addRobotRunState ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_MAC__addRobotRunState(struct soap *soap, const char *URL, MAC__addRobotRunState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:addRobotRunState", p->soap_type() == SOAP_TYPE_MAC__addRobotRunState ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 MAC__addRobotRunState * SOAP_FMAC4 soap_get_MAC__addRobotRunState(struct soap*, MAC__addRobotRunState *, const char*, const char*);

inline int soap_read_MAC__addRobotRunState(struct soap *soap, MAC__addRobotRunState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_MAC__addRobotRunState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_MAC__addRobotRunState(struct soap *soap, const char *URL, MAC__addRobotRunState *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_MAC__addRobotRunState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_MAC__addRobotRunState(struct soap *soap, MAC__addRobotRunState *p)
{
	if (::soap_read_MAC__addRobotRunState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_MAC__GetLineServerInfoResponse_DEFINED
#define SOAP_TYPE_MAC__GetLineServerInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetLineServerInfoResponse(struct soap*, const char*, int, const MAC__GetLineServerInfoResponse *, const char*);
SOAP_FMAC3 MAC__GetLineServerInfoResponse * SOAP_FMAC4 soap_in_MAC__GetLineServerInfoResponse(struct soap*, const char*, MAC__GetLineServerInfoResponse *, const char*);
SOAP_FMAC1 MAC__GetLineServerInfoResponse * SOAP_FMAC2 soap_instantiate_MAC__GetLineServerInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline MAC__GetLineServerInfoResponse * soap_new_MAC__GetLineServerInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_MAC__GetLineServerInfoResponse(soap, n, NULL, NULL, NULL);
}

inline MAC__GetLineServerInfoResponse * soap_new_req_MAC__GetLineServerInfoResponse(
	struct soap *soap)
{
	MAC__GetLineServerInfoResponse *_p = ::soap_new_MAC__GetLineServerInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline MAC__GetLineServerInfoResponse * soap_new_set_MAC__GetLineServerInfoResponse(
	struct soap *soap,
	wchar_t *return_)
{
	MAC__GetLineServerInfoResponse *_p = ::soap_new_MAC__GetLineServerInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__GetLineServerInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_MAC__GetLineServerInfoResponse(struct soap *soap, MAC__GetLineServerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerInfoResponse", p->soap_type() == SOAP_TYPE_MAC__GetLineServerInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_MAC__GetLineServerInfoResponse(struct soap *soap, const char *URL, MAC__GetLineServerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerInfoResponse", p->soap_type() == SOAP_TYPE_MAC__GetLineServerInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_MAC__GetLineServerInfoResponse(struct soap *soap, const char *URL, MAC__GetLineServerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerInfoResponse", p->soap_type() == SOAP_TYPE_MAC__GetLineServerInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_MAC__GetLineServerInfoResponse(struct soap *soap, const char *URL, MAC__GetLineServerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerInfoResponse", p->soap_type() == SOAP_TYPE_MAC__GetLineServerInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 MAC__GetLineServerInfoResponse * SOAP_FMAC4 soap_get_MAC__GetLineServerInfoResponse(struct soap*, MAC__GetLineServerInfoResponse *, const char*, const char*);

inline int soap_read_MAC__GetLineServerInfoResponse(struct soap *soap, MAC__GetLineServerInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_MAC__GetLineServerInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_MAC__GetLineServerInfoResponse(struct soap *soap, const char *URL, MAC__GetLineServerInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_MAC__GetLineServerInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_MAC__GetLineServerInfoResponse(struct soap *soap, MAC__GetLineServerInfoResponse *p)
{
	if (::soap_read_MAC__GetLineServerInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_MAC__GetLineServerInfo_DEFINED
#define SOAP_TYPE_MAC__GetLineServerInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__GetLineServerInfo(struct soap*, const char*, int, const MAC__GetLineServerInfo *, const char*);
SOAP_FMAC3 MAC__GetLineServerInfo * SOAP_FMAC4 soap_in_MAC__GetLineServerInfo(struct soap*, const char*, MAC__GetLineServerInfo *, const char*);
SOAP_FMAC1 MAC__GetLineServerInfo * SOAP_FMAC2 soap_instantiate_MAC__GetLineServerInfo(struct soap*, int, const char*, const char*, size_t*);

inline MAC__GetLineServerInfo * soap_new_MAC__GetLineServerInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_MAC__GetLineServerInfo(soap, n, NULL, NULL, NULL);
}

inline MAC__GetLineServerInfo * soap_new_req_MAC__GetLineServerInfo(
	struct soap *soap,
	int lineId,
	bool outUse)
{
	MAC__GetLineServerInfo *_p = ::soap_new_MAC__GetLineServerInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__GetLineServerInfo::lineId = lineId;
		_p->MAC__GetLineServerInfo::outUse = outUse;
	}
	return _p;
}

inline MAC__GetLineServerInfo * soap_new_set_MAC__GetLineServerInfo(
	struct soap *soap,
	wchar_t *token,
	int lineId,
	bool outUse)
{
	MAC__GetLineServerInfo *_p = ::soap_new_MAC__GetLineServerInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__GetLineServerInfo::token = token;
		_p->MAC__GetLineServerInfo::lineId = lineId;
		_p->MAC__GetLineServerInfo::outUse = outUse;
	}
	return _p;
}

inline int soap_write_MAC__GetLineServerInfo(struct soap *soap, MAC__GetLineServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerInfo", p->soap_type() == SOAP_TYPE_MAC__GetLineServerInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_MAC__GetLineServerInfo(struct soap *soap, const char *URL, MAC__GetLineServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerInfo", p->soap_type() == SOAP_TYPE_MAC__GetLineServerInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_MAC__GetLineServerInfo(struct soap *soap, const char *URL, MAC__GetLineServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerInfo", p->soap_type() == SOAP_TYPE_MAC__GetLineServerInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_MAC__GetLineServerInfo(struct soap *soap, const char *URL, MAC__GetLineServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:GetLineServerInfo", p->soap_type() == SOAP_TYPE_MAC__GetLineServerInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 MAC__GetLineServerInfo * SOAP_FMAC4 soap_get_MAC__GetLineServerInfo(struct soap*, MAC__GetLineServerInfo *, const char*, const char*);

inline int soap_read_MAC__GetLineServerInfo(struct soap *soap, MAC__GetLineServerInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_MAC__GetLineServerInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_MAC__GetLineServerInfo(struct soap *soap, const char *URL, MAC__GetLineServerInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_MAC__GetLineServerInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_MAC__GetLineServerInfo(struct soap *soap, MAC__GetLineServerInfo *p)
{
	if (::soap_read_MAC__GetLineServerInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_MAC__fetchRobotConfigResponse_DEFINED
#define SOAP_TYPE_MAC__fetchRobotConfigResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__fetchRobotConfigResponse(struct soap*, const char*, int, const MAC__fetchRobotConfigResponse *, const char*);
SOAP_FMAC3 MAC__fetchRobotConfigResponse * SOAP_FMAC4 soap_in_MAC__fetchRobotConfigResponse(struct soap*, const char*, MAC__fetchRobotConfigResponse *, const char*);
SOAP_FMAC1 MAC__fetchRobotConfigResponse * SOAP_FMAC2 soap_instantiate_MAC__fetchRobotConfigResponse(struct soap*, int, const char*, const char*, size_t*);

inline MAC__fetchRobotConfigResponse * soap_new_MAC__fetchRobotConfigResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_MAC__fetchRobotConfigResponse(soap, n, NULL, NULL, NULL);
}

inline MAC__fetchRobotConfigResponse * soap_new_req_MAC__fetchRobotConfigResponse(
	struct soap *soap)
{
	MAC__fetchRobotConfigResponse *_p = ::soap_new_MAC__fetchRobotConfigResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline MAC__fetchRobotConfigResponse * soap_new_set_MAC__fetchRobotConfigResponse(
	struct soap *soap,
	wchar_t *return_)
{
	MAC__fetchRobotConfigResponse *_p = ::soap_new_MAC__fetchRobotConfigResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__fetchRobotConfigResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_MAC__fetchRobotConfigResponse(struct soap *soap, MAC__fetchRobotConfigResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:fetchRobotConfigResponse", p->soap_type() == SOAP_TYPE_MAC__fetchRobotConfigResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_MAC__fetchRobotConfigResponse(struct soap *soap, const char *URL, MAC__fetchRobotConfigResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:fetchRobotConfigResponse", p->soap_type() == SOAP_TYPE_MAC__fetchRobotConfigResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_MAC__fetchRobotConfigResponse(struct soap *soap, const char *URL, MAC__fetchRobotConfigResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:fetchRobotConfigResponse", p->soap_type() == SOAP_TYPE_MAC__fetchRobotConfigResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_MAC__fetchRobotConfigResponse(struct soap *soap, const char *URL, MAC__fetchRobotConfigResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:fetchRobotConfigResponse", p->soap_type() == SOAP_TYPE_MAC__fetchRobotConfigResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 MAC__fetchRobotConfigResponse * SOAP_FMAC4 soap_get_MAC__fetchRobotConfigResponse(struct soap*, MAC__fetchRobotConfigResponse *, const char*, const char*);

inline int soap_read_MAC__fetchRobotConfigResponse(struct soap *soap, MAC__fetchRobotConfigResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_MAC__fetchRobotConfigResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_MAC__fetchRobotConfigResponse(struct soap *soap, const char *URL, MAC__fetchRobotConfigResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_MAC__fetchRobotConfigResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_MAC__fetchRobotConfigResponse(struct soap *soap, MAC__fetchRobotConfigResponse *p)
{
	if (::soap_read_MAC__fetchRobotConfigResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_MAC__fetchRobotConfig_DEFINED
#define SOAP_TYPE_MAC__fetchRobotConfig_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_MAC__fetchRobotConfig(struct soap*, const char*, int, const MAC__fetchRobotConfig *, const char*);
SOAP_FMAC3 MAC__fetchRobotConfig * SOAP_FMAC4 soap_in_MAC__fetchRobotConfig(struct soap*, const char*, MAC__fetchRobotConfig *, const char*);
SOAP_FMAC1 MAC__fetchRobotConfig * SOAP_FMAC2 soap_instantiate_MAC__fetchRobotConfig(struct soap*, int, const char*, const char*, size_t*);

inline MAC__fetchRobotConfig * soap_new_MAC__fetchRobotConfig(struct soap *soap, int n = -1)
{
	return soap_instantiate_MAC__fetchRobotConfig(soap, n, NULL, NULL, NULL);
}

inline MAC__fetchRobotConfig * soap_new_req_MAC__fetchRobotConfig(
	struct soap *soap)
{
	MAC__fetchRobotConfig *_p = ::soap_new_MAC__fetchRobotConfig(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline MAC__fetchRobotConfig * soap_new_set_MAC__fetchRobotConfig(
	struct soap *soap,
	wchar_t *token,
	wchar_t *managerIP)
{
	MAC__fetchRobotConfig *_p = ::soap_new_MAC__fetchRobotConfig(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->MAC__fetchRobotConfig::token = token;
		_p->MAC__fetchRobotConfig::managerIP = managerIP;
	}
	return _p;
}

inline int soap_write_MAC__fetchRobotConfig(struct soap *soap, MAC__fetchRobotConfig const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:fetchRobotConfig", p->soap_type() == SOAP_TYPE_MAC__fetchRobotConfig ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_MAC__fetchRobotConfig(struct soap *soap, const char *URL, MAC__fetchRobotConfig const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:fetchRobotConfig", p->soap_type() == SOAP_TYPE_MAC__fetchRobotConfig ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_MAC__fetchRobotConfig(struct soap *soap, const char *URL, MAC__fetchRobotConfig const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:fetchRobotConfig", p->soap_type() == SOAP_TYPE_MAC__fetchRobotConfig ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_MAC__fetchRobotConfig(struct soap *soap, const char *URL, MAC__fetchRobotConfig const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "MAC:fetchRobotConfig", p->soap_type() == SOAP_TYPE_MAC__fetchRobotConfig ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 MAC__fetchRobotConfig * SOAP_FMAC4 soap_get_MAC__fetchRobotConfig(struct soap*, MAC__fetchRobotConfig *, const char*, const char*);

inline int soap_read_MAC__fetchRobotConfig(struct soap *soap, MAC__fetchRobotConfig *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_MAC__fetchRobotConfig(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_MAC__fetchRobotConfig(struct soap *soap, const char *URL, MAC__fetchRobotConfig *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_MAC__fetchRobotConfig(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_MAC__fetchRobotConfig(struct soap *soap, MAC__fetchRobotConfig *p)
{
	if (::soap_read_MAC__fetchRobotConfig(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_SER__AddFileToSql__DEFINED
#define SOAP_TYPE_SER__AddFileToSql__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddFileToSql_(struct soap*, struct SER__AddFileToSql_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddFileToSql_(struct soap*, const struct SER__AddFileToSql_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddFileToSql_(struct soap*, const char*, int, const struct SER__AddFileToSql_ *, const char*);
SOAP_FMAC3 struct SER__AddFileToSql_ * SOAP_FMAC4 soap_in_SER__AddFileToSql_(struct soap*, const char*, struct SER__AddFileToSql_ *, const char*);
SOAP_FMAC1 struct SER__AddFileToSql_ * SOAP_FMAC2 soap_instantiate_SER__AddFileToSql_(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__AddFileToSql_ * soap_new_SER__AddFileToSql_(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__AddFileToSql_(soap, n, NULL, NULL, NULL);
}

inline struct SER__AddFileToSql_ * soap_new_req_SER__AddFileToSql_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strFileName,
	const std::wstring& sPointer,
	const std::wstring& tablenamefieldname,
	const std::wstring& fileIP,
	const std::wstring& fileUse,
	const std::wstring& filePassword)
{
	struct SER__AddFileToSql_ *_p = ::soap_new_SER__AddFileToSql_(soap);
	if (_p)
	{	::soap_default_SER__AddFileToSql_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strFileName = strFileName;
		_p->sPointer = sPointer;
		_p->tablenamefieldname = tablenamefieldname;
		_p->fileIP = fileIP;
		_p->fileUse = fileUse;
		_p->filePassword = filePassword;
	}
	return _p;
}

inline struct SER__AddFileToSql_ * soap_new_set_SER__AddFileToSql_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strFileName,
	const std::wstring& sPointer,
	const std::wstring& tablenamefieldname,
	const std::wstring& fileIP,
	const std::wstring& fileUse,
	const std::wstring& filePassword)
{
	struct SER__AddFileToSql_ *_p = ::soap_new_SER__AddFileToSql_(soap);
	if (_p)
	{	::soap_default_SER__AddFileToSql_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strFileName = strFileName;
		_p->sPointer = sPointer;
		_p->tablenamefieldname = tablenamefieldname;
		_p->fileIP = fileIP;
		_p->fileUse = fileUse;
		_p->filePassword = filePassword;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddFileToSql_(struct soap*, const struct SER__AddFileToSql_ *, const char*, const char*);

inline int soap_write_SER__AddFileToSql_(struct soap *soap, struct SER__AddFileToSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__AddFileToSql_(soap, p), 0) || ::soap_put_SER__AddFileToSql_(soap, p, "SER:AddFileToSql", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__AddFileToSql_(struct soap *soap, const char *URL, struct SER__AddFileToSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSql_(soap, p), 0) || ::soap_put_SER__AddFileToSql_(soap, p, "SER:AddFileToSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__AddFileToSql_(struct soap *soap, const char *URL, struct SER__AddFileToSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSql_(soap, p), 0) || ::soap_put_SER__AddFileToSql_(soap, p, "SER:AddFileToSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__AddFileToSql_(struct soap *soap, const char *URL, struct SER__AddFileToSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSql_(soap, p), 0) || ::soap_put_SER__AddFileToSql_(soap, p, "SER:AddFileToSql", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__AddFileToSql_ * SOAP_FMAC4 soap_get_SER__AddFileToSql_(struct soap*, struct SER__AddFileToSql_ *, const char*, const char*);

inline int soap_read_SER__AddFileToSql_(struct soap *soap, struct SER__AddFileToSql_ *p)
{
	if (p)
	{	::soap_default_SER__AddFileToSql_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__AddFileToSql_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__AddFileToSql_(struct soap *soap, const char *URL, struct SER__AddFileToSql_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__AddFileToSql_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__AddFileToSql_(struct soap *soap, struct SER__AddFileToSql_ *p)
{
	if (::soap_read_SER__AddFileToSql_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__AddFileToSql_Response_DEFINED
#define SOAP_TYPE_SER__AddFileToSql_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddFileToSql_Response(struct soap*, struct SER__AddFileToSql_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddFileToSql_Response(struct soap*, const struct SER__AddFileToSql_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddFileToSql_Response(struct soap*, const char*, int, const struct SER__AddFileToSql_Response *, const char*);
SOAP_FMAC3 struct SER__AddFileToSql_Response * SOAP_FMAC4 soap_in_SER__AddFileToSql_Response(struct soap*, const char*, struct SER__AddFileToSql_Response *, const char*);
SOAP_FMAC1 struct SER__AddFileToSql_Response * SOAP_FMAC2 soap_instantiate_SER__AddFileToSql_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__AddFileToSql_Response * soap_new_SER__AddFileToSql_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__AddFileToSql_Response(soap, n, NULL, NULL, NULL);
}

inline struct SER__AddFileToSql_Response * soap_new_req_SER__AddFileToSql_Response(
	struct soap *soap,
	const std::wstring& AddFileToSqlResult)
{
	struct SER__AddFileToSql_Response *_p = ::soap_new_SER__AddFileToSql_Response(soap);
	if (_p)
	{	::soap_default_SER__AddFileToSql_Response(soap, _p);
		_p->AddFileToSqlResult = AddFileToSqlResult;
	}
	return _p;
}

inline struct SER__AddFileToSql_Response * soap_new_set_SER__AddFileToSql_Response(
	struct soap *soap,
	const std::wstring& AddFileToSqlResult)
{
	struct SER__AddFileToSql_Response *_p = ::soap_new_SER__AddFileToSql_Response(soap);
	if (_p)
	{	::soap_default_SER__AddFileToSql_Response(soap, _p);
		_p->AddFileToSqlResult = AddFileToSqlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddFileToSql_Response(struct soap*, const struct SER__AddFileToSql_Response *, const char*, const char*);

inline int soap_write_SER__AddFileToSql_Response(struct soap *soap, struct SER__AddFileToSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__AddFileToSql_Response(soap, p), 0) || ::soap_put_SER__AddFileToSql_Response(soap, p, "SER:AddFileToSql-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__AddFileToSql_Response(struct soap *soap, const char *URL, struct SER__AddFileToSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSql_Response(soap, p), 0) || ::soap_put_SER__AddFileToSql_Response(soap, p, "SER:AddFileToSql-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__AddFileToSql_Response(struct soap *soap, const char *URL, struct SER__AddFileToSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSql_Response(soap, p), 0) || ::soap_put_SER__AddFileToSql_Response(soap, p, "SER:AddFileToSql-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__AddFileToSql_Response(struct soap *soap, const char *URL, struct SER__AddFileToSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSql_Response(soap, p), 0) || ::soap_put_SER__AddFileToSql_Response(soap, p, "SER:AddFileToSql-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__AddFileToSql_Response * SOAP_FMAC4 soap_get_SER__AddFileToSql_Response(struct soap*, struct SER__AddFileToSql_Response *, const char*, const char*);

inline int soap_read_SER__AddFileToSql_Response(struct soap *soap, struct SER__AddFileToSql_Response *p)
{
	if (p)
	{	::soap_default_SER__AddFileToSql_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__AddFileToSql_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__AddFileToSql_Response(struct soap *soap, const char *URL, struct SER__AddFileToSql_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__AddFileToSql_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__AddFileToSql_Response(struct soap *soap, struct SER__AddFileToSql_Response *p)
{
	if (::soap_read_SER__AddFileToSql_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeStorageProcess__DEFINED
#define SOAP_TYPE_SER__executeStorageProcess__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeStorageProcess_(struct soap*, struct SER__executeStorageProcess_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeStorageProcess_(struct soap*, const struct SER__executeStorageProcess_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeStorageProcess_(struct soap*, const char*, int, const struct SER__executeStorageProcess_ *, const char*);
SOAP_FMAC3 struct SER__executeStorageProcess_ * SOAP_FMAC4 soap_in_SER__executeStorageProcess_(struct soap*, const char*, struct SER__executeStorageProcess_ *, const char*);
SOAP_FMAC1 struct SER__executeStorageProcess_ * SOAP_FMAC2 soap_instantiate_SER__executeStorageProcess_(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeStorageProcess_ * soap_new_SER__executeStorageProcess_(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeStorageProcess_(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeStorageProcess_ * soap_new_req_SER__executeStorageProcess_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& StorageProcessName,
	const std::wstring& Parameters)
{
	struct SER__executeStorageProcess_ *_p = ::soap_new_SER__executeStorageProcess_(soap);
	if (_p)
	{	::soap_default_SER__executeStorageProcess_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->StorageProcessName = StorageProcessName;
		_p->Parameters = Parameters;
	}
	return _p;
}

inline struct SER__executeStorageProcess_ * soap_new_set_SER__executeStorageProcess_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& StorageProcessName,
	const std::wstring& Parameters)
{
	struct SER__executeStorageProcess_ *_p = ::soap_new_SER__executeStorageProcess_(soap);
	if (_p)
	{	::soap_default_SER__executeStorageProcess_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->StorageProcessName = StorageProcessName;
		_p->Parameters = Parameters;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeStorageProcess_(struct soap*, const struct SER__executeStorageProcess_ *, const char*, const char*);

inline int soap_write_SER__executeStorageProcess_(struct soap *soap, struct SER__executeStorageProcess_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeStorageProcess_(soap, p), 0) || ::soap_put_SER__executeStorageProcess_(soap, p, "SER:executeStorageProcess", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeStorageProcess_(struct soap *soap, const char *URL, struct SER__executeStorageProcess_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcess_(soap, p), 0) || ::soap_put_SER__executeStorageProcess_(soap, p, "SER:executeStorageProcess", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeStorageProcess_(struct soap *soap, const char *URL, struct SER__executeStorageProcess_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcess_(soap, p), 0) || ::soap_put_SER__executeStorageProcess_(soap, p, "SER:executeStorageProcess", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeStorageProcess_(struct soap *soap, const char *URL, struct SER__executeStorageProcess_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcess_(soap, p), 0) || ::soap_put_SER__executeStorageProcess_(soap, p, "SER:executeStorageProcess", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeStorageProcess_ * SOAP_FMAC4 soap_get_SER__executeStorageProcess_(struct soap*, struct SER__executeStorageProcess_ *, const char*, const char*);

inline int soap_read_SER__executeStorageProcess_(struct soap *soap, struct SER__executeStorageProcess_ *p)
{
	if (p)
	{	::soap_default_SER__executeStorageProcess_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeStorageProcess_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeStorageProcess_(struct soap *soap, const char *URL, struct SER__executeStorageProcess_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeStorageProcess_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeStorageProcess_(struct soap *soap, struct SER__executeStorageProcess_ *p)
{
	if (::soap_read_SER__executeStorageProcess_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeStorageProcess_Response_DEFINED
#define SOAP_TYPE_SER__executeStorageProcess_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeStorageProcess_Response(struct soap*, struct SER__executeStorageProcess_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeStorageProcess_Response(struct soap*, const struct SER__executeStorageProcess_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeStorageProcess_Response(struct soap*, const char*, int, const struct SER__executeStorageProcess_Response *, const char*);
SOAP_FMAC3 struct SER__executeStorageProcess_Response * SOAP_FMAC4 soap_in_SER__executeStorageProcess_Response(struct soap*, const char*, struct SER__executeStorageProcess_Response *, const char*);
SOAP_FMAC1 struct SER__executeStorageProcess_Response * SOAP_FMAC2 soap_instantiate_SER__executeStorageProcess_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeStorageProcess_Response * soap_new_SER__executeStorageProcess_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeStorageProcess_Response(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeStorageProcess_Response * soap_new_req_SER__executeStorageProcess_Response(
	struct soap *soap,
	const std::wstring& executeStorageProcessResult)
{
	struct SER__executeStorageProcess_Response *_p = ::soap_new_SER__executeStorageProcess_Response(soap);
	if (_p)
	{	::soap_default_SER__executeStorageProcess_Response(soap, _p);
		_p->executeStorageProcessResult = executeStorageProcessResult;
	}
	return _p;
}

inline struct SER__executeStorageProcess_Response * soap_new_set_SER__executeStorageProcess_Response(
	struct soap *soap,
	const std::wstring& executeStorageProcessResult)
{
	struct SER__executeStorageProcess_Response *_p = ::soap_new_SER__executeStorageProcess_Response(soap);
	if (_p)
	{	::soap_default_SER__executeStorageProcess_Response(soap, _p);
		_p->executeStorageProcessResult = executeStorageProcessResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeStorageProcess_Response(struct soap*, const struct SER__executeStorageProcess_Response *, const char*, const char*);

inline int soap_write_SER__executeStorageProcess_Response(struct soap *soap, struct SER__executeStorageProcess_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeStorageProcess_Response(soap, p), 0) || ::soap_put_SER__executeStorageProcess_Response(soap, p, "SER:executeStorageProcess-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeStorageProcess_Response(struct soap *soap, const char *URL, struct SER__executeStorageProcess_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcess_Response(soap, p), 0) || ::soap_put_SER__executeStorageProcess_Response(soap, p, "SER:executeStorageProcess-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeStorageProcess_Response(struct soap *soap, const char *URL, struct SER__executeStorageProcess_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcess_Response(soap, p), 0) || ::soap_put_SER__executeStorageProcess_Response(soap, p, "SER:executeStorageProcess-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeStorageProcess_Response(struct soap *soap, const char *URL, struct SER__executeStorageProcess_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcess_Response(soap, p), 0) || ::soap_put_SER__executeStorageProcess_Response(soap, p, "SER:executeStorageProcess-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeStorageProcess_Response * SOAP_FMAC4 soap_get_SER__executeStorageProcess_Response(struct soap*, struct SER__executeStorageProcess_Response *, const char*, const char*);

inline int soap_read_SER__executeStorageProcess_Response(struct soap *soap, struct SER__executeStorageProcess_Response *p)
{
	if (p)
	{	::soap_default_SER__executeStorageProcess_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeStorageProcess_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeStorageProcess_Response(struct soap *soap, const char *URL, struct SER__executeStorageProcess_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeStorageProcess_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeStorageProcess_Response(struct soap *soap, struct SER__executeStorageProcess_Response *p)
{
	if (::soap_read_SER__executeStorageProcess_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__insertXml__DEFINED
#define SOAP_TYPE_SER__insertXml__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__insertXml_(struct soap*, struct SER__insertXml_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__insertXml_(struct soap*, const struct SER__insertXml_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__insertXml_(struct soap*, const char*, int, const struct SER__insertXml_ *, const char*);
SOAP_FMAC3 struct SER__insertXml_ * SOAP_FMAC4 soap_in_SER__insertXml_(struct soap*, const char*, struct SER__insertXml_ *, const char*);
SOAP_FMAC1 struct SER__insertXml_ * SOAP_FMAC2 soap_instantiate_SER__insertXml_(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__insertXml_ * soap_new_SER__insertXml_(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__insertXml_(soap, n, NULL, NULL, NULL);
}

inline struct SER__insertXml_ * soap_new_req_SER__insertXml_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strXml,
	bool encode)
{
	struct SER__insertXml_ *_p = ::soap_new_SER__insertXml_(soap);
	if (_p)
	{	::soap_default_SER__insertXml_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strXml = strXml;
		_p->encode = encode;
	}
	return _p;
}

inline struct SER__insertXml_ * soap_new_set_SER__insertXml_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strXml,
	bool encode)
{
	struct SER__insertXml_ *_p = ::soap_new_SER__insertXml_(soap);
	if (_p)
	{	::soap_default_SER__insertXml_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strXml = strXml;
		_p->encode = encode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__insertXml_(struct soap*, const struct SER__insertXml_ *, const char*, const char*);

inline int soap_write_SER__insertXml_(struct soap *soap, struct SER__insertXml_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__insertXml_(soap, p), 0) || ::soap_put_SER__insertXml_(soap, p, "SER:insertXml", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__insertXml_(struct soap *soap, const char *URL, struct SER__insertXml_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXml_(soap, p), 0) || ::soap_put_SER__insertXml_(soap, p, "SER:insertXml", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__insertXml_(struct soap *soap, const char *URL, struct SER__insertXml_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXml_(soap, p), 0) || ::soap_put_SER__insertXml_(soap, p, "SER:insertXml", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__insertXml_(struct soap *soap, const char *URL, struct SER__insertXml_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXml_(soap, p), 0) || ::soap_put_SER__insertXml_(soap, p, "SER:insertXml", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__insertXml_ * SOAP_FMAC4 soap_get_SER__insertXml_(struct soap*, struct SER__insertXml_ *, const char*, const char*);

inline int soap_read_SER__insertXml_(struct soap *soap, struct SER__insertXml_ *p)
{
	if (p)
	{	::soap_default_SER__insertXml_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__insertXml_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__insertXml_(struct soap *soap, const char *URL, struct SER__insertXml_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__insertXml_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__insertXml_(struct soap *soap, struct SER__insertXml_ *p)
{
	if (::soap_read_SER__insertXml_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__insertXml_Response_DEFINED
#define SOAP_TYPE_SER__insertXml_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__insertXml_Response(struct soap*, struct SER__insertXml_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__insertXml_Response(struct soap*, const struct SER__insertXml_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__insertXml_Response(struct soap*, const char*, int, const struct SER__insertXml_Response *, const char*);
SOAP_FMAC3 struct SER__insertXml_Response * SOAP_FMAC4 soap_in_SER__insertXml_Response(struct soap*, const char*, struct SER__insertXml_Response *, const char*);
SOAP_FMAC1 struct SER__insertXml_Response * SOAP_FMAC2 soap_instantiate_SER__insertXml_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__insertXml_Response * soap_new_SER__insertXml_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__insertXml_Response(soap, n, NULL, NULL, NULL);
}

inline struct SER__insertXml_Response * soap_new_req_SER__insertXml_Response(
	struct soap *soap,
	const std::wstring& insertXmlResult)
{
	struct SER__insertXml_Response *_p = ::soap_new_SER__insertXml_Response(soap);
	if (_p)
	{	::soap_default_SER__insertXml_Response(soap, _p);
		_p->insertXmlResult = insertXmlResult;
	}
	return _p;
}

inline struct SER__insertXml_Response * soap_new_set_SER__insertXml_Response(
	struct soap *soap,
	const std::wstring& insertXmlResult)
{
	struct SER__insertXml_Response *_p = ::soap_new_SER__insertXml_Response(soap);
	if (_p)
	{	::soap_default_SER__insertXml_Response(soap, _p);
		_p->insertXmlResult = insertXmlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__insertXml_Response(struct soap*, const struct SER__insertXml_Response *, const char*, const char*);

inline int soap_write_SER__insertXml_Response(struct soap *soap, struct SER__insertXml_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__insertXml_Response(soap, p), 0) || ::soap_put_SER__insertXml_Response(soap, p, "SER:insertXml-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__insertXml_Response(struct soap *soap, const char *URL, struct SER__insertXml_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXml_Response(soap, p), 0) || ::soap_put_SER__insertXml_Response(soap, p, "SER:insertXml-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__insertXml_Response(struct soap *soap, const char *URL, struct SER__insertXml_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXml_Response(soap, p), 0) || ::soap_put_SER__insertXml_Response(soap, p, "SER:insertXml-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__insertXml_Response(struct soap *soap, const char *URL, struct SER__insertXml_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXml_Response(soap, p), 0) || ::soap_put_SER__insertXml_Response(soap, p, "SER:insertXml-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__insertXml_Response * SOAP_FMAC4 soap_get_SER__insertXml_Response(struct soap*, struct SER__insertXml_Response *, const char*, const char*);

inline int soap_read_SER__insertXml_Response(struct soap *soap, struct SER__insertXml_Response *p)
{
	if (p)
	{	::soap_default_SER__insertXml_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__insertXml_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__insertXml_Response(struct soap *soap, const char *URL, struct SER__insertXml_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__insertXml_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__insertXml_Response(struct soap *soap, struct SER__insertXml_Response *p)
{
	if (::soap_read_SER__insertXml_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSql_USCOREencode__DEFINED
#define SOAP_TYPE_SER__executeSql_USCOREencode__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREencode_(struct soap*, struct SER__executeSql_USCOREencode_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREencode_(struct soap*, const struct SER__executeSql_USCOREencode_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREencode_(struct soap*, const char*, int, const struct SER__executeSql_USCOREencode_ *, const char*);
SOAP_FMAC3 struct SER__executeSql_USCOREencode_ * SOAP_FMAC4 soap_in_SER__executeSql_USCOREencode_(struct soap*, const char*, struct SER__executeSql_USCOREencode_ *, const char*);
SOAP_FMAC1 struct SER__executeSql_USCOREencode_ * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREencode_(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSql_USCOREencode_ * soap_new_SER__executeSql_USCOREencode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSql_USCOREencode_(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSql_USCOREencode_ * soap_new_req_SER__executeSql_USCOREencode_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql_USCOREencode_ *_p = ::soap_new_SER__executeSql_USCOREencode_(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREencode_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct SER__executeSql_USCOREencode_ * soap_new_set_SER__executeSql_USCOREencode_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql_USCOREencode_ *_p = ::soap_new_SER__executeSql_USCOREencode_(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREencode_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREencode_(struct soap*, const struct SER__executeSql_USCOREencode_ *, const char*, const char*);

inline int soap_write_SER__executeSql_USCOREencode_(struct soap *soap, struct SER__executeSql_USCOREencode_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSql_USCOREencode_(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode_(soap, p, "SER:executeSql_encode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSql_USCOREencode_(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencode_(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode_(soap, p, "SER:executeSql_encode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSql_USCOREencode_(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencode_(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode_(soap, p, "SER:executeSql_encode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSql_USCOREencode_(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencode_(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode_(soap, p, "SER:executeSql_encode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSql_USCOREencode_ * SOAP_FMAC4 soap_get_SER__executeSql_USCOREencode_(struct soap*, struct SER__executeSql_USCOREencode_ *, const char*, const char*);

inline int soap_read_SER__executeSql_USCOREencode_(struct soap *soap, struct SER__executeSql_USCOREencode_ *p)
{
	if (p)
	{	::soap_default_SER__executeSql_USCOREencode_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSql_USCOREencode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSql_USCOREencode_(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSql_USCOREencode_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSql_USCOREencode_(struct soap *soap, struct SER__executeSql_USCOREencode_ *p)
{
	if (::soap_read_SER__executeSql_USCOREencode_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSql_USCOREencode_Response_DEFINED
#define SOAP_TYPE_SER__executeSql_USCOREencode_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREencode_Response(struct soap*, struct SER__executeSql_USCOREencode_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREencode_Response(struct soap*, const struct SER__executeSql_USCOREencode_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREencode_Response(struct soap*, const char*, int, const struct SER__executeSql_USCOREencode_Response *, const char*);
SOAP_FMAC3 struct SER__executeSql_USCOREencode_Response * SOAP_FMAC4 soap_in_SER__executeSql_USCOREencode_Response(struct soap*, const char*, struct SER__executeSql_USCOREencode_Response *, const char*);
SOAP_FMAC1 struct SER__executeSql_USCOREencode_Response * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREencode_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSql_USCOREencode_Response * soap_new_SER__executeSql_USCOREencode_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSql_USCOREencode_Response(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSql_USCOREencode_Response * soap_new_req_SER__executeSql_USCOREencode_Response(
	struct soap *soap,
	const std::wstring& executeSql_USCOREencodeResult)
{
	struct SER__executeSql_USCOREencode_Response *_p = ::soap_new_SER__executeSql_USCOREencode_Response(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREencode_Response(soap, _p);
		_p->executeSql_USCOREencodeResult = executeSql_USCOREencodeResult;
	}
	return _p;
}

inline struct SER__executeSql_USCOREencode_Response * soap_new_set_SER__executeSql_USCOREencode_Response(
	struct soap *soap,
	const std::wstring& executeSql_USCOREencodeResult)
{
	struct SER__executeSql_USCOREencode_Response *_p = ::soap_new_SER__executeSql_USCOREencode_Response(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREencode_Response(soap, _p);
		_p->executeSql_USCOREencodeResult = executeSql_USCOREencodeResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREencode_Response(struct soap*, const struct SER__executeSql_USCOREencode_Response *, const char*, const char*);

inline int soap_write_SER__executeSql_USCOREencode_Response(struct soap *soap, struct SER__executeSql_USCOREencode_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSql_USCOREencode_Response(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode_Response(soap, p, "SER:executeSql_encode-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSql_USCOREencode_Response(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencode_Response(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode_Response(soap, p, "SER:executeSql_encode-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSql_USCOREencode_Response(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencode_Response(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode_Response(soap, p, "SER:executeSql_encode-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSql_USCOREencode_Response(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencode_Response(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode_Response(soap, p, "SER:executeSql_encode-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSql_USCOREencode_Response * SOAP_FMAC4 soap_get_SER__executeSql_USCOREencode_Response(struct soap*, struct SER__executeSql_USCOREencode_Response *, const char*, const char*);

inline int soap_read_SER__executeSql_USCOREencode_Response(struct soap *soap, struct SER__executeSql_USCOREencode_Response *p)
{
	if (p)
	{	::soap_default_SER__executeSql_USCOREencode_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSql_USCOREencode_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSql_USCOREencode_Response(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSql_USCOREencode_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSql_USCOREencode_Response(struct soap *soap, struct SER__executeSql_USCOREencode_Response *p)
{
	if (::soap_read_SER__executeSql_USCOREencode_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSql_USCOREbackEncord__DEFINED
#define SOAP_TYPE_SER__executeSql_USCOREbackEncord__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREbackEncord_(struct soap*, struct SER__executeSql_USCOREbackEncord_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREbackEncord_(struct soap*, const struct SER__executeSql_USCOREbackEncord_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREbackEncord_(struct soap*, const char*, int, const struct SER__executeSql_USCOREbackEncord_ *, const char*);
SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord_ * SOAP_FMAC4 soap_in_SER__executeSql_USCOREbackEncord_(struct soap*, const char*, struct SER__executeSql_USCOREbackEncord_ *, const char*);
SOAP_FMAC1 struct SER__executeSql_USCOREbackEncord_ * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREbackEncord_(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSql_USCOREbackEncord_ * soap_new_SER__executeSql_USCOREbackEncord_(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSql_USCOREbackEncord_(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSql_USCOREbackEncord_ * soap_new_req_SER__executeSql_USCOREbackEncord_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql_USCOREbackEncord_ *_p = ::soap_new_SER__executeSql_USCOREbackEncord_(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREbackEncord_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct SER__executeSql_USCOREbackEncord_ * soap_new_set_SER__executeSql_USCOREbackEncord_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql_USCOREbackEncord_ *_p = ::soap_new_SER__executeSql_USCOREbackEncord_(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREbackEncord_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREbackEncord_(struct soap*, const struct SER__executeSql_USCOREbackEncord_ *, const char*, const char*);

inline int soap_write_SER__executeSql_USCOREbackEncord_(struct soap *soap, struct SER__executeSql_USCOREbackEncord_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSql_USCOREbackEncord_(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord_(soap, p, "SER:executeSql_backEncord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSql_USCOREbackEncord_(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncord_(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord_(soap, p, "SER:executeSql_backEncord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSql_USCOREbackEncord_(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncord_(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord_(soap, p, "SER:executeSql_backEncord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSql_USCOREbackEncord_(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncord_(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord_(soap, p, "SER:executeSql_backEncord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord_ * SOAP_FMAC4 soap_get_SER__executeSql_USCOREbackEncord_(struct soap*, struct SER__executeSql_USCOREbackEncord_ *, const char*, const char*);

inline int soap_read_SER__executeSql_USCOREbackEncord_(struct soap *soap, struct SER__executeSql_USCOREbackEncord_ *p)
{
	if (p)
	{	::soap_default_SER__executeSql_USCOREbackEncord_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSql_USCOREbackEncord_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSql_USCOREbackEncord_(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSql_USCOREbackEncord_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSql_USCOREbackEncord_(struct soap *soap, struct SER__executeSql_USCOREbackEncord_ *p)
{
	if (::soap_read_SER__executeSql_USCOREbackEncord_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response_DEFINED
#define SOAP_TYPE_SER__executeSql_USCOREbackEncord_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREbackEncord_Response(struct soap*, struct SER__executeSql_USCOREbackEncord_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREbackEncord_Response(struct soap*, const struct SER__executeSql_USCOREbackEncord_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREbackEncord_Response(struct soap*, const char*, int, const struct SER__executeSql_USCOREbackEncord_Response *, const char*);
SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord_Response * SOAP_FMAC4 soap_in_SER__executeSql_USCOREbackEncord_Response(struct soap*, const char*, struct SER__executeSql_USCOREbackEncord_Response *, const char*);
SOAP_FMAC1 struct SER__executeSql_USCOREbackEncord_Response * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREbackEncord_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSql_USCOREbackEncord_Response * soap_new_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSql_USCOREbackEncord_Response(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSql_USCOREbackEncord_Response * soap_new_req_SER__executeSql_USCOREbackEncord_Response(
	struct soap *soap,
	const std::wstring& executeSql_USCOREbackEncordResult)
{
	struct SER__executeSql_USCOREbackEncord_Response *_p = ::soap_new_SER__executeSql_USCOREbackEncord_Response(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREbackEncord_Response(soap, _p);
		_p->executeSql_USCOREbackEncordResult = executeSql_USCOREbackEncordResult;
	}
	return _p;
}

inline struct SER__executeSql_USCOREbackEncord_Response * soap_new_set_SER__executeSql_USCOREbackEncord_Response(
	struct soap *soap,
	const std::wstring& executeSql_USCOREbackEncordResult)
{
	struct SER__executeSql_USCOREbackEncord_Response *_p = ::soap_new_SER__executeSql_USCOREbackEncord_Response(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREbackEncord_Response(soap, _p);
		_p->executeSql_USCOREbackEncordResult = executeSql_USCOREbackEncordResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREbackEncord_Response(struct soap*, const struct SER__executeSql_USCOREbackEncord_Response *, const char*, const char*);

inline int soap_write_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, struct SER__executeSql_USCOREbackEncord_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSql_USCOREbackEncord_Response(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord_Response(soap, p, "SER:executeSql_backEncord-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncord_Response(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord_Response(soap, p, "SER:executeSql_backEncord-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncord_Response(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord_Response(soap, p, "SER:executeSql_backEncord-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncord_Response(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord_Response(soap, p, "SER:executeSql_backEncord-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord_Response * SOAP_FMAC4 soap_get_SER__executeSql_USCOREbackEncord_Response(struct soap*, struct SER__executeSql_USCOREbackEncord_Response *, const char*, const char*);

inline int soap_read_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, struct SER__executeSql_USCOREbackEncord_Response *p)
{
	if (p)
	{	::soap_default_SER__executeSql_USCOREbackEncord_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSql_USCOREbackEncord_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSql_USCOREbackEncord_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSql_USCOREbackEncord_Response(struct soap *soap, struct SER__executeSql_USCOREbackEncord_Response *p)
{
	if (::soap_read_SER__executeSql_USCOREbackEncord_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSql__DEFINED
#define SOAP_TYPE_SER__executeSql__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_(struct soap*, struct SER__executeSql_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_(struct soap*, const struct SER__executeSql_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_(struct soap*, const char*, int, const struct SER__executeSql_ *, const char*);
SOAP_FMAC3 struct SER__executeSql_ * SOAP_FMAC4 soap_in_SER__executeSql_(struct soap*, const char*, struct SER__executeSql_ *, const char*);
SOAP_FMAC1 struct SER__executeSql_ * SOAP_FMAC2 soap_instantiate_SER__executeSql_(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSql_ * soap_new_SER__executeSql_(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSql_(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSql_ * soap_new_req_SER__executeSql_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql_ *_p = ::soap_new_SER__executeSql_(soap);
	if (_p)
	{	::soap_default_SER__executeSql_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct SER__executeSql_ * soap_new_set_SER__executeSql_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql_ *_p = ::soap_new_SER__executeSql_(soap);
	if (_p)
	{	::soap_default_SER__executeSql_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_(struct soap*, const struct SER__executeSql_ *, const char*, const char*);

inline int soap_write_SER__executeSql_(struct soap *soap, struct SER__executeSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSql_(soap, p), 0) || ::soap_put_SER__executeSql_(soap, p, "SER:executeSql", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSql_(struct soap *soap, const char *URL, struct SER__executeSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_(soap, p), 0) || ::soap_put_SER__executeSql_(soap, p, "SER:executeSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSql_(struct soap *soap, const char *URL, struct SER__executeSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_(soap, p), 0) || ::soap_put_SER__executeSql_(soap, p, "SER:executeSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSql_(struct soap *soap, const char *URL, struct SER__executeSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_(soap, p), 0) || ::soap_put_SER__executeSql_(soap, p, "SER:executeSql", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSql_ * SOAP_FMAC4 soap_get_SER__executeSql_(struct soap*, struct SER__executeSql_ *, const char*, const char*);

inline int soap_read_SER__executeSql_(struct soap *soap, struct SER__executeSql_ *p)
{
	if (p)
	{	::soap_default_SER__executeSql_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSql_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSql_(struct soap *soap, const char *URL, struct SER__executeSql_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSql_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSql_(struct soap *soap, struct SER__executeSql_ *p)
{
	if (::soap_read_SER__executeSql_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSql_Response_DEFINED
#define SOAP_TYPE_SER__executeSql_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_Response(struct soap*, struct SER__executeSql_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_Response(struct soap*, const struct SER__executeSql_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_Response(struct soap*, const char*, int, const struct SER__executeSql_Response *, const char*);
SOAP_FMAC3 struct SER__executeSql_Response * SOAP_FMAC4 soap_in_SER__executeSql_Response(struct soap*, const char*, struct SER__executeSql_Response *, const char*);
SOAP_FMAC1 struct SER__executeSql_Response * SOAP_FMAC2 soap_instantiate_SER__executeSql_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSql_Response * soap_new_SER__executeSql_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSql_Response(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSql_Response * soap_new_req_SER__executeSql_Response(
	struct soap *soap,
	const std::wstring& executeSqlResult)
{
	struct SER__executeSql_Response *_p = ::soap_new_SER__executeSql_Response(soap);
	if (_p)
	{	::soap_default_SER__executeSql_Response(soap, _p);
		_p->executeSqlResult = executeSqlResult;
	}
	return _p;
}

inline struct SER__executeSql_Response * soap_new_set_SER__executeSql_Response(
	struct soap *soap,
	const std::wstring& executeSqlResult)
{
	struct SER__executeSql_Response *_p = ::soap_new_SER__executeSql_Response(soap);
	if (_p)
	{	::soap_default_SER__executeSql_Response(soap, _p);
		_p->executeSqlResult = executeSqlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_Response(struct soap*, const struct SER__executeSql_Response *, const char*, const char*);

inline int soap_write_SER__executeSql_Response(struct soap *soap, struct SER__executeSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSql_Response(soap, p), 0) || ::soap_put_SER__executeSql_Response(soap, p, "SER:executeSql-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSql_Response(struct soap *soap, const char *URL, struct SER__executeSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_Response(soap, p), 0) || ::soap_put_SER__executeSql_Response(soap, p, "SER:executeSql-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSql_Response(struct soap *soap, const char *URL, struct SER__executeSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_Response(soap, p), 0) || ::soap_put_SER__executeSql_Response(soap, p, "SER:executeSql-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSql_Response(struct soap *soap, const char *URL, struct SER__executeSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_Response(soap, p), 0) || ::soap_put_SER__executeSql_Response(soap, p, "SER:executeSql-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSql_Response * SOAP_FMAC4 soap_get_SER__executeSql_Response(struct soap*, struct SER__executeSql_Response *, const char*, const char*);

inline int soap_read_SER__executeSql_Response(struct soap *soap, struct SER__executeSql_Response *p)
{
	if (p)
	{	::soap_default_SER__executeSql_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSql_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSql_Response(struct soap *soap, const char *URL, struct SER__executeSql_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSql_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSql_Response(struct soap *soap, struct SER__executeSql_Response *p)
{
	if (::soap_read_SER__executeSql_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__TestLinkSqlserver__DEFINED
#define SOAP_TYPE_SER__TestLinkSqlserver__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__TestLinkSqlserver_(struct soap*, struct SER__TestLinkSqlserver_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__TestLinkSqlserver_(struct soap*, const struct SER__TestLinkSqlserver_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__TestLinkSqlserver_(struct soap*, const char*, int, const struct SER__TestLinkSqlserver_ *, const char*);
SOAP_FMAC3 struct SER__TestLinkSqlserver_ * SOAP_FMAC4 soap_in_SER__TestLinkSqlserver_(struct soap*, const char*, struct SER__TestLinkSqlserver_ *, const char*);
SOAP_FMAC1 struct SER__TestLinkSqlserver_ * SOAP_FMAC2 soap_instantiate_SER__TestLinkSqlserver_(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__TestLinkSqlserver_ * soap_new_SER__TestLinkSqlserver_(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__TestLinkSqlserver_(soap, n, NULL, NULL, NULL);
}

inline struct SER__TestLinkSqlserver_ * soap_new_req_SER__TestLinkSqlserver_(
	struct soap *soap,
	const std::wstring& serverInfo)
{
	struct SER__TestLinkSqlserver_ *_p = ::soap_new_SER__TestLinkSqlserver_(soap);
	if (_p)
	{	::soap_default_SER__TestLinkSqlserver_(soap, _p);
		_p->serverInfo = serverInfo;
	}
	return _p;
}

inline struct SER__TestLinkSqlserver_ * soap_new_set_SER__TestLinkSqlserver_(
	struct soap *soap,
	const std::wstring& serverInfo)
{
	struct SER__TestLinkSqlserver_ *_p = ::soap_new_SER__TestLinkSqlserver_(soap);
	if (_p)
	{	::soap_default_SER__TestLinkSqlserver_(soap, _p);
		_p->serverInfo = serverInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__TestLinkSqlserver_(struct soap*, const struct SER__TestLinkSqlserver_ *, const char*, const char*);

inline int soap_write_SER__TestLinkSqlserver_(struct soap *soap, struct SER__TestLinkSqlserver_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__TestLinkSqlserver_(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver_(soap, p, "SER:TestLinkSqlserver", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__TestLinkSqlserver_(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserver_(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver_(soap, p, "SER:TestLinkSqlserver", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__TestLinkSqlserver_(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserver_(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver_(soap, p, "SER:TestLinkSqlserver", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__TestLinkSqlserver_(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserver_(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver_(soap, p, "SER:TestLinkSqlserver", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__TestLinkSqlserver_ * SOAP_FMAC4 soap_get_SER__TestLinkSqlserver_(struct soap*, struct SER__TestLinkSqlserver_ *, const char*, const char*);

inline int soap_read_SER__TestLinkSqlserver_(struct soap *soap, struct SER__TestLinkSqlserver_ *p)
{
	if (p)
	{	::soap_default_SER__TestLinkSqlserver_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__TestLinkSqlserver_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__TestLinkSqlserver_(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__TestLinkSqlserver_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__TestLinkSqlserver_(struct soap *soap, struct SER__TestLinkSqlserver_ *p)
{
	if (::soap_read_SER__TestLinkSqlserver_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__TestLinkSqlserver_Response_DEFINED
#define SOAP_TYPE_SER__TestLinkSqlserver_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__TestLinkSqlserver_Response(struct soap*, struct SER__TestLinkSqlserver_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__TestLinkSqlserver_Response(struct soap*, const struct SER__TestLinkSqlserver_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__TestLinkSqlserver_Response(struct soap*, const char*, int, const struct SER__TestLinkSqlserver_Response *, const char*);
SOAP_FMAC3 struct SER__TestLinkSqlserver_Response * SOAP_FMAC4 soap_in_SER__TestLinkSqlserver_Response(struct soap*, const char*, struct SER__TestLinkSqlserver_Response *, const char*);
SOAP_FMAC1 struct SER__TestLinkSqlserver_Response * SOAP_FMAC2 soap_instantiate_SER__TestLinkSqlserver_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__TestLinkSqlserver_Response * soap_new_SER__TestLinkSqlserver_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__TestLinkSqlserver_Response(soap, n, NULL, NULL, NULL);
}

inline struct SER__TestLinkSqlserver_Response * soap_new_req_SER__TestLinkSqlserver_Response(
	struct soap *soap,
	const std::wstring& TestLinkSqlserverResult)
{
	struct SER__TestLinkSqlserver_Response *_p = ::soap_new_SER__TestLinkSqlserver_Response(soap);
	if (_p)
	{	::soap_default_SER__TestLinkSqlserver_Response(soap, _p);
		_p->TestLinkSqlserverResult = TestLinkSqlserverResult;
	}
	return _p;
}

inline struct SER__TestLinkSqlserver_Response * soap_new_set_SER__TestLinkSqlserver_Response(
	struct soap *soap,
	const std::wstring& TestLinkSqlserverResult)
{
	struct SER__TestLinkSqlserver_Response *_p = ::soap_new_SER__TestLinkSqlserver_Response(soap);
	if (_p)
	{	::soap_default_SER__TestLinkSqlserver_Response(soap, _p);
		_p->TestLinkSqlserverResult = TestLinkSqlserverResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__TestLinkSqlserver_Response(struct soap*, const struct SER__TestLinkSqlserver_Response *, const char*, const char*);

inline int soap_write_SER__TestLinkSqlserver_Response(struct soap *soap, struct SER__TestLinkSqlserver_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__TestLinkSqlserver_Response(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver_Response(soap, p, "SER:TestLinkSqlserver-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__TestLinkSqlserver_Response(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserver_Response(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver_Response(soap, p, "SER:TestLinkSqlserver-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__TestLinkSqlserver_Response(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserver_Response(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver_Response(soap, p, "SER:TestLinkSqlserver-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__TestLinkSqlserver_Response(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserver_Response(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver_Response(soap, p, "SER:TestLinkSqlserver-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__TestLinkSqlserver_Response * SOAP_FMAC4 soap_get_SER__TestLinkSqlserver_Response(struct soap*, struct SER__TestLinkSqlserver_Response *, const char*, const char*);

inline int soap_read_SER__TestLinkSqlserver_Response(struct soap *soap, struct SER__TestLinkSqlserver_Response *p)
{
	if (p)
	{	::soap_default_SER__TestLinkSqlserver_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__TestLinkSqlserver_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__TestLinkSqlserver_Response(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__TestLinkSqlserver_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__TestLinkSqlserver_Response(struct soap *soap, struct SER__TestLinkSqlserver_Response *p)
{
	if (::soap_read_SER__TestLinkSqlserver_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__showExistLink__DEFINED
#define SOAP_TYPE_SER__showExistLink__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__showExistLink_(struct soap*, struct SER__showExistLink_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__showExistLink_(struct soap*, const struct SER__showExistLink_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__showExistLink_(struct soap*, const char*, int, const struct SER__showExistLink_ *, const char*);
SOAP_FMAC3 struct SER__showExistLink_ * SOAP_FMAC4 soap_in_SER__showExistLink_(struct soap*, const char*, struct SER__showExistLink_ *, const char*);
SOAP_FMAC1 struct SER__showExistLink_ * SOAP_FMAC2 soap_instantiate_SER__showExistLink_(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__showExistLink_ * soap_new_SER__showExistLink_(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__showExistLink_(soap, n, NULL, NULL, NULL);
}

inline struct SER__showExistLink_ * soap_new_req_SER__showExistLink_(
	struct soap *soap)
{
	struct SER__showExistLink_ *_p = ::soap_new_SER__showExistLink_(soap);
	if (_p)
	{	::soap_default_SER__showExistLink_(soap, _p);
	}
	return _p;
}

inline struct SER__showExistLink_ * soap_new_set_SER__showExistLink_(
	struct soap *soap)
{
	struct SER__showExistLink_ *_p = ::soap_new_SER__showExistLink_(soap);
	if (_p)
	{	::soap_default_SER__showExistLink_(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__showExistLink_(struct soap*, const struct SER__showExistLink_ *, const char*, const char*);

inline int soap_write_SER__showExistLink_(struct soap *soap, struct SER__showExistLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__showExistLink_(soap, p), 0) || ::soap_put_SER__showExistLink_(soap, p, "SER:showExistLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__showExistLink_(struct soap *soap, const char *URL, struct SER__showExistLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLink_(soap, p), 0) || ::soap_put_SER__showExistLink_(soap, p, "SER:showExistLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__showExistLink_(struct soap *soap, const char *URL, struct SER__showExistLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLink_(soap, p), 0) || ::soap_put_SER__showExistLink_(soap, p, "SER:showExistLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__showExistLink_(struct soap *soap, const char *URL, struct SER__showExistLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLink_(soap, p), 0) || ::soap_put_SER__showExistLink_(soap, p, "SER:showExistLink", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__showExistLink_ * SOAP_FMAC4 soap_get_SER__showExistLink_(struct soap*, struct SER__showExistLink_ *, const char*, const char*);

inline int soap_read_SER__showExistLink_(struct soap *soap, struct SER__showExistLink_ *p)
{
	if (p)
	{	::soap_default_SER__showExistLink_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__showExistLink_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__showExistLink_(struct soap *soap, const char *URL, struct SER__showExistLink_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__showExistLink_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__showExistLink_(struct soap *soap, struct SER__showExistLink_ *p)
{
	if (::soap_read_SER__showExistLink_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__showExistLink_Response_DEFINED
#define SOAP_TYPE_SER__showExistLink_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__showExistLink_Response(struct soap*, struct SER__showExistLink_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__showExistLink_Response(struct soap*, const struct SER__showExistLink_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__showExistLink_Response(struct soap*, const char*, int, const struct SER__showExistLink_Response *, const char*);
SOAP_FMAC3 struct SER__showExistLink_Response * SOAP_FMAC4 soap_in_SER__showExistLink_Response(struct soap*, const char*, struct SER__showExistLink_Response *, const char*);
SOAP_FMAC1 struct SER__showExistLink_Response * SOAP_FMAC2 soap_instantiate_SER__showExistLink_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__showExistLink_Response * soap_new_SER__showExistLink_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__showExistLink_Response(soap, n, NULL, NULL, NULL);
}

inline struct SER__showExistLink_Response * soap_new_req_SER__showExistLink_Response(
	struct soap *soap,
	const std::wstring& showExistLinkResult)
{
	struct SER__showExistLink_Response *_p = ::soap_new_SER__showExistLink_Response(soap);
	if (_p)
	{	::soap_default_SER__showExistLink_Response(soap, _p);
		_p->showExistLinkResult = showExistLinkResult;
	}
	return _p;
}

inline struct SER__showExistLink_Response * soap_new_set_SER__showExistLink_Response(
	struct soap *soap,
	const std::wstring& showExistLinkResult)
{
	struct SER__showExistLink_Response *_p = ::soap_new_SER__showExistLink_Response(soap);
	if (_p)
	{	::soap_default_SER__showExistLink_Response(soap, _p);
		_p->showExistLinkResult = showExistLinkResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__showExistLink_Response(struct soap*, const struct SER__showExistLink_Response *, const char*, const char*);

inline int soap_write_SER__showExistLink_Response(struct soap *soap, struct SER__showExistLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__showExistLink_Response(soap, p), 0) || ::soap_put_SER__showExistLink_Response(soap, p, "SER:showExistLink-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__showExistLink_Response(struct soap *soap, const char *URL, struct SER__showExistLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLink_Response(soap, p), 0) || ::soap_put_SER__showExistLink_Response(soap, p, "SER:showExistLink-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__showExistLink_Response(struct soap *soap, const char *URL, struct SER__showExistLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLink_Response(soap, p), 0) || ::soap_put_SER__showExistLink_Response(soap, p, "SER:showExistLink-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__showExistLink_Response(struct soap *soap, const char *URL, struct SER__showExistLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLink_Response(soap, p), 0) || ::soap_put_SER__showExistLink_Response(soap, p, "SER:showExistLink-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__showExistLink_Response * SOAP_FMAC4 soap_get_SER__showExistLink_Response(struct soap*, struct SER__showExistLink_Response *, const char*, const char*);

inline int soap_read_SER__showExistLink_Response(struct soap *soap, struct SER__showExistLink_Response *p)
{
	if (p)
	{	::soap_default_SER__showExistLink_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__showExistLink_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__showExistLink_Response(struct soap *soap, const char *URL, struct SER__showExistLink_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__showExistLink_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__showExistLink_Response(struct soap *soap, struct SER__showExistLink_Response *p)
{
	if (::soap_read_SER__showExistLink_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__clearLink__DEFINED
#define SOAP_TYPE_SER__clearLink__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__clearLink_(struct soap*, struct SER__clearLink_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__clearLink_(struct soap*, const struct SER__clearLink_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__clearLink_(struct soap*, const char*, int, const struct SER__clearLink_ *, const char*);
SOAP_FMAC3 struct SER__clearLink_ * SOAP_FMAC4 soap_in_SER__clearLink_(struct soap*, const char*, struct SER__clearLink_ *, const char*);
SOAP_FMAC1 struct SER__clearLink_ * SOAP_FMAC2 soap_instantiate_SER__clearLink_(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__clearLink_ * soap_new_SER__clearLink_(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__clearLink_(soap, n, NULL, NULL, NULL);
}

inline struct SER__clearLink_ * soap_new_req_SER__clearLink_(
	struct soap *soap,
	bool bTimeContrl)
{
	struct SER__clearLink_ *_p = ::soap_new_SER__clearLink_(soap);
	if (_p)
	{	::soap_default_SER__clearLink_(soap, _p);
		_p->bTimeContrl = bTimeContrl;
	}
	return _p;
}

inline struct SER__clearLink_ * soap_new_set_SER__clearLink_(
	struct soap *soap,
	bool bTimeContrl)
{
	struct SER__clearLink_ *_p = ::soap_new_SER__clearLink_(soap);
	if (_p)
	{	::soap_default_SER__clearLink_(soap, _p);
		_p->bTimeContrl = bTimeContrl;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__clearLink_(struct soap*, const struct SER__clearLink_ *, const char*, const char*);

inline int soap_write_SER__clearLink_(struct soap *soap, struct SER__clearLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__clearLink_(soap, p), 0) || ::soap_put_SER__clearLink_(soap, p, "SER:clearLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__clearLink_(struct soap *soap, const char *URL, struct SER__clearLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLink_(soap, p), 0) || ::soap_put_SER__clearLink_(soap, p, "SER:clearLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__clearLink_(struct soap *soap, const char *URL, struct SER__clearLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLink_(soap, p), 0) || ::soap_put_SER__clearLink_(soap, p, "SER:clearLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__clearLink_(struct soap *soap, const char *URL, struct SER__clearLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLink_(soap, p), 0) || ::soap_put_SER__clearLink_(soap, p, "SER:clearLink", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__clearLink_ * SOAP_FMAC4 soap_get_SER__clearLink_(struct soap*, struct SER__clearLink_ *, const char*, const char*);

inline int soap_read_SER__clearLink_(struct soap *soap, struct SER__clearLink_ *p)
{
	if (p)
	{	::soap_default_SER__clearLink_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__clearLink_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__clearLink_(struct soap *soap, const char *URL, struct SER__clearLink_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__clearLink_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__clearLink_(struct soap *soap, struct SER__clearLink_ *p)
{
	if (::soap_read_SER__clearLink_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__clearLink_Response_DEFINED
#define SOAP_TYPE_SER__clearLink_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__clearLink_Response(struct soap*, struct SER__clearLink_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__clearLink_Response(struct soap*, const struct SER__clearLink_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__clearLink_Response(struct soap*, const char*, int, const struct SER__clearLink_Response *, const char*);
SOAP_FMAC3 struct SER__clearLink_Response * SOAP_FMAC4 soap_in_SER__clearLink_Response(struct soap*, const char*, struct SER__clearLink_Response *, const char*);
SOAP_FMAC1 struct SER__clearLink_Response * SOAP_FMAC2 soap_instantiate_SER__clearLink_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__clearLink_Response * soap_new_SER__clearLink_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__clearLink_Response(soap, n, NULL, NULL, NULL);
}

inline struct SER__clearLink_Response * soap_new_req_SER__clearLink_Response(
	struct soap *soap,
	const std::wstring& clearLinkResult)
{
	struct SER__clearLink_Response *_p = ::soap_new_SER__clearLink_Response(soap);
	if (_p)
	{	::soap_default_SER__clearLink_Response(soap, _p);
		_p->clearLinkResult = clearLinkResult;
	}
	return _p;
}

inline struct SER__clearLink_Response * soap_new_set_SER__clearLink_Response(
	struct soap *soap,
	const std::wstring& clearLinkResult)
{
	struct SER__clearLink_Response *_p = ::soap_new_SER__clearLink_Response(soap);
	if (_p)
	{	::soap_default_SER__clearLink_Response(soap, _p);
		_p->clearLinkResult = clearLinkResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__clearLink_Response(struct soap*, const struct SER__clearLink_Response *, const char*, const char*);

inline int soap_write_SER__clearLink_Response(struct soap *soap, struct SER__clearLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__clearLink_Response(soap, p), 0) || ::soap_put_SER__clearLink_Response(soap, p, "SER:clearLink-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__clearLink_Response(struct soap *soap, const char *URL, struct SER__clearLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLink_Response(soap, p), 0) || ::soap_put_SER__clearLink_Response(soap, p, "SER:clearLink-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__clearLink_Response(struct soap *soap, const char *URL, struct SER__clearLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLink_Response(soap, p), 0) || ::soap_put_SER__clearLink_Response(soap, p, "SER:clearLink-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__clearLink_Response(struct soap *soap, const char *URL, struct SER__clearLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLink_Response(soap, p), 0) || ::soap_put_SER__clearLink_Response(soap, p, "SER:clearLink-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__clearLink_Response * SOAP_FMAC4 soap_get_SER__clearLink_Response(struct soap*, struct SER__clearLink_Response *, const char*, const char*);

inline int soap_read_SER__clearLink_Response(struct soap *soap, struct SER__clearLink_Response *p)
{
	if (p)
	{	::soap_default_SER__clearLink_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__clearLink_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__clearLink_Response(struct soap *soap, const char *URL, struct SER__clearLink_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__clearLink_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__clearLink_Response(struct soap *soap, struct SER__clearLink_Response *p)
{
	if (::soap_read_SER__clearLink_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__AddNumbers__DEFINED
#define SOAP_TYPE_SER__AddNumbers__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddNumbers_(struct soap*, struct SER__AddNumbers_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddNumbers_(struct soap*, const struct SER__AddNumbers_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddNumbers_(struct soap*, const char*, int, const struct SER__AddNumbers_ *, const char*);
SOAP_FMAC3 struct SER__AddNumbers_ * SOAP_FMAC4 soap_in_SER__AddNumbers_(struct soap*, const char*, struct SER__AddNumbers_ *, const char*);
SOAP_FMAC1 struct SER__AddNumbers_ * SOAP_FMAC2 soap_instantiate_SER__AddNumbers_(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__AddNumbers_ * soap_new_SER__AddNumbers_(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__AddNumbers_(soap, n, NULL, NULL, NULL);
}

inline struct SER__AddNumbers_ * soap_new_req_SER__AddNumbers_(
	struct soap *soap,
	int NumberOne,
	int NumberTwo)
{
	struct SER__AddNumbers_ *_p = ::soap_new_SER__AddNumbers_(soap);
	if (_p)
	{	::soap_default_SER__AddNumbers_(soap, _p);
		_p->NumberOne = NumberOne;
		_p->NumberTwo = NumberTwo;
	}
	return _p;
}

inline struct SER__AddNumbers_ * soap_new_set_SER__AddNumbers_(
	struct soap *soap,
	int NumberOne,
	int NumberTwo)
{
	struct SER__AddNumbers_ *_p = ::soap_new_SER__AddNumbers_(soap);
	if (_p)
	{	::soap_default_SER__AddNumbers_(soap, _p);
		_p->NumberOne = NumberOne;
		_p->NumberTwo = NumberTwo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddNumbers_(struct soap*, const struct SER__AddNumbers_ *, const char*, const char*);

inline int soap_write_SER__AddNumbers_(struct soap *soap, struct SER__AddNumbers_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__AddNumbers_(soap, p), 0) || ::soap_put_SER__AddNumbers_(soap, p, "SER:AddNumbers", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__AddNumbers_(struct soap *soap, const char *URL, struct SER__AddNumbers_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbers_(soap, p), 0) || ::soap_put_SER__AddNumbers_(soap, p, "SER:AddNumbers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__AddNumbers_(struct soap *soap, const char *URL, struct SER__AddNumbers_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbers_(soap, p), 0) || ::soap_put_SER__AddNumbers_(soap, p, "SER:AddNumbers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__AddNumbers_(struct soap *soap, const char *URL, struct SER__AddNumbers_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbers_(soap, p), 0) || ::soap_put_SER__AddNumbers_(soap, p, "SER:AddNumbers", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__AddNumbers_ * SOAP_FMAC4 soap_get_SER__AddNumbers_(struct soap*, struct SER__AddNumbers_ *, const char*, const char*);

inline int soap_read_SER__AddNumbers_(struct soap *soap, struct SER__AddNumbers_ *p)
{
	if (p)
	{	::soap_default_SER__AddNumbers_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__AddNumbers_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__AddNumbers_(struct soap *soap, const char *URL, struct SER__AddNumbers_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__AddNumbers_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__AddNumbers_(struct soap *soap, struct SER__AddNumbers_ *p)
{
	if (::soap_read_SER__AddNumbers_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__AddNumbers_Response_DEFINED
#define SOAP_TYPE_SER__AddNumbers_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddNumbers_Response(struct soap*, struct SER__AddNumbers_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddNumbers_Response(struct soap*, const struct SER__AddNumbers_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddNumbers_Response(struct soap*, const char*, int, const struct SER__AddNumbers_Response *, const char*);
SOAP_FMAC3 struct SER__AddNumbers_Response * SOAP_FMAC4 soap_in_SER__AddNumbers_Response(struct soap*, const char*, struct SER__AddNumbers_Response *, const char*);
SOAP_FMAC1 struct SER__AddNumbers_Response * SOAP_FMAC2 soap_instantiate_SER__AddNumbers_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__AddNumbers_Response * soap_new_SER__AddNumbers_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__AddNumbers_Response(soap, n, NULL, NULL, NULL);
}

inline struct SER__AddNumbers_Response * soap_new_req_SER__AddNumbers_Response(
	struct soap *soap,
	int AddNumbersResult)
{
	struct SER__AddNumbers_Response *_p = ::soap_new_SER__AddNumbers_Response(soap);
	if (_p)
	{	::soap_default_SER__AddNumbers_Response(soap, _p);
		_p->AddNumbersResult = AddNumbersResult;
	}
	return _p;
}

inline struct SER__AddNumbers_Response * soap_new_set_SER__AddNumbers_Response(
	struct soap *soap,
	int AddNumbersResult)
{
	struct SER__AddNumbers_Response *_p = ::soap_new_SER__AddNumbers_Response(soap);
	if (_p)
	{	::soap_default_SER__AddNumbers_Response(soap, _p);
		_p->AddNumbersResult = AddNumbersResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddNumbers_Response(struct soap*, const struct SER__AddNumbers_Response *, const char*, const char*);

inline int soap_write_SER__AddNumbers_Response(struct soap *soap, struct SER__AddNumbers_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__AddNumbers_Response(soap, p), 0) || ::soap_put_SER__AddNumbers_Response(soap, p, "SER:AddNumbers-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__AddNumbers_Response(struct soap *soap, const char *URL, struct SER__AddNumbers_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbers_Response(soap, p), 0) || ::soap_put_SER__AddNumbers_Response(soap, p, "SER:AddNumbers-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__AddNumbers_Response(struct soap *soap, const char *URL, struct SER__AddNumbers_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbers_Response(soap, p), 0) || ::soap_put_SER__AddNumbers_Response(soap, p, "SER:AddNumbers-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__AddNumbers_Response(struct soap *soap, const char *URL, struct SER__AddNumbers_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbers_Response(soap, p), 0) || ::soap_put_SER__AddNumbers_Response(soap, p, "SER:AddNumbers-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__AddNumbers_Response * SOAP_FMAC4 soap_get_SER__AddNumbers_Response(struct soap*, struct SER__AddNumbers_Response *, const char*, const char*);

inline int soap_read_SER__AddNumbers_Response(struct soap *soap, struct SER__AddNumbers_Response *p)
{
	if (p)
	{	::soap_default_SER__AddNumbers_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__AddNumbers_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__AddNumbers_Response(struct soap *soap, const char *URL, struct SER__AddNumbers_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__AddNumbers_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__AddNumbers_Response(struct soap *soap, struct SER__AddNumbers_Response *p)
{
	if (::soap_read_SER__AddNumbers_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__AddFileToSql_DEFINED
#define SOAP_TYPE_SER__AddFileToSql_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddFileToSql(struct soap*, struct SER__AddFileToSql *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddFileToSql(struct soap*, const struct SER__AddFileToSql *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddFileToSql(struct soap*, const char*, int, const struct SER__AddFileToSql *, const char*);
SOAP_FMAC3 struct SER__AddFileToSql * SOAP_FMAC4 soap_in_SER__AddFileToSql(struct soap*, const char*, struct SER__AddFileToSql *, const char*);
SOAP_FMAC1 struct SER__AddFileToSql * SOAP_FMAC2 soap_instantiate_SER__AddFileToSql(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__AddFileToSql * soap_new_SER__AddFileToSql(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__AddFileToSql(soap, n, NULL, NULL, NULL);
}

inline struct SER__AddFileToSql * soap_new_req_SER__AddFileToSql(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strFileName,
	const std::wstring& sPointer,
	const std::wstring& tablenamefieldname,
	const std::wstring& fileIP,
	const std::wstring& fileUse,
	const std::wstring& filePassword)
{
	struct SER__AddFileToSql *_p = ::soap_new_SER__AddFileToSql(soap);
	if (_p)
	{	::soap_default_SER__AddFileToSql(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strFileName = strFileName;
		_p->sPointer = sPointer;
		_p->tablenamefieldname = tablenamefieldname;
		_p->fileIP = fileIP;
		_p->fileUse = fileUse;
		_p->filePassword = filePassword;
	}
	return _p;
}

inline struct SER__AddFileToSql * soap_new_set_SER__AddFileToSql(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strFileName,
	const std::wstring& sPointer,
	const std::wstring& tablenamefieldname,
	const std::wstring& fileIP,
	const std::wstring& fileUse,
	const std::wstring& filePassword)
{
	struct SER__AddFileToSql *_p = ::soap_new_SER__AddFileToSql(soap);
	if (_p)
	{	::soap_default_SER__AddFileToSql(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strFileName = strFileName;
		_p->sPointer = sPointer;
		_p->tablenamefieldname = tablenamefieldname;
		_p->fileIP = fileIP;
		_p->fileUse = fileUse;
		_p->filePassword = filePassword;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddFileToSql(struct soap*, const struct SER__AddFileToSql *, const char*, const char*);

inline int soap_write_SER__AddFileToSql(struct soap *soap, struct SER__AddFileToSql const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__AddFileToSql(soap, p), 0) || ::soap_put_SER__AddFileToSql(soap, p, "SER:AddFileToSql", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__AddFileToSql(struct soap *soap, const char *URL, struct SER__AddFileToSql const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSql(soap, p), 0) || ::soap_put_SER__AddFileToSql(soap, p, "SER:AddFileToSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__AddFileToSql(struct soap *soap, const char *URL, struct SER__AddFileToSql const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSql(soap, p), 0) || ::soap_put_SER__AddFileToSql(soap, p, "SER:AddFileToSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__AddFileToSql(struct soap *soap, const char *URL, struct SER__AddFileToSql const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSql(soap, p), 0) || ::soap_put_SER__AddFileToSql(soap, p, "SER:AddFileToSql", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__AddFileToSql * SOAP_FMAC4 soap_get_SER__AddFileToSql(struct soap*, struct SER__AddFileToSql *, const char*, const char*);

inline int soap_read_SER__AddFileToSql(struct soap *soap, struct SER__AddFileToSql *p)
{
	if (p)
	{	::soap_default_SER__AddFileToSql(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__AddFileToSql(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__AddFileToSql(struct soap *soap, const char *URL, struct SER__AddFileToSql *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__AddFileToSql(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__AddFileToSql(struct soap *soap, struct SER__AddFileToSql *p)
{
	if (::soap_read_SER__AddFileToSql(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__AddFileToSqlResponse_DEFINED
#define SOAP_TYPE_SER__AddFileToSqlResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddFileToSqlResponse(struct soap*, struct SER__AddFileToSqlResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddFileToSqlResponse(struct soap*, const struct SER__AddFileToSqlResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddFileToSqlResponse(struct soap*, const char*, int, const struct SER__AddFileToSqlResponse *, const char*);
SOAP_FMAC3 struct SER__AddFileToSqlResponse * SOAP_FMAC4 soap_in_SER__AddFileToSqlResponse(struct soap*, const char*, struct SER__AddFileToSqlResponse *, const char*);
SOAP_FMAC1 struct SER__AddFileToSqlResponse * SOAP_FMAC2 soap_instantiate_SER__AddFileToSqlResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__AddFileToSqlResponse * soap_new_SER__AddFileToSqlResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__AddFileToSqlResponse(soap, n, NULL, NULL, NULL);
}

inline struct SER__AddFileToSqlResponse * soap_new_req_SER__AddFileToSqlResponse(
	struct soap *soap,
	const std::wstring& AddFileToSqlResult)
{
	struct SER__AddFileToSqlResponse *_p = ::soap_new_SER__AddFileToSqlResponse(soap);
	if (_p)
	{	::soap_default_SER__AddFileToSqlResponse(soap, _p);
		_p->AddFileToSqlResult = AddFileToSqlResult;
	}
	return _p;
}

inline struct SER__AddFileToSqlResponse * soap_new_set_SER__AddFileToSqlResponse(
	struct soap *soap,
	const std::wstring& AddFileToSqlResult)
{
	struct SER__AddFileToSqlResponse *_p = ::soap_new_SER__AddFileToSqlResponse(soap);
	if (_p)
	{	::soap_default_SER__AddFileToSqlResponse(soap, _p);
		_p->AddFileToSqlResult = AddFileToSqlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddFileToSqlResponse(struct soap*, const struct SER__AddFileToSqlResponse *, const char*, const char*);

inline int soap_write_SER__AddFileToSqlResponse(struct soap *soap, struct SER__AddFileToSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__AddFileToSqlResponse(soap, p), 0) || ::soap_put_SER__AddFileToSqlResponse(soap, p, "SER:AddFileToSqlResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__AddFileToSqlResponse(struct soap *soap, const char *URL, struct SER__AddFileToSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSqlResponse(soap, p), 0) || ::soap_put_SER__AddFileToSqlResponse(soap, p, "SER:AddFileToSqlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__AddFileToSqlResponse(struct soap *soap, const char *URL, struct SER__AddFileToSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSqlResponse(soap, p), 0) || ::soap_put_SER__AddFileToSqlResponse(soap, p, "SER:AddFileToSqlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__AddFileToSqlResponse(struct soap *soap, const char *URL, struct SER__AddFileToSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddFileToSqlResponse(soap, p), 0) || ::soap_put_SER__AddFileToSqlResponse(soap, p, "SER:AddFileToSqlResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__AddFileToSqlResponse * SOAP_FMAC4 soap_get_SER__AddFileToSqlResponse(struct soap*, struct SER__AddFileToSqlResponse *, const char*, const char*);

inline int soap_read_SER__AddFileToSqlResponse(struct soap *soap, struct SER__AddFileToSqlResponse *p)
{
	if (p)
	{	::soap_default_SER__AddFileToSqlResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__AddFileToSqlResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__AddFileToSqlResponse(struct soap *soap, const char *URL, struct SER__AddFileToSqlResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__AddFileToSqlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__AddFileToSqlResponse(struct soap *soap, struct SER__AddFileToSqlResponse *p)
{
	if (::soap_read_SER__AddFileToSqlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeStorageProcess_DEFINED
#define SOAP_TYPE_SER__executeStorageProcess_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeStorageProcess(struct soap*, struct SER__executeStorageProcess *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeStorageProcess(struct soap*, const struct SER__executeStorageProcess *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeStorageProcess(struct soap*, const char*, int, const struct SER__executeStorageProcess *, const char*);
SOAP_FMAC3 struct SER__executeStorageProcess * SOAP_FMAC4 soap_in_SER__executeStorageProcess(struct soap*, const char*, struct SER__executeStorageProcess *, const char*);
SOAP_FMAC1 struct SER__executeStorageProcess * SOAP_FMAC2 soap_instantiate_SER__executeStorageProcess(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeStorageProcess * soap_new_SER__executeStorageProcess(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeStorageProcess(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeStorageProcess * soap_new_req_SER__executeStorageProcess(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& StorageProcessName,
	const std::wstring& Parameters)
{
	struct SER__executeStorageProcess *_p = ::soap_new_SER__executeStorageProcess(soap);
	if (_p)
	{	::soap_default_SER__executeStorageProcess(soap, _p);
		_p->serverInfo = serverInfo;
		_p->StorageProcessName = StorageProcessName;
		_p->Parameters = Parameters;
	}
	return _p;
}

inline struct SER__executeStorageProcess * soap_new_set_SER__executeStorageProcess(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& StorageProcessName,
	const std::wstring& Parameters)
{
	struct SER__executeStorageProcess *_p = ::soap_new_SER__executeStorageProcess(soap);
	if (_p)
	{	::soap_default_SER__executeStorageProcess(soap, _p);
		_p->serverInfo = serverInfo;
		_p->StorageProcessName = StorageProcessName;
		_p->Parameters = Parameters;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeStorageProcess(struct soap*, const struct SER__executeStorageProcess *, const char*, const char*);

inline int soap_write_SER__executeStorageProcess(struct soap *soap, struct SER__executeStorageProcess const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeStorageProcess(soap, p), 0) || ::soap_put_SER__executeStorageProcess(soap, p, "SER:executeStorageProcess", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeStorageProcess(struct soap *soap, const char *URL, struct SER__executeStorageProcess const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcess(soap, p), 0) || ::soap_put_SER__executeStorageProcess(soap, p, "SER:executeStorageProcess", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeStorageProcess(struct soap *soap, const char *URL, struct SER__executeStorageProcess const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcess(soap, p), 0) || ::soap_put_SER__executeStorageProcess(soap, p, "SER:executeStorageProcess", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeStorageProcess(struct soap *soap, const char *URL, struct SER__executeStorageProcess const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcess(soap, p), 0) || ::soap_put_SER__executeStorageProcess(soap, p, "SER:executeStorageProcess", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeStorageProcess * SOAP_FMAC4 soap_get_SER__executeStorageProcess(struct soap*, struct SER__executeStorageProcess *, const char*, const char*);

inline int soap_read_SER__executeStorageProcess(struct soap *soap, struct SER__executeStorageProcess *p)
{
	if (p)
	{	::soap_default_SER__executeStorageProcess(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeStorageProcess(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeStorageProcess(struct soap *soap, const char *URL, struct SER__executeStorageProcess *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeStorageProcess(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeStorageProcess(struct soap *soap, struct SER__executeStorageProcess *p)
{
	if (::soap_read_SER__executeStorageProcess(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeStorageProcessResponse_DEFINED
#define SOAP_TYPE_SER__executeStorageProcessResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeStorageProcessResponse(struct soap*, struct SER__executeStorageProcessResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeStorageProcessResponse(struct soap*, const struct SER__executeStorageProcessResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeStorageProcessResponse(struct soap*, const char*, int, const struct SER__executeStorageProcessResponse *, const char*);
SOAP_FMAC3 struct SER__executeStorageProcessResponse * SOAP_FMAC4 soap_in_SER__executeStorageProcessResponse(struct soap*, const char*, struct SER__executeStorageProcessResponse *, const char*);
SOAP_FMAC1 struct SER__executeStorageProcessResponse * SOAP_FMAC2 soap_instantiate_SER__executeStorageProcessResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeStorageProcessResponse * soap_new_SER__executeStorageProcessResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeStorageProcessResponse(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeStorageProcessResponse * soap_new_req_SER__executeStorageProcessResponse(
	struct soap *soap,
	const std::wstring& executeStorageProcessResult)
{
	struct SER__executeStorageProcessResponse *_p = ::soap_new_SER__executeStorageProcessResponse(soap);
	if (_p)
	{	::soap_default_SER__executeStorageProcessResponse(soap, _p);
		_p->executeStorageProcessResult = executeStorageProcessResult;
	}
	return _p;
}

inline struct SER__executeStorageProcessResponse * soap_new_set_SER__executeStorageProcessResponse(
	struct soap *soap,
	const std::wstring& executeStorageProcessResult)
{
	struct SER__executeStorageProcessResponse *_p = ::soap_new_SER__executeStorageProcessResponse(soap);
	if (_p)
	{	::soap_default_SER__executeStorageProcessResponse(soap, _p);
		_p->executeStorageProcessResult = executeStorageProcessResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeStorageProcessResponse(struct soap*, const struct SER__executeStorageProcessResponse *, const char*, const char*);

inline int soap_write_SER__executeStorageProcessResponse(struct soap *soap, struct SER__executeStorageProcessResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeStorageProcessResponse(soap, p), 0) || ::soap_put_SER__executeStorageProcessResponse(soap, p, "SER:executeStorageProcessResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeStorageProcessResponse(struct soap *soap, const char *URL, struct SER__executeStorageProcessResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcessResponse(soap, p), 0) || ::soap_put_SER__executeStorageProcessResponse(soap, p, "SER:executeStorageProcessResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeStorageProcessResponse(struct soap *soap, const char *URL, struct SER__executeStorageProcessResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcessResponse(soap, p), 0) || ::soap_put_SER__executeStorageProcessResponse(soap, p, "SER:executeStorageProcessResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeStorageProcessResponse(struct soap *soap, const char *URL, struct SER__executeStorageProcessResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeStorageProcessResponse(soap, p), 0) || ::soap_put_SER__executeStorageProcessResponse(soap, p, "SER:executeStorageProcessResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeStorageProcessResponse * SOAP_FMAC4 soap_get_SER__executeStorageProcessResponse(struct soap*, struct SER__executeStorageProcessResponse *, const char*, const char*);

inline int soap_read_SER__executeStorageProcessResponse(struct soap *soap, struct SER__executeStorageProcessResponse *p)
{
	if (p)
	{	::soap_default_SER__executeStorageProcessResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeStorageProcessResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeStorageProcessResponse(struct soap *soap, const char *URL, struct SER__executeStorageProcessResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeStorageProcessResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeStorageProcessResponse(struct soap *soap, struct SER__executeStorageProcessResponse *p)
{
	if (::soap_read_SER__executeStorageProcessResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__insertXml_DEFINED
#define SOAP_TYPE_SER__insertXml_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__insertXml(struct soap*, struct SER__insertXml *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__insertXml(struct soap*, const struct SER__insertXml *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__insertXml(struct soap*, const char*, int, const struct SER__insertXml *, const char*);
SOAP_FMAC3 struct SER__insertXml * SOAP_FMAC4 soap_in_SER__insertXml(struct soap*, const char*, struct SER__insertXml *, const char*);
SOAP_FMAC1 struct SER__insertXml * SOAP_FMAC2 soap_instantiate_SER__insertXml(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__insertXml * soap_new_SER__insertXml(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__insertXml(soap, n, NULL, NULL, NULL);
}

inline struct SER__insertXml * soap_new_req_SER__insertXml(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strXml,
	bool encode)
{
	struct SER__insertXml *_p = ::soap_new_SER__insertXml(soap);
	if (_p)
	{	::soap_default_SER__insertXml(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strXml = strXml;
		_p->encode = encode;
	}
	return _p;
}

inline struct SER__insertXml * soap_new_set_SER__insertXml(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strXml,
	bool encode)
{
	struct SER__insertXml *_p = ::soap_new_SER__insertXml(soap);
	if (_p)
	{	::soap_default_SER__insertXml(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strXml = strXml;
		_p->encode = encode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__insertXml(struct soap*, const struct SER__insertXml *, const char*, const char*);

inline int soap_write_SER__insertXml(struct soap *soap, struct SER__insertXml const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__insertXml(soap, p), 0) || ::soap_put_SER__insertXml(soap, p, "SER:insertXml", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__insertXml(struct soap *soap, const char *URL, struct SER__insertXml const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXml(soap, p), 0) || ::soap_put_SER__insertXml(soap, p, "SER:insertXml", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__insertXml(struct soap *soap, const char *URL, struct SER__insertXml const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXml(soap, p), 0) || ::soap_put_SER__insertXml(soap, p, "SER:insertXml", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__insertXml(struct soap *soap, const char *URL, struct SER__insertXml const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXml(soap, p), 0) || ::soap_put_SER__insertXml(soap, p, "SER:insertXml", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__insertXml * SOAP_FMAC4 soap_get_SER__insertXml(struct soap*, struct SER__insertXml *, const char*, const char*);

inline int soap_read_SER__insertXml(struct soap *soap, struct SER__insertXml *p)
{
	if (p)
	{	::soap_default_SER__insertXml(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__insertXml(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__insertXml(struct soap *soap, const char *URL, struct SER__insertXml *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__insertXml(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__insertXml(struct soap *soap, struct SER__insertXml *p)
{
	if (::soap_read_SER__insertXml(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__insertXmlResponse_DEFINED
#define SOAP_TYPE_SER__insertXmlResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__insertXmlResponse(struct soap*, struct SER__insertXmlResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__insertXmlResponse(struct soap*, const struct SER__insertXmlResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__insertXmlResponse(struct soap*, const char*, int, const struct SER__insertXmlResponse *, const char*);
SOAP_FMAC3 struct SER__insertXmlResponse * SOAP_FMAC4 soap_in_SER__insertXmlResponse(struct soap*, const char*, struct SER__insertXmlResponse *, const char*);
SOAP_FMAC1 struct SER__insertXmlResponse * SOAP_FMAC2 soap_instantiate_SER__insertXmlResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__insertXmlResponse * soap_new_SER__insertXmlResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__insertXmlResponse(soap, n, NULL, NULL, NULL);
}

inline struct SER__insertXmlResponse * soap_new_req_SER__insertXmlResponse(
	struct soap *soap,
	const std::wstring& insertXmlResult)
{
	struct SER__insertXmlResponse *_p = ::soap_new_SER__insertXmlResponse(soap);
	if (_p)
	{	::soap_default_SER__insertXmlResponse(soap, _p);
		_p->insertXmlResult = insertXmlResult;
	}
	return _p;
}

inline struct SER__insertXmlResponse * soap_new_set_SER__insertXmlResponse(
	struct soap *soap,
	const std::wstring& insertXmlResult)
{
	struct SER__insertXmlResponse *_p = ::soap_new_SER__insertXmlResponse(soap);
	if (_p)
	{	::soap_default_SER__insertXmlResponse(soap, _p);
		_p->insertXmlResult = insertXmlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__insertXmlResponse(struct soap*, const struct SER__insertXmlResponse *, const char*, const char*);

inline int soap_write_SER__insertXmlResponse(struct soap *soap, struct SER__insertXmlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__insertXmlResponse(soap, p), 0) || ::soap_put_SER__insertXmlResponse(soap, p, "SER:insertXmlResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__insertXmlResponse(struct soap *soap, const char *URL, struct SER__insertXmlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXmlResponse(soap, p), 0) || ::soap_put_SER__insertXmlResponse(soap, p, "SER:insertXmlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__insertXmlResponse(struct soap *soap, const char *URL, struct SER__insertXmlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXmlResponse(soap, p), 0) || ::soap_put_SER__insertXmlResponse(soap, p, "SER:insertXmlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__insertXmlResponse(struct soap *soap, const char *URL, struct SER__insertXmlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__insertXmlResponse(soap, p), 0) || ::soap_put_SER__insertXmlResponse(soap, p, "SER:insertXmlResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__insertXmlResponse * SOAP_FMAC4 soap_get_SER__insertXmlResponse(struct soap*, struct SER__insertXmlResponse *, const char*, const char*);

inline int soap_read_SER__insertXmlResponse(struct soap *soap, struct SER__insertXmlResponse *p)
{
	if (p)
	{	::soap_default_SER__insertXmlResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__insertXmlResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__insertXmlResponse(struct soap *soap, const char *URL, struct SER__insertXmlResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__insertXmlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__insertXmlResponse(struct soap *soap, struct SER__insertXmlResponse *p)
{
	if (::soap_read_SER__insertXmlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSql_USCOREencode_DEFINED
#define SOAP_TYPE_SER__executeSql_USCOREencode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREencode(struct soap*, struct SER__executeSql_USCOREencode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREencode(struct soap*, const struct SER__executeSql_USCOREencode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREencode(struct soap*, const char*, int, const struct SER__executeSql_USCOREencode *, const char*);
SOAP_FMAC3 struct SER__executeSql_USCOREencode * SOAP_FMAC4 soap_in_SER__executeSql_USCOREencode(struct soap*, const char*, struct SER__executeSql_USCOREencode *, const char*);
SOAP_FMAC1 struct SER__executeSql_USCOREencode * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREencode(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSql_USCOREencode * soap_new_SER__executeSql_USCOREencode(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSql_USCOREencode(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSql_USCOREencode * soap_new_req_SER__executeSql_USCOREencode(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql_USCOREencode *_p = ::soap_new_SER__executeSql_USCOREencode(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREencode(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct SER__executeSql_USCOREencode * soap_new_set_SER__executeSql_USCOREencode(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql_USCOREencode *_p = ::soap_new_SER__executeSql_USCOREencode(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREencode(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREencode(struct soap*, const struct SER__executeSql_USCOREencode *, const char*, const char*);

inline int soap_write_SER__executeSql_USCOREencode(struct soap *soap, struct SER__executeSql_USCOREencode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSql_USCOREencode(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode(soap, p, "SER:executeSql_encode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSql_USCOREencode(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencode(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode(soap, p, "SER:executeSql_encode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSql_USCOREencode(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencode(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode(soap, p, "SER:executeSql_encode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSql_USCOREencode(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencode(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencode(soap, p, "SER:executeSql_encode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSql_USCOREencode * SOAP_FMAC4 soap_get_SER__executeSql_USCOREencode(struct soap*, struct SER__executeSql_USCOREencode *, const char*, const char*);

inline int soap_read_SER__executeSql_USCOREencode(struct soap *soap, struct SER__executeSql_USCOREencode *p)
{
	if (p)
	{	::soap_default_SER__executeSql_USCOREencode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSql_USCOREencode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSql_USCOREencode(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSql_USCOREencode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSql_USCOREencode(struct soap *soap, struct SER__executeSql_USCOREencode *p)
{
	if (::soap_read_SER__executeSql_USCOREencode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSql_USCOREencodeResponse_DEFINED
#define SOAP_TYPE_SER__executeSql_USCOREencodeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREencodeResponse(struct soap*, struct SER__executeSql_USCOREencodeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREencodeResponse(struct soap*, const struct SER__executeSql_USCOREencodeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREencodeResponse(struct soap*, const char*, int, const struct SER__executeSql_USCOREencodeResponse *, const char*);
SOAP_FMAC3 struct SER__executeSql_USCOREencodeResponse * SOAP_FMAC4 soap_in_SER__executeSql_USCOREencodeResponse(struct soap*, const char*, struct SER__executeSql_USCOREencodeResponse *, const char*);
SOAP_FMAC1 struct SER__executeSql_USCOREencodeResponse * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREencodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSql_USCOREencodeResponse * soap_new_SER__executeSql_USCOREencodeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSql_USCOREencodeResponse(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSql_USCOREencodeResponse * soap_new_req_SER__executeSql_USCOREencodeResponse(
	struct soap *soap,
	const std::wstring& executeSql_USCOREencodeResult)
{
	struct SER__executeSql_USCOREencodeResponse *_p = ::soap_new_SER__executeSql_USCOREencodeResponse(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREencodeResponse(soap, _p);
		_p->executeSql_USCOREencodeResult = executeSql_USCOREencodeResult;
	}
	return _p;
}

inline struct SER__executeSql_USCOREencodeResponse * soap_new_set_SER__executeSql_USCOREencodeResponse(
	struct soap *soap,
	const std::wstring& executeSql_USCOREencodeResult)
{
	struct SER__executeSql_USCOREencodeResponse *_p = ::soap_new_SER__executeSql_USCOREencodeResponse(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREencodeResponse(soap, _p);
		_p->executeSql_USCOREencodeResult = executeSql_USCOREencodeResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREencodeResponse(struct soap*, const struct SER__executeSql_USCOREencodeResponse *, const char*, const char*);

inline int soap_write_SER__executeSql_USCOREencodeResponse(struct soap *soap, struct SER__executeSql_USCOREencodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSql_USCOREencodeResponse(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencodeResponse(soap, p, "SER:executeSql_encodeResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSql_USCOREencodeResponse(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencodeResponse(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencodeResponse(soap, p, "SER:executeSql_encodeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSql_USCOREencodeResponse(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencodeResponse(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencodeResponse(soap, p, "SER:executeSql_encodeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSql_USCOREencodeResponse(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREencodeResponse(soap, p), 0) || ::soap_put_SER__executeSql_USCOREencodeResponse(soap, p, "SER:executeSql_encodeResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSql_USCOREencodeResponse * SOAP_FMAC4 soap_get_SER__executeSql_USCOREencodeResponse(struct soap*, struct SER__executeSql_USCOREencodeResponse *, const char*, const char*);

inline int soap_read_SER__executeSql_USCOREencodeResponse(struct soap *soap, struct SER__executeSql_USCOREencodeResponse *p)
{
	if (p)
	{	::soap_default_SER__executeSql_USCOREencodeResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSql_USCOREencodeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSql_USCOREencodeResponse(struct soap *soap, const char *URL, struct SER__executeSql_USCOREencodeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSql_USCOREencodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSql_USCOREencodeResponse(struct soap *soap, struct SER__executeSql_USCOREencodeResponse *p)
{
	if (::soap_read_SER__executeSql_USCOREencodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSql_USCOREbackEncord_DEFINED
#define SOAP_TYPE_SER__executeSql_USCOREbackEncord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREbackEncord(struct soap*, struct SER__executeSql_USCOREbackEncord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREbackEncord(struct soap*, const struct SER__executeSql_USCOREbackEncord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREbackEncord(struct soap*, const char*, int, const struct SER__executeSql_USCOREbackEncord *, const char*);
SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord * SOAP_FMAC4 soap_in_SER__executeSql_USCOREbackEncord(struct soap*, const char*, struct SER__executeSql_USCOREbackEncord *, const char*);
SOAP_FMAC1 struct SER__executeSql_USCOREbackEncord * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREbackEncord(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSql_USCOREbackEncord * soap_new_SER__executeSql_USCOREbackEncord(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSql_USCOREbackEncord(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSql_USCOREbackEncord * soap_new_req_SER__executeSql_USCOREbackEncord(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql_USCOREbackEncord *_p = ::soap_new_SER__executeSql_USCOREbackEncord(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREbackEncord(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct SER__executeSql_USCOREbackEncord * soap_new_set_SER__executeSql_USCOREbackEncord(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql_USCOREbackEncord *_p = ::soap_new_SER__executeSql_USCOREbackEncord(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREbackEncord(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREbackEncord(struct soap*, const struct SER__executeSql_USCOREbackEncord *, const char*, const char*);

inline int soap_write_SER__executeSql_USCOREbackEncord(struct soap *soap, struct SER__executeSql_USCOREbackEncord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSql_USCOREbackEncord(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord(soap, p, "SER:executeSql_backEncord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSql_USCOREbackEncord(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncord(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord(soap, p, "SER:executeSql_backEncord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSql_USCOREbackEncord(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncord(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord(soap, p, "SER:executeSql_backEncord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSql_USCOREbackEncord(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncord(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncord(soap, p, "SER:executeSql_backEncord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSql_USCOREbackEncord * SOAP_FMAC4 soap_get_SER__executeSql_USCOREbackEncord(struct soap*, struct SER__executeSql_USCOREbackEncord *, const char*, const char*);

inline int soap_read_SER__executeSql_USCOREbackEncord(struct soap *soap, struct SER__executeSql_USCOREbackEncord *p)
{
	if (p)
	{	::soap_default_SER__executeSql_USCOREbackEncord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSql_USCOREbackEncord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSql_USCOREbackEncord(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSql_USCOREbackEncord(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSql_USCOREbackEncord(struct soap *soap, struct SER__executeSql_USCOREbackEncord *p)
{
	if (::soap_read_SER__executeSql_USCOREbackEncord(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse_DEFINED
#define SOAP_TYPE_SER__executeSql_USCOREbackEncordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql_USCOREbackEncordResponse(struct soap*, struct SER__executeSql_USCOREbackEncordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql_USCOREbackEncordResponse(struct soap*, const struct SER__executeSql_USCOREbackEncordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql_USCOREbackEncordResponse(struct soap*, const char*, int, const struct SER__executeSql_USCOREbackEncordResponse *, const char*);
SOAP_FMAC3 struct SER__executeSql_USCOREbackEncordResponse * SOAP_FMAC4 soap_in_SER__executeSql_USCOREbackEncordResponse(struct soap*, const char*, struct SER__executeSql_USCOREbackEncordResponse *, const char*);
SOAP_FMAC1 struct SER__executeSql_USCOREbackEncordResponse * SOAP_FMAC2 soap_instantiate_SER__executeSql_USCOREbackEncordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSql_USCOREbackEncordResponse * soap_new_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSql_USCOREbackEncordResponse(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSql_USCOREbackEncordResponse * soap_new_req_SER__executeSql_USCOREbackEncordResponse(
	struct soap *soap,
	const std::wstring& executeSql_USCOREbackEncordResult)
{
	struct SER__executeSql_USCOREbackEncordResponse *_p = ::soap_new_SER__executeSql_USCOREbackEncordResponse(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREbackEncordResponse(soap, _p);
		_p->executeSql_USCOREbackEncordResult = executeSql_USCOREbackEncordResult;
	}
	return _p;
}

inline struct SER__executeSql_USCOREbackEncordResponse * soap_new_set_SER__executeSql_USCOREbackEncordResponse(
	struct soap *soap,
	const std::wstring& executeSql_USCOREbackEncordResult)
{
	struct SER__executeSql_USCOREbackEncordResponse *_p = ::soap_new_SER__executeSql_USCOREbackEncordResponse(soap);
	if (_p)
	{	::soap_default_SER__executeSql_USCOREbackEncordResponse(soap, _p);
		_p->executeSql_USCOREbackEncordResult = executeSql_USCOREbackEncordResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql_USCOREbackEncordResponse(struct soap*, const struct SER__executeSql_USCOREbackEncordResponse *, const char*, const char*);

inline int soap_write_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, struct SER__executeSql_USCOREbackEncordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSql_USCOREbackEncordResponse(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncordResponse(soap, p, "SER:executeSql_backEncordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncordResponse(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncordResponse(soap, p, "SER:executeSql_backEncordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncordResponse(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncordResponse(soap, p, "SER:executeSql_backEncordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql_USCOREbackEncordResponse(soap, p), 0) || ::soap_put_SER__executeSql_USCOREbackEncordResponse(soap, p, "SER:executeSql_backEncordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSql_USCOREbackEncordResponse * SOAP_FMAC4 soap_get_SER__executeSql_USCOREbackEncordResponse(struct soap*, struct SER__executeSql_USCOREbackEncordResponse *, const char*, const char*);

inline int soap_read_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, struct SER__executeSql_USCOREbackEncordResponse *p)
{
	if (p)
	{	::soap_default_SER__executeSql_USCOREbackEncordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSql_USCOREbackEncordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *URL, struct SER__executeSql_USCOREbackEncordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSql_USCOREbackEncordResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSql_USCOREbackEncordResponse(struct soap *soap, struct SER__executeSql_USCOREbackEncordResponse *p)
{
	if (::soap_read_SER__executeSql_USCOREbackEncordResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSql_DEFINED
#define SOAP_TYPE_SER__executeSql_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSql(struct soap*, struct SER__executeSql *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSql(struct soap*, const struct SER__executeSql *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSql(struct soap*, const char*, int, const struct SER__executeSql *, const char*);
SOAP_FMAC3 struct SER__executeSql * SOAP_FMAC4 soap_in_SER__executeSql(struct soap*, const char*, struct SER__executeSql *, const char*);
SOAP_FMAC1 struct SER__executeSql * SOAP_FMAC2 soap_instantiate_SER__executeSql(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSql * soap_new_SER__executeSql(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSql(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSql * soap_new_req_SER__executeSql(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql *_p = ::soap_new_SER__executeSql(soap);
	if (_p)
	{	::soap_default_SER__executeSql(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct SER__executeSql * soap_new_set_SER__executeSql(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct SER__executeSql *_p = ::soap_new_SER__executeSql(soap);
	if (_p)
	{	::soap_default_SER__executeSql(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSql(struct soap*, const struct SER__executeSql *, const char*, const char*);

inline int soap_write_SER__executeSql(struct soap *soap, struct SER__executeSql const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSql(soap, p), 0) || ::soap_put_SER__executeSql(soap, p, "SER:executeSql", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSql(struct soap *soap, const char *URL, struct SER__executeSql const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql(soap, p), 0) || ::soap_put_SER__executeSql(soap, p, "SER:executeSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSql(struct soap *soap, const char *URL, struct SER__executeSql const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql(soap, p), 0) || ::soap_put_SER__executeSql(soap, p, "SER:executeSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSql(struct soap *soap, const char *URL, struct SER__executeSql const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSql(soap, p), 0) || ::soap_put_SER__executeSql(soap, p, "SER:executeSql", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSql * SOAP_FMAC4 soap_get_SER__executeSql(struct soap*, struct SER__executeSql *, const char*, const char*);

inline int soap_read_SER__executeSql(struct soap *soap, struct SER__executeSql *p)
{
	if (p)
	{	::soap_default_SER__executeSql(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSql(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSql(struct soap *soap, const char *URL, struct SER__executeSql *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSql(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSql(struct soap *soap, struct SER__executeSql *p)
{
	if (::soap_read_SER__executeSql(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__executeSqlResponse_DEFINED
#define SOAP_TYPE_SER__executeSqlResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__executeSqlResponse(struct soap*, struct SER__executeSqlResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__executeSqlResponse(struct soap*, const struct SER__executeSqlResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__executeSqlResponse(struct soap*, const char*, int, const struct SER__executeSqlResponse *, const char*);
SOAP_FMAC3 struct SER__executeSqlResponse * SOAP_FMAC4 soap_in_SER__executeSqlResponse(struct soap*, const char*, struct SER__executeSqlResponse *, const char*);
SOAP_FMAC1 struct SER__executeSqlResponse * SOAP_FMAC2 soap_instantiate_SER__executeSqlResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__executeSqlResponse * soap_new_SER__executeSqlResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__executeSqlResponse(soap, n, NULL, NULL, NULL);
}

inline struct SER__executeSqlResponse * soap_new_req_SER__executeSqlResponse(
	struct soap *soap,
	const std::wstring& executeSqlResult)
{
	struct SER__executeSqlResponse *_p = ::soap_new_SER__executeSqlResponse(soap);
	if (_p)
	{	::soap_default_SER__executeSqlResponse(soap, _p);
		_p->executeSqlResult = executeSqlResult;
	}
	return _p;
}

inline struct SER__executeSqlResponse * soap_new_set_SER__executeSqlResponse(
	struct soap *soap,
	const std::wstring& executeSqlResult)
{
	struct SER__executeSqlResponse *_p = ::soap_new_SER__executeSqlResponse(soap);
	if (_p)
	{	::soap_default_SER__executeSqlResponse(soap, _p);
		_p->executeSqlResult = executeSqlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__executeSqlResponse(struct soap*, const struct SER__executeSqlResponse *, const char*, const char*);

inline int soap_write_SER__executeSqlResponse(struct soap *soap, struct SER__executeSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__executeSqlResponse(soap, p), 0) || ::soap_put_SER__executeSqlResponse(soap, p, "SER:executeSqlResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__executeSqlResponse(struct soap *soap, const char *URL, struct SER__executeSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSqlResponse(soap, p), 0) || ::soap_put_SER__executeSqlResponse(soap, p, "SER:executeSqlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__executeSqlResponse(struct soap *soap, const char *URL, struct SER__executeSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSqlResponse(soap, p), 0) || ::soap_put_SER__executeSqlResponse(soap, p, "SER:executeSqlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__executeSqlResponse(struct soap *soap, const char *URL, struct SER__executeSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__executeSqlResponse(soap, p), 0) || ::soap_put_SER__executeSqlResponse(soap, p, "SER:executeSqlResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__executeSqlResponse * SOAP_FMAC4 soap_get_SER__executeSqlResponse(struct soap*, struct SER__executeSqlResponse *, const char*, const char*);

inline int soap_read_SER__executeSqlResponse(struct soap *soap, struct SER__executeSqlResponse *p)
{
	if (p)
	{	::soap_default_SER__executeSqlResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__executeSqlResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__executeSqlResponse(struct soap *soap, const char *URL, struct SER__executeSqlResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__executeSqlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__executeSqlResponse(struct soap *soap, struct SER__executeSqlResponse *p)
{
	if (::soap_read_SER__executeSqlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__TestLinkSqlserver_DEFINED
#define SOAP_TYPE_SER__TestLinkSqlserver_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__TestLinkSqlserver(struct soap*, struct SER__TestLinkSqlserver *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__TestLinkSqlserver(struct soap*, const struct SER__TestLinkSqlserver *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__TestLinkSqlserver(struct soap*, const char*, int, const struct SER__TestLinkSqlserver *, const char*);
SOAP_FMAC3 struct SER__TestLinkSqlserver * SOAP_FMAC4 soap_in_SER__TestLinkSqlserver(struct soap*, const char*, struct SER__TestLinkSqlserver *, const char*);
SOAP_FMAC1 struct SER__TestLinkSqlserver * SOAP_FMAC2 soap_instantiate_SER__TestLinkSqlserver(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__TestLinkSqlserver * soap_new_SER__TestLinkSqlserver(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__TestLinkSqlserver(soap, n, NULL, NULL, NULL);
}

inline struct SER__TestLinkSqlserver * soap_new_req_SER__TestLinkSqlserver(
	struct soap *soap,
	const std::wstring& serverInfo)
{
	struct SER__TestLinkSqlserver *_p = ::soap_new_SER__TestLinkSqlserver(soap);
	if (_p)
	{	::soap_default_SER__TestLinkSqlserver(soap, _p);
		_p->serverInfo = serverInfo;
	}
	return _p;
}

inline struct SER__TestLinkSqlserver * soap_new_set_SER__TestLinkSqlserver(
	struct soap *soap,
	const std::wstring& serverInfo)
{
	struct SER__TestLinkSqlserver *_p = ::soap_new_SER__TestLinkSqlserver(soap);
	if (_p)
	{	::soap_default_SER__TestLinkSqlserver(soap, _p);
		_p->serverInfo = serverInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__TestLinkSqlserver(struct soap*, const struct SER__TestLinkSqlserver *, const char*, const char*);

inline int soap_write_SER__TestLinkSqlserver(struct soap *soap, struct SER__TestLinkSqlserver const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__TestLinkSqlserver(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver(soap, p, "SER:TestLinkSqlserver", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__TestLinkSqlserver(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserver(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver(soap, p, "SER:TestLinkSqlserver", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__TestLinkSqlserver(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserver(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver(soap, p, "SER:TestLinkSqlserver", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__TestLinkSqlserver(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserver(soap, p), 0) || ::soap_put_SER__TestLinkSqlserver(soap, p, "SER:TestLinkSqlserver", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__TestLinkSqlserver * SOAP_FMAC4 soap_get_SER__TestLinkSqlserver(struct soap*, struct SER__TestLinkSqlserver *, const char*, const char*);

inline int soap_read_SER__TestLinkSqlserver(struct soap *soap, struct SER__TestLinkSqlserver *p)
{
	if (p)
	{	::soap_default_SER__TestLinkSqlserver(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__TestLinkSqlserver(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__TestLinkSqlserver(struct soap *soap, const char *URL, struct SER__TestLinkSqlserver *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__TestLinkSqlserver(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__TestLinkSqlserver(struct soap *soap, struct SER__TestLinkSqlserver *p)
{
	if (::soap_read_SER__TestLinkSqlserver(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__TestLinkSqlserverResponse_DEFINED
#define SOAP_TYPE_SER__TestLinkSqlserverResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__TestLinkSqlserverResponse(struct soap*, struct SER__TestLinkSqlserverResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__TestLinkSqlserverResponse(struct soap*, const struct SER__TestLinkSqlserverResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__TestLinkSqlserverResponse(struct soap*, const char*, int, const struct SER__TestLinkSqlserverResponse *, const char*);
SOAP_FMAC3 struct SER__TestLinkSqlserverResponse * SOAP_FMAC4 soap_in_SER__TestLinkSqlserverResponse(struct soap*, const char*, struct SER__TestLinkSqlserverResponse *, const char*);
SOAP_FMAC1 struct SER__TestLinkSqlserverResponse * SOAP_FMAC2 soap_instantiate_SER__TestLinkSqlserverResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__TestLinkSqlserverResponse * soap_new_SER__TestLinkSqlserverResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__TestLinkSqlserverResponse(soap, n, NULL, NULL, NULL);
}

inline struct SER__TestLinkSqlserverResponse * soap_new_req_SER__TestLinkSqlserverResponse(
	struct soap *soap,
	const std::wstring& TestLinkSqlserverResult)
{
	struct SER__TestLinkSqlserverResponse *_p = ::soap_new_SER__TestLinkSqlserverResponse(soap);
	if (_p)
	{	::soap_default_SER__TestLinkSqlserverResponse(soap, _p);
		_p->TestLinkSqlserverResult = TestLinkSqlserverResult;
	}
	return _p;
}

inline struct SER__TestLinkSqlserverResponse * soap_new_set_SER__TestLinkSqlserverResponse(
	struct soap *soap,
	const std::wstring& TestLinkSqlserverResult)
{
	struct SER__TestLinkSqlserverResponse *_p = ::soap_new_SER__TestLinkSqlserverResponse(soap);
	if (_p)
	{	::soap_default_SER__TestLinkSqlserverResponse(soap, _p);
		_p->TestLinkSqlserverResult = TestLinkSqlserverResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__TestLinkSqlserverResponse(struct soap*, const struct SER__TestLinkSqlserverResponse *, const char*, const char*);

inline int soap_write_SER__TestLinkSqlserverResponse(struct soap *soap, struct SER__TestLinkSqlserverResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__TestLinkSqlserverResponse(soap, p), 0) || ::soap_put_SER__TestLinkSqlserverResponse(soap, p, "SER:TestLinkSqlserverResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__TestLinkSqlserverResponse(struct soap *soap, const char *URL, struct SER__TestLinkSqlserverResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserverResponse(soap, p), 0) || ::soap_put_SER__TestLinkSqlserverResponse(soap, p, "SER:TestLinkSqlserverResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__TestLinkSqlserverResponse(struct soap *soap, const char *URL, struct SER__TestLinkSqlserverResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserverResponse(soap, p), 0) || ::soap_put_SER__TestLinkSqlserverResponse(soap, p, "SER:TestLinkSqlserverResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__TestLinkSqlserverResponse(struct soap *soap, const char *URL, struct SER__TestLinkSqlserverResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__TestLinkSqlserverResponse(soap, p), 0) || ::soap_put_SER__TestLinkSqlserverResponse(soap, p, "SER:TestLinkSqlserverResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__TestLinkSqlserverResponse * SOAP_FMAC4 soap_get_SER__TestLinkSqlserverResponse(struct soap*, struct SER__TestLinkSqlserverResponse *, const char*, const char*);

inline int soap_read_SER__TestLinkSqlserverResponse(struct soap *soap, struct SER__TestLinkSqlserverResponse *p)
{
	if (p)
	{	::soap_default_SER__TestLinkSqlserverResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__TestLinkSqlserverResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__TestLinkSqlserverResponse(struct soap *soap, const char *URL, struct SER__TestLinkSqlserverResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__TestLinkSqlserverResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__TestLinkSqlserverResponse(struct soap *soap, struct SER__TestLinkSqlserverResponse *p)
{
	if (::soap_read_SER__TestLinkSqlserverResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__showExistLink_DEFINED
#define SOAP_TYPE_SER__showExistLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__showExistLink(struct soap*, struct SER__showExistLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__showExistLink(struct soap*, const struct SER__showExistLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__showExistLink(struct soap*, const char*, int, const struct SER__showExistLink *, const char*);
SOAP_FMAC3 struct SER__showExistLink * SOAP_FMAC4 soap_in_SER__showExistLink(struct soap*, const char*, struct SER__showExistLink *, const char*);
SOAP_FMAC1 struct SER__showExistLink * SOAP_FMAC2 soap_instantiate_SER__showExistLink(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__showExistLink * soap_new_SER__showExistLink(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__showExistLink(soap, n, NULL, NULL, NULL);
}

inline struct SER__showExistLink * soap_new_req_SER__showExistLink(
	struct soap *soap)
{
	struct SER__showExistLink *_p = ::soap_new_SER__showExistLink(soap);
	if (_p)
	{	::soap_default_SER__showExistLink(soap, _p);
	}
	return _p;
}

inline struct SER__showExistLink * soap_new_set_SER__showExistLink(
	struct soap *soap)
{
	struct SER__showExistLink *_p = ::soap_new_SER__showExistLink(soap);
	if (_p)
	{	::soap_default_SER__showExistLink(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__showExistLink(struct soap*, const struct SER__showExistLink *, const char*, const char*);

inline int soap_write_SER__showExistLink(struct soap *soap, struct SER__showExistLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__showExistLink(soap, p), 0) || ::soap_put_SER__showExistLink(soap, p, "SER:showExistLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__showExistLink(struct soap *soap, const char *URL, struct SER__showExistLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLink(soap, p), 0) || ::soap_put_SER__showExistLink(soap, p, "SER:showExistLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__showExistLink(struct soap *soap, const char *URL, struct SER__showExistLink const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLink(soap, p), 0) || ::soap_put_SER__showExistLink(soap, p, "SER:showExistLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__showExistLink(struct soap *soap, const char *URL, struct SER__showExistLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLink(soap, p), 0) || ::soap_put_SER__showExistLink(soap, p, "SER:showExistLink", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__showExistLink * SOAP_FMAC4 soap_get_SER__showExistLink(struct soap*, struct SER__showExistLink *, const char*, const char*);

inline int soap_read_SER__showExistLink(struct soap *soap, struct SER__showExistLink *p)
{
	if (p)
	{	::soap_default_SER__showExistLink(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__showExistLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__showExistLink(struct soap *soap, const char *URL, struct SER__showExistLink *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__showExistLink(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__showExistLink(struct soap *soap, struct SER__showExistLink *p)
{
	if (::soap_read_SER__showExistLink(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__showExistLinkResponse_DEFINED
#define SOAP_TYPE_SER__showExistLinkResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__showExistLinkResponse(struct soap*, struct SER__showExistLinkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__showExistLinkResponse(struct soap*, const struct SER__showExistLinkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__showExistLinkResponse(struct soap*, const char*, int, const struct SER__showExistLinkResponse *, const char*);
SOAP_FMAC3 struct SER__showExistLinkResponse * SOAP_FMAC4 soap_in_SER__showExistLinkResponse(struct soap*, const char*, struct SER__showExistLinkResponse *, const char*);
SOAP_FMAC1 struct SER__showExistLinkResponse * SOAP_FMAC2 soap_instantiate_SER__showExistLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__showExistLinkResponse * soap_new_SER__showExistLinkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__showExistLinkResponse(soap, n, NULL, NULL, NULL);
}

inline struct SER__showExistLinkResponse * soap_new_req_SER__showExistLinkResponse(
	struct soap *soap,
	const std::wstring& showExistLinkResult)
{
	struct SER__showExistLinkResponse *_p = ::soap_new_SER__showExistLinkResponse(soap);
	if (_p)
	{	::soap_default_SER__showExistLinkResponse(soap, _p);
		_p->showExistLinkResult = showExistLinkResult;
	}
	return _p;
}

inline struct SER__showExistLinkResponse * soap_new_set_SER__showExistLinkResponse(
	struct soap *soap,
	const std::wstring& showExistLinkResult)
{
	struct SER__showExistLinkResponse *_p = ::soap_new_SER__showExistLinkResponse(soap);
	if (_p)
	{	::soap_default_SER__showExistLinkResponse(soap, _p);
		_p->showExistLinkResult = showExistLinkResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__showExistLinkResponse(struct soap*, const struct SER__showExistLinkResponse *, const char*, const char*);

inline int soap_write_SER__showExistLinkResponse(struct soap *soap, struct SER__showExistLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__showExistLinkResponse(soap, p), 0) || ::soap_put_SER__showExistLinkResponse(soap, p, "SER:showExistLinkResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__showExistLinkResponse(struct soap *soap, const char *URL, struct SER__showExistLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLinkResponse(soap, p), 0) || ::soap_put_SER__showExistLinkResponse(soap, p, "SER:showExistLinkResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__showExistLinkResponse(struct soap *soap, const char *URL, struct SER__showExistLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLinkResponse(soap, p), 0) || ::soap_put_SER__showExistLinkResponse(soap, p, "SER:showExistLinkResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__showExistLinkResponse(struct soap *soap, const char *URL, struct SER__showExistLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__showExistLinkResponse(soap, p), 0) || ::soap_put_SER__showExistLinkResponse(soap, p, "SER:showExistLinkResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__showExistLinkResponse * SOAP_FMAC4 soap_get_SER__showExistLinkResponse(struct soap*, struct SER__showExistLinkResponse *, const char*, const char*);

inline int soap_read_SER__showExistLinkResponse(struct soap *soap, struct SER__showExistLinkResponse *p)
{
	if (p)
	{	::soap_default_SER__showExistLinkResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__showExistLinkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__showExistLinkResponse(struct soap *soap, const char *URL, struct SER__showExistLinkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__showExistLinkResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__showExistLinkResponse(struct soap *soap, struct SER__showExistLinkResponse *p)
{
	if (::soap_read_SER__showExistLinkResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__clearLink_DEFINED
#define SOAP_TYPE_SER__clearLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__clearLink(struct soap*, struct SER__clearLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__clearLink(struct soap*, const struct SER__clearLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__clearLink(struct soap*, const char*, int, const struct SER__clearLink *, const char*);
SOAP_FMAC3 struct SER__clearLink * SOAP_FMAC4 soap_in_SER__clearLink(struct soap*, const char*, struct SER__clearLink *, const char*);
SOAP_FMAC1 struct SER__clearLink * SOAP_FMAC2 soap_instantiate_SER__clearLink(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__clearLink * soap_new_SER__clearLink(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__clearLink(soap, n, NULL, NULL, NULL);
}

inline struct SER__clearLink * soap_new_req_SER__clearLink(
	struct soap *soap,
	bool bTimeContrl)
{
	struct SER__clearLink *_p = ::soap_new_SER__clearLink(soap);
	if (_p)
	{	::soap_default_SER__clearLink(soap, _p);
		_p->bTimeContrl = bTimeContrl;
	}
	return _p;
}

inline struct SER__clearLink * soap_new_set_SER__clearLink(
	struct soap *soap,
	bool bTimeContrl)
{
	struct SER__clearLink *_p = ::soap_new_SER__clearLink(soap);
	if (_p)
	{	::soap_default_SER__clearLink(soap, _p);
		_p->bTimeContrl = bTimeContrl;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__clearLink(struct soap*, const struct SER__clearLink *, const char*, const char*);

inline int soap_write_SER__clearLink(struct soap *soap, struct SER__clearLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__clearLink(soap, p), 0) || ::soap_put_SER__clearLink(soap, p, "SER:clearLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__clearLink(struct soap *soap, const char *URL, struct SER__clearLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLink(soap, p), 0) || ::soap_put_SER__clearLink(soap, p, "SER:clearLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__clearLink(struct soap *soap, const char *URL, struct SER__clearLink const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLink(soap, p), 0) || ::soap_put_SER__clearLink(soap, p, "SER:clearLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__clearLink(struct soap *soap, const char *URL, struct SER__clearLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLink(soap, p), 0) || ::soap_put_SER__clearLink(soap, p, "SER:clearLink", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__clearLink * SOAP_FMAC4 soap_get_SER__clearLink(struct soap*, struct SER__clearLink *, const char*, const char*);

inline int soap_read_SER__clearLink(struct soap *soap, struct SER__clearLink *p)
{
	if (p)
	{	::soap_default_SER__clearLink(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__clearLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__clearLink(struct soap *soap, const char *URL, struct SER__clearLink *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__clearLink(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__clearLink(struct soap *soap, struct SER__clearLink *p)
{
	if (::soap_read_SER__clearLink(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__clearLinkResponse_DEFINED
#define SOAP_TYPE_SER__clearLinkResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__clearLinkResponse(struct soap*, struct SER__clearLinkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__clearLinkResponse(struct soap*, const struct SER__clearLinkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__clearLinkResponse(struct soap*, const char*, int, const struct SER__clearLinkResponse *, const char*);
SOAP_FMAC3 struct SER__clearLinkResponse * SOAP_FMAC4 soap_in_SER__clearLinkResponse(struct soap*, const char*, struct SER__clearLinkResponse *, const char*);
SOAP_FMAC1 struct SER__clearLinkResponse * SOAP_FMAC2 soap_instantiate_SER__clearLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__clearLinkResponse * soap_new_SER__clearLinkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__clearLinkResponse(soap, n, NULL, NULL, NULL);
}

inline struct SER__clearLinkResponse * soap_new_req_SER__clearLinkResponse(
	struct soap *soap,
	const std::wstring& clearLinkResult)
{
	struct SER__clearLinkResponse *_p = ::soap_new_SER__clearLinkResponse(soap);
	if (_p)
	{	::soap_default_SER__clearLinkResponse(soap, _p);
		_p->clearLinkResult = clearLinkResult;
	}
	return _p;
}

inline struct SER__clearLinkResponse * soap_new_set_SER__clearLinkResponse(
	struct soap *soap,
	const std::wstring& clearLinkResult)
{
	struct SER__clearLinkResponse *_p = ::soap_new_SER__clearLinkResponse(soap);
	if (_p)
	{	::soap_default_SER__clearLinkResponse(soap, _p);
		_p->clearLinkResult = clearLinkResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__clearLinkResponse(struct soap*, const struct SER__clearLinkResponse *, const char*, const char*);

inline int soap_write_SER__clearLinkResponse(struct soap *soap, struct SER__clearLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__clearLinkResponse(soap, p), 0) || ::soap_put_SER__clearLinkResponse(soap, p, "SER:clearLinkResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__clearLinkResponse(struct soap *soap, const char *URL, struct SER__clearLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLinkResponse(soap, p), 0) || ::soap_put_SER__clearLinkResponse(soap, p, "SER:clearLinkResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__clearLinkResponse(struct soap *soap, const char *URL, struct SER__clearLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLinkResponse(soap, p), 0) || ::soap_put_SER__clearLinkResponse(soap, p, "SER:clearLinkResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__clearLinkResponse(struct soap *soap, const char *URL, struct SER__clearLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__clearLinkResponse(soap, p), 0) || ::soap_put_SER__clearLinkResponse(soap, p, "SER:clearLinkResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__clearLinkResponse * SOAP_FMAC4 soap_get_SER__clearLinkResponse(struct soap*, struct SER__clearLinkResponse *, const char*, const char*);

inline int soap_read_SER__clearLinkResponse(struct soap *soap, struct SER__clearLinkResponse *p)
{
	if (p)
	{	::soap_default_SER__clearLinkResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__clearLinkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__clearLinkResponse(struct soap *soap, const char *URL, struct SER__clearLinkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__clearLinkResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__clearLinkResponse(struct soap *soap, struct SER__clearLinkResponse *p)
{
	if (::soap_read_SER__clearLinkResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__AddNumbers_DEFINED
#define SOAP_TYPE_SER__AddNumbers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddNumbers(struct soap*, struct SER__AddNumbers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddNumbers(struct soap*, const struct SER__AddNumbers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddNumbers(struct soap*, const char*, int, const struct SER__AddNumbers *, const char*);
SOAP_FMAC3 struct SER__AddNumbers * SOAP_FMAC4 soap_in_SER__AddNumbers(struct soap*, const char*, struct SER__AddNumbers *, const char*);
SOAP_FMAC1 struct SER__AddNumbers * SOAP_FMAC2 soap_instantiate_SER__AddNumbers(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__AddNumbers * soap_new_SER__AddNumbers(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__AddNumbers(soap, n, NULL, NULL, NULL);
}

inline struct SER__AddNumbers * soap_new_req_SER__AddNumbers(
	struct soap *soap,
	int NumberOne,
	int NumberTwo)
{
	struct SER__AddNumbers *_p = ::soap_new_SER__AddNumbers(soap);
	if (_p)
	{	::soap_default_SER__AddNumbers(soap, _p);
		_p->NumberOne = NumberOne;
		_p->NumberTwo = NumberTwo;
	}
	return _p;
}

inline struct SER__AddNumbers * soap_new_set_SER__AddNumbers(
	struct soap *soap,
	int NumberOne,
	int NumberTwo)
{
	struct SER__AddNumbers *_p = ::soap_new_SER__AddNumbers(soap);
	if (_p)
	{	::soap_default_SER__AddNumbers(soap, _p);
		_p->NumberOne = NumberOne;
		_p->NumberTwo = NumberTwo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddNumbers(struct soap*, const struct SER__AddNumbers *, const char*, const char*);

inline int soap_write_SER__AddNumbers(struct soap *soap, struct SER__AddNumbers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__AddNumbers(soap, p), 0) || ::soap_put_SER__AddNumbers(soap, p, "SER:AddNumbers", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__AddNumbers(struct soap *soap, const char *URL, struct SER__AddNumbers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbers(soap, p), 0) || ::soap_put_SER__AddNumbers(soap, p, "SER:AddNumbers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__AddNumbers(struct soap *soap, const char *URL, struct SER__AddNumbers const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbers(soap, p), 0) || ::soap_put_SER__AddNumbers(soap, p, "SER:AddNumbers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__AddNumbers(struct soap *soap, const char *URL, struct SER__AddNumbers const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbers(soap, p), 0) || ::soap_put_SER__AddNumbers(soap, p, "SER:AddNumbers", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__AddNumbers * SOAP_FMAC4 soap_get_SER__AddNumbers(struct soap*, struct SER__AddNumbers *, const char*, const char*);

inline int soap_read_SER__AddNumbers(struct soap *soap, struct SER__AddNumbers *p)
{
	if (p)
	{	::soap_default_SER__AddNumbers(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__AddNumbers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__AddNumbers(struct soap *soap, const char *URL, struct SER__AddNumbers *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__AddNumbers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__AddNumbers(struct soap *soap, struct SER__AddNumbers *p)
{
	if (::soap_read_SER__AddNumbers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SER__AddNumbersResponse_DEFINED
#define SOAP_TYPE_SER__AddNumbersResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SER__AddNumbersResponse(struct soap*, struct SER__AddNumbersResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SER__AddNumbersResponse(struct soap*, const struct SER__AddNumbersResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SER__AddNumbersResponse(struct soap*, const char*, int, const struct SER__AddNumbersResponse *, const char*);
SOAP_FMAC3 struct SER__AddNumbersResponse * SOAP_FMAC4 soap_in_SER__AddNumbersResponse(struct soap*, const char*, struct SER__AddNumbersResponse *, const char*);
SOAP_FMAC1 struct SER__AddNumbersResponse * SOAP_FMAC2 soap_instantiate_SER__AddNumbersResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct SER__AddNumbersResponse * soap_new_SER__AddNumbersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_SER__AddNumbersResponse(soap, n, NULL, NULL, NULL);
}

inline struct SER__AddNumbersResponse * soap_new_req_SER__AddNumbersResponse(
	struct soap *soap,
	int AddNumbersResult)
{
	struct SER__AddNumbersResponse *_p = ::soap_new_SER__AddNumbersResponse(soap);
	if (_p)
	{	::soap_default_SER__AddNumbersResponse(soap, _p);
		_p->AddNumbersResult = AddNumbersResult;
	}
	return _p;
}

inline struct SER__AddNumbersResponse * soap_new_set_SER__AddNumbersResponse(
	struct soap *soap,
	int AddNumbersResult)
{
	struct SER__AddNumbersResponse *_p = ::soap_new_SER__AddNumbersResponse(soap);
	if (_p)
	{	::soap_default_SER__AddNumbersResponse(soap, _p);
		_p->AddNumbersResult = AddNumbersResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SER__AddNumbersResponse(struct soap*, const struct SER__AddNumbersResponse *, const char*, const char*);

inline int soap_write_SER__AddNumbersResponse(struct soap *soap, struct SER__AddNumbersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SER__AddNumbersResponse(soap, p), 0) || ::soap_put_SER__AddNumbersResponse(soap, p, "SER:AddNumbersResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SER__AddNumbersResponse(struct soap *soap, const char *URL, struct SER__AddNumbersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbersResponse(soap, p), 0) || ::soap_put_SER__AddNumbersResponse(soap, p, "SER:AddNumbersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SER__AddNumbersResponse(struct soap *soap, const char *URL, struct SER__AddNumbersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbersResponse(soap, p), 0) || ::soap_put_SER__AddNumbersResponse(soap, p, "SER:AddNumbersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SER__AddNumbersResponse(struct soap *soap, const char *URL, struct SER__AddNumbersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SER__AddNumbersResponse(soap, p), 0) || ::soap_put_SER__AddNumbersResponse(soap, p, "SER:AddNumbersResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SER__AddNumbersResponse * SOAP_FMAC4 soap_get_SER__AddNumbersResponse(struct soap*, struct SER__AddNumbersResponse *, const char*, const char*);

inline int soap_read_SER__AddNumbersResponse(struct soap *soap, struct SER__AddNumbersResponse *p)
{
	if (p)
	{	::soap_default_SER__AddNumbersResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SER__AddNumbersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SER__AddNumbersResponse(struct soap *soap, const char *URL, struct SER__AddNumbersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SER__AddNumbersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SER__AddNumbersResponse(struct soap *soap, struct SER__AddNumbersResponse *p)
{
	if (::soap_read_SER__AddNumbersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___MAC__GetServerInfo_DEFINED
#define SOAP_TYPE___MAC__GetServerInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___MAC__GetServerInfo(struct soap*, struct __MAC__GetServerInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MAC__GetServerInfo(struct soap*, const struct __MAC__GetServerInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___MAC__GetServerInfo(struct soap*, const char*, int, const struct __MAC__GetServerInfo *, const char*);
SOAP_FMAC3 struct __MAC__GetServerInfo * SOAP_FMAC4 soap_in___MAC__GetServerInfo(struct soap*, const char*, struct __MAC__GetServerInfo *, const char*);
SOAP_FMAC1 struct __MAC__GetServerInfo * SOAP_FMAC2 soap_instantiate___MAC__GetServerInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __MAC__GetServerInfo * soap_new___MAC__GetServerInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___MAC__GetServerInfo(soap, n, NULL, NULL, NULL);
}

inline struct __MAC__GetServerInfo * soap_new_req___MAC__GetServerInfo(
	struct soap *soap)
{
	struct __MAC__GetServerInfo *_p = ::soap_new___MAC__GetServerInfo(soap);
	if (_p)
	{	::soap_default___MAC__GetServerInfo(soap, _p);
	}
	return _p;
}

inline struct __MAC__GetServerInfo * soap_new_set___MAC__GetServerInfo(
	struct soap *soap,
	MAC__GetServerInfo *MAC__GetServerInfo_)
{
	struct __MAC__GetServerInfo *_p = ::soap_new___MAC__GetServerInfo(soap);
	if (_p)
	{	::soap_default___MAC__GetServerInfo(soap, _p);
		_p->MAC__GetServerInfo_ = MAC__GetServerInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___MAC__GetServerInfo(struct soap*, const struct __MAC__GetServerInfo *, const char*, const char*);

inline int soap_write___MAC__GetServerInfo(struct soap *soap, struct __MAC__GetServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___MAC__GetServerInfo(soap, p), 0) || ::soap_put___MAC__GetServerInfo(soap, p, "-MAC:GetServerInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___MAC__GetServerInfo(struct soap *soap, const char *URL, struct __MAC__GetServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__GetServerInfo(soap, p), 0) || ::soap_put___MAC__GetServerInfo(soap, p, "-MAC:GetServerInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___MAC__GetServerInfo(struct soap *soap, const char *URL, struct __MAC__GetServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__GetServerInfo(soap, p), 0) || ::soap_put___MAC__GetServerInfo(soap, p, "-MAC:GetServerInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___MAC__GetServerInfo(struct soap *soap, const char *URL, struct __MAC__GetServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__GetServerInfo(soap, p), 0) || ::soap_put___MAC__GetServerInfo(soap, p, "-MAC:GetServerInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __MAC__GetServerInfo * SOAP_FMAC4 soap_get___MAC__GetServerInfo(struct soap*, struct __MAC__GetServerInfo *, const char*, const char*);

inline int soap_read___MAC__GetServerInfo(struct soap *soap, struct __MAC__GetServerInfo *p)
{
	if (p)
	{	::soap_default___MAC__GetServerInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___MAC__GetServerInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___MAC__GetServerInfo(struct soap *soap, const char *URL, struct __MAC__GetServerInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___MAC__GetServerInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___MAC__GetServerInfo(struct soap *soap, struct __MAC__GetServerInfo *p)
{
	if (::soap_read___MAC__GetServerInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___MAC__GetLineServerList_DEFINED
#define SOAP_TYPE___MAC__GetLineServerList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___MAC__GetLineServerList(struct soap*, struct __MAC__GetLineServerList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MAC__GetLineServerList(struct soap*, const struct __MAC__GetLineServerList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___MAC__GetLineServerList(struct soap*, const char*, int, const struct __MAC__GetLineServerList *, const char*);
SOAP_FMAC3 struct __MAC__GetLineServerList * SOAP_FMAC4 soap_in___MAC__GetLineServerList(struct soap*, const char*, struct __MAC__GetLineServerList *, const char*);
SOAP_FMAC1 struct __MAC__GetLineServerList * SOAP_FMAC2 soap_instantiate___MAC__GetLineServerList(struct soap*, int, const char*, const char*, size_t*);

inline struct __MAC__GetLineServerList * soap_new___MAC__GetLineServerList(struct soap *soap, int n = -1)
{
	return soap_instantiate___MAC__GetLineServerList(soap, n, NULL, NULL, NULL);
}

inline struct __MAC__GetLineServerList * soap_new_req___MAC__GetLineServerList(
	struct soap *soap)
{
	struct __MAC__GetLineServerList *_p = ::soap_new___MAC__GetLineServerList(soap);
	if (_p)
	{	::soap_default___MAC__GetLineServerList(soap, _p);
	}
	return _p;
}

inline struct __MAC__GetLineServerList * soap_new_set___MAC__GetLineServerList(
	struct soap *soap,
	MAC__GetLineServerList *MAC__GetLineServerList_)
{
	struct __MAC__GetLineServerList *_p = ::soap_new___MAC__GetLineServerList(soap);
	if (_p)
	{	::soap_default___MAC__GetLineServerList(soap, _p);
		_p->MAC__GetLineServerList_ = MAC__GetLineServerList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___MAC__GetLineServerList(struct soap*, const struct __MAC__GetLineServerList *, const char*, const char*);

inline int soap_write___MAC__GetLineServerList(struct soap *soap, struct __MAC__GetLineServerList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___MAC__GetLineServerList(soap, p), 0) || ::soap_put___MAC__GetLineServerList(soap, p, "-MAC:GetLineServerList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___MAC__GetLineServerList(struct soap *soap, const char *URL, struct __MAC__GetLineServerList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__GetLineServerList(soap, p), 0) || ::soap_put___MAC__GetLineServerList(soap, p, "-MAC:GetLineServerList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___MAC__GetLineServerList(struct soap *soap, const char *URL, struct __MAC__GetLineServerList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__GetLineServerList(soap, p), 0) || ::soap_put___MAC__GetLineServerList(soap, p, "-MAC:GetLineServerList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___MAC__GetLineServerList(struct soap *soap, const char *URL, struct __MAC__GetLineServerList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__GetLineServerList(soap, p), 0) || ::soap_put___MAC__GetLineServerList(soap, p, "-MAC:GetLineServerList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __MAC__GetLineServerList * SOAP_FMAC4 soap_get___MAC__GetLineServerList(struct soap*, struct __MAC__GetLineServerList *, const char*, const char*);

inline int soap_read___MAC__GetLineServerList(struct soap *soap, struct __MAC__GetLineServerList *p)
{
	if (p)
	{	::soap_default___MAC__GetLineServerList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___MAC__GetLineServerList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___MAC__GetLineServerList(struct soap *soap, const char *URL, struct __MAC__GetLineServerList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___MAC__GetLineServerList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___MAC__GetLineServerList(struct soap *soap, struct __MAC__GetLineServerList *p)
{
	if (::soap_read___MAC__GetLineServerList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___MAC__addRobotRunState_DEFINED
#define SOAP_TYPE___MAC__addRobotRunState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___MAC__addRobotRunState(struct soap*, struct __MAC__addRobotRunState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MAC__addRobotRunState(struct soap*, const struct __MAC__addRobotRunState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___MAC__addRobotRunState(struct soap*, const char*, int, const struct __MAC__addRobotRunState *, const char*);
SOAP_FMAC3 struct __MAC__addRobotRunState * SOAP_FMAC4 soap_in___MAC__addRobotRunState(struct soap*, const char*, struct __MAC__addRobotRunState *, const char*);
SOAP_FMAC1 struct __MAC__addRobotRunState * SOAP_FMAC2 soap_instantiate___MAC__addRobotRunState(struct soap*, int, const char*, const char*, size_t*);

inline struct __MAC__addRobotRunState * soap_new___MAC__addRobotRunState(struct soap *soap, int n = -1)
{
	return soap_instantiate___MAC__addRobotRunState(soap, n, NULL, NULL, NULL);
}

inline struct __MAC__addRobotRunState * soap_new_req___MAC__addRobotRunState(
	struct soap *soap)
{
	struct __MAC__addRobotRunState *_p = ::soap_new___MAC__addRobotRunState(soap);
	if (_p)
	{	::soap_default___MAC__addRobotRunState(soap, _p);
	}
	return _p;
}

inline struct __MAC__addRobotRunState * soap_new_set___MAC__addRobotRunState(
	struct soap *soap,
	MAC__addRobotRunState *MAC__addRobotRunState_)
{
	struct __MAC__addRobotRunState *_p = ::soap_new___MAC__addRobotRunState(soap);
	if (_p)
	{	::soap_default___MAC__addRobotRunState(soap, _p);
		_p->MAC__addRobotRunState_ = MAC__addRobotRunState_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___MAC__addRobotRunState(struct soap*, const struct __MAC__addRobotRunState *, const char*, const char*);

inline int soap_write___MAC__addRobotRunState(struct soap *soap, struct __MAC__addRobotRunState const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___MAC__addRobotRunState(soap, p), 0) || ::soap_put___MAC__addRobotRunState(soap, p, "-MAC:addRobotRunState", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___MAC__addRobotRunState(struct soap *soap, const char *URL, struct __MAC__addRobotRunState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__addRobotRunState(soap, p), 0) || ::soap_put___MAC__addRobotRunState(soap, p, "-MAC:addRobotRunState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___MAC__addRobotRunState(struct soap *soap, const char *URL, struct __MAC__addRobotRunState const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__addRobotRunState(soap, p), 0) || ::soap_put___MAC__addRobotRunState(soap, p, "-MAC:addRobotRunState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___MAC__addRobotRunState(struct soap *soap, const char *URL, struct __MAC__addRobotRunState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__addRobotRunState(soap, p), 0) || ::soap_put___MAC__addRobotRunState(soap, p, "-MAC:addRobotRunState", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __MAC__addRobotRunState * SOAP_FMAC4 soap_get___MAC__addRobotRunState(struct soap*, struct __MAC__addRobotRunState *, const char*, const char*);

inline int soap_read___MAC__addRobotRunState(struct soap *soap, struct __MAC__addRobotRunState *p)
{
	if (p)
	{	::soap_default___MAC__addRobotRunState(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___MAC__addRobotRunState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___MAC__addRobotRunState(struct soap *soap, const char *URL, struct __MAC__addRobotRunState *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___MAC__addRobotRunState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___MAC__addRobotRunState(struct soap *soap, struct __MAC__addRobotRunState *p)
{
	if (::soap_read___MAC__addRobotRunState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___MAC__GetLineServerInfo_DEFINED
#define SOAP_TYPE___MAC__GetLineServerInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___MAC__GetLineServerInfo(struct soap*, struct __MAC__GetLineServerInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MAC__GetLineServerInfo(struct soap*, const struct __MAC__GetLineServerInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___MAC__GetLineServerInfo(struct soap*, const char*, int, const struct __MAC__GetLineServerInfo *, const char*);
SOAP_FMAC3 struct __MAC__GetLineServerInfo * SOAP_FMAC4 soap_in___MAC__GetLineServerInfo(struct soap*, const char*, struct __MAC__GetLineServerInfo *, const char*);
SOAP_FMAC1 struct __MAC__GetLineServerInfo * SOAP_FMAC2 soap_instantiate___MAC__GetLineServerInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __MAC__GetLineServerInfo * soap_new___MAC__GetLineServerInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___MAC__GetLineServerInfo(soap, n, NULL, NULL, NULL);
}

inline struct __MAC__GetLineServerInfo * soap_new_req___MAC__GetLineServerInfo(
	struct soap *soap)
{
	struct __MAC__GetLineServerInfo *_p = ::soap_new___MAC__GetLineServerInfo(soap);
	if (_p)
	{	::soap_default___MAC__GetLineServerInfo(soap, _p);
	}
	return _p;
}

inline struct __MAC__GetLineServerInfo * soap_new_set___MAC__GetLineServerInfo(
	struct soap *soap,
	MAC__GetLineServerInfo *MAC__GetLineServerInfo_)
{
	struct __MAC__GetLineServerInfo *_p = ::soap_new___MAC__GetLineServerInfo(soap);
	if (_p)
	{	::soap_default___MAC__GetLineServerInfo(soap, _p);
		_p->MAC__GetLineServerInfo_ = MAC__GetLineServerInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___MAC__GetLineServerInfo(struct soap*, const struct __MAC__GetLineServerInfo *, const char*, const char*);

inline int soap_write___MAC__GetLineServerInfo(struct soap *soap, struct __MAC__GetLineServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___MAC__GetLineServerInfo(soap, p), 0) || ::soap_put___MAC__GetLineServerInfo(soap, p, "-MAC:GetLineServerInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___MAC__GetLineServerInfo(struct soap *soap, const char *URL, struct __MAC__GetLineServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__GetLineServerInfo(soap, p), 0) || ::soap_put___MAC__GetLineServerInfo(soap, p, "-MAC:GetLineServerInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___MAC__GetLineServerInfo(struct soap *soap, const char *URL, struct __MAC__GetLineServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__GetLineServerInfo(soap, p), 0) || ::soap_put___MAC__GetLineServerInfo(soap, p, "-MAC:GetLineServerInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___MAC__GetLineServerInfo(struct soap *soap, const char *URL, struct __MAC__GetLineServerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__GetLineServerInfo(soap, p), 0) || ::soap_put___MAC__GetLineServerInfo(soap, p, "-MAC:GetLineServerInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __MAC__GetLineServerInfo * SOAP_FMAC4 soap_get___MAC__GetLineServerInfo(struct soap*, struct __MAC__GetLineServerInfo *, const char*, const char*);

inline int soap_read___MAC__GetLineServerInfo(struct soap *soap, struct __MAC__GetLineServerInfo *p)
{
	if (p)
	{	::soap_default___MAC__GetLineServerInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___MAC__GetLineServerInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___MAC__GetLineServerInfo(struct soap *soap, const char *URL, struct __MAC__GetLineServerInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___MAC__GetLineServerInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___MAC__GetLineServerInfo(struct soap *soap, struct __MAC__GetLineServerInfo *p)
{
	if (::soap_read___MAC__GetLineServerInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___MAC__fetchRobotConfig_DEFINED
#define SOAP_TYPE___MAC__fetchRobotConfig_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___MAC__fetchRobotConfig(struct soap*, struct __MAC__fetchRobotConfig *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MAC__fetchRobotConfig(struct soap*, const struct __MAC__fetchRobotConfig *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___MAC__fetchRobotConfig(struct soap*, const char*, int, const struct __MAC__fetchRobotConfig *, const char*);
SOAP_FMAC3 struct __MAC__fetchRobotConfig * SOAP_FMAC4 soap_in___MAC__fetchRobotConfig(struct soap*, const char*, struct __MAC__fetchRobotConfig *, const char*);
SOAP_FMAC1 struct __MAC__fetchRobotConfig * SOAP_FMAC2 soap_instantiate___MAC__fetchRobotConfig(struct soap*, int, const char*, const char*, size_t*);

inline struct __MAC__fetchRobotConfig * soap_new___MAC__fetchRobotConfig(struct soap *soap, int n = -1)
{
	return soap_instantiate___MAC__fetchRobotConfig(soap, n, NULL, NULL, NULL);
}

inline struct __MAC__fetchRobotConfig * soap_new_req___MAC__fetchRobotConfig(
	struct soap *soap)
{
	struct __MAC__fetchRobotConfig *_p = ::soap_new___MAC__fetchRobotConfig(soap);
	if (_p)
	{	::soap_default___MAC__fetchRobotConfig(soap, _p);
	}
	return _p;
}

inline struct __MAC__fetchRobotConfig * soap_new_set___MAC__fetchRobotConfig(
	struct soap *soap,
	MAC__fetchRobotConfig *MAC__fetchRobotConfig_)
{
	struct __MAC__fetchRobotConfig *_p = ::soap_new___MAC__fetchRobotConfig(soap);
	if (_p)
	{	::soap_default___MAC__fetchRobotConfig(soap, _p);
		_p->MAC__fetchRobotConfig_ = MAC__fetchRobotConfig_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___MAC__fetchRobotConfig(struct soap*, const struct __MAC__fetchRobotConfig *, const char*, const char*);

inline int soap_write___MAC__fetchRobotConfig(struct soap *soap, struct __MAC__fetchRobotConfig const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___MAC__fetchRobotConfig(soap, p), 0) || ::soap_put___MAC__fetchRobotConfig(soap, p, "-MAC:fetchRobotConfig", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___MAC__fetchRobotConfig(struct soap *soap, const char *URL, struct __MAC__fetchRobotConfig const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__fetchRobotConfig(soap, p), 0) || ::soap_put___MAC__fetchRobotConfig(soap, p, "-MAC:fetchRobotConfig", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___MAC__fetchRobotConfig(struct soap *soap, const char *URL, struct __MAC__fetchRobotConfig const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__fetchRobotConfig(soap, p), 0) || ::soap_put___MAC__fetchRobotConfig(soap, p, "-MAC:fetchRobotConfig", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___MAC__fetchRobotConfig(struct soap *soap, const char *URL, struct __MAC__fetchRobotConfig const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___MAC__fetchRobotConfig(soap, p), 0) || ::soap_put___MAC__fetchRobotConfig(soap, p, "-MAC:fetchRobotConfig", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __MAC__fetchRobotConfig * SOAP_FMAC4 soap_get___MAC__fetchRobotConfig(struct soap*, struct __MAC__fetchRobotConfig *, const char*, const char*);

inline int soap_read___MAC__fetchRobotConfig(struct soap *soap, struct __MAC__fetchRobotConfig *p)
{
	if (p)
	{	::soap_default___MAC__fetchRobotConfig(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___MAC__fetchRobotConfig(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___MAC__fetchRobotConfig(struct soap *soap, const char *URL, struct __MAC__fetchRobotConfig *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___MAC__fetchRobotConfig(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___MAC__fetchRobotConfig(struct soap *soap, struct __MAC__fetchRobotConfig *p)
{
	if (::soap_read___MAC__fetchRobotConfig(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerToMAC__GetServerInfo_DEFINED
#define SOAP_TYPE_PointerToMAC__GetServerInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToMAC__GetServerInfo(struct soap*, MAC__GetServerInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToMAC__GetServerInfo(struct soap*, const char *, int, MAC__GetServerInfo *const*, const char *);
SOAP_FMAC3 MAC__GetServerInfo ** SOAP_FMAC4 soap_in_PointerToMAC__GetServerInfo(struct soap*, const char*, MAC__GetServerInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToMAC__GetServerInfo(struct soap*, MAC__GetServerInfo *const*, const char*, const char*);
SOAP_FMAC3 MAC__GetServerInfo ** SOAP_FMAC4 soap_get_PointerToMAC__GetServerInfo(struct soap*, MAC__GetServerInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToMAC__GetLineServerList_DEFINED
#define SOAP_TYPE_PointerToMAC__GetLineServerList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToMAC__GetLineServerList(struct soap*, MAC__GetLineServerList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToMAC__GetLineServerList(struct soap*, const char *, int, MAC__GetLineServerList *const*, const char *);
SOAP_FMAC3 MAC__GetLineServerList ** SOAP_FMAC4 soap_in_PointerToMAC__GetLineServerList(struct soap*, const char*, MAC__GetLineServerList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToMAC__GetLineServerList(struct soap*, MAC__GetLineServerList *const*, const char*, const char*);
SOAP_FMAC3 MAC__GetLineServerList ** SOAP_FMAC4 soap_get_PointerToMAC__GetLineServerList(struct soap*, MAC__GetLineServerList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToMAC__addRobotRunState_DEFINED
#define SOAP_TYPE_PointerToMAC__addRobotRunState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToMAC__addRobotRunState(struct soap*, MAC__addRobotRunState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToMAC__addRobotRunState(struct soap*, const char *, int, MAC__addRobotRunState *const*, const char *);
SOAP_FMAC3 MAC__addRobotRunState ** SOAP_FMAC4 soap_in_PointerToMAC__addRobotRunState(struct soap*, const char*, MAC__addRobotRunState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToMAC__addRobotRunState(struct soap*, MAC__addRobotRunState *const*, const char*, const char*);
SOAP_FMAC3 MAC__addRobotRunState ** SOAP_FMAC4 soap_get_PointerToMAC__addRobotRunState(struct soap*, MAC__addRobotRunState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToMAC__GetLineServerInfo_DEFINED
#define SOAP_TYPE_PointerToMAC__GetLineServerInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToMAC__GetLineServerInfo(struct soap*, MAC__GetLineServerInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToMAC__GetLineServerInfo(struct soap*, const char *, int, MAC__GetLineServerInfo *const*, const char *);
SOAP_FMAC3 MAC__GetLineServerInfo ** SOAP_FMAC4 soap_in_PointerToMAC__GetLineServerInfo(struct soap*, const char*, MAC__GetLineServerInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToMAC__GetLineServerInfo(struct soap*, MAC__GetLineServerInfo *const*, const char*, const char*);
SOAP_FMAC3 MAC__GetLineServerInfo ** SOAP_FMAC4 soap_get_PointerToMAC__GetLineServerInfo(struct soap*, MAC__GetLineServerInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToMAC__fetchRobotConfig_DEFINED
#define SOAP_TYPE_PointerToMAC__fetchRobotConfig_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToMAC__fetchRobotConfig(struct soap*, MAC__fetchRobotConfig *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToMAC__fetchRobotConfig(struct soap*, const char *, int, MAC__fetchRobotConfig *const*, const char *);
SOAP_FMAC3 MAC__fetchRobotConfig ** SOAP_FMAC4 soap_in_PointerToMAC__fetchRobotConfig(struct soap*, const char*, MAC__fetchRobotConfig **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToMAC__fetchRobotConfig(struct soap*, MAC__fetchRobotConfig *const*, const char*, const char*);
SOAP_FMAC3 MAC__fetchRobotConfig ** SOAP_FMAC4 soap_get_PointerToMAC__fetchRobotConfig(struct soap*, MAC__fetchRobotConfig **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wstring_DEFINED
#define SOAP_TYPE_wstring_DEFINED

inline void soap_default_wstring(struct soap *soap, wchar_t **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wstring
	*a = SOAP_DEFAULT_wstring;
#else
	*a = (wchar_t *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap*, wchar_t *const*);

#define soap_wstring2s(soap, a) soap_wchar2s((soap), (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap*, const char*, int, wchar_t*const*, const char*);

#define soap_s2wstring(soap, s, a) soap_s2wchar((soap), (s), (wchar_t**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap*, const char*, wchar_t **, const char*);

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_new_wstring(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap*, wchar_t *const*, const char*, const char*);

inline int soap_write_wstring(struct soap *soap, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wstring(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wstring(struct soap *soap, const char *URL, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wstring(struct soap *soap, const char *URL, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wstring(struct soap *soap, const char *URL, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstring(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap*, wchar_t **, const char*, const char*);

inline int soap_read_wstring(struct soap *soap, wchar_t **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wstring(struct soap *soap, const char *URL, wchar_t **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wstring(struct soap *soap, wchar_t **p)
{
	if (::soap_read_wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

/* End of soapH.h */
