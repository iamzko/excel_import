/* soapH.h
   Generated by gSOAP 2.8.111 for .\Service1.asmx.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__wstring_DEFINED
#define SOAP_TYPE_std__wstring_DEFINED

inline void soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);

#define soap_std__wstring2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2std__wstring(soap, s, a) soap_s2stdwchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);
SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL);
}

inline std::wstring * soap_new_req_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}

inline std::wstring * soap_new_set_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_std__wstring(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_std__wstring(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__wstring(struct soap *soap, const char *URL, std::wstring *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__wstring(struct soap *soap, std::wstring *p)
{
	if (::soap_read_std__wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_ns1__AddFileToSql__DEFINED
#define SOAP_TYPE_ns1__AddFileToSql__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddFileToSql_(struct soap*, struct ns1__AddFileToSql_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddFileToSql_(struct soap*, const struct ns1__AddFileToSql_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddFileToSql_(struct soap*, const char*, int, const struct ns1__AddFileToSql_ *, const char*);
SOAP_FMAC3 struct ns1__AddFileToSql_ * SOAP_FMAC4 soap_in_ns1__AddFileToSql_(struct soap*, const char*, struct ns1__AddFileToSql_ *, const char*);
SOAP_FMAC1 struct ns1__AddFileToSql_ * SOAP_FMAC2 soap_instantiate_ns1__AddFileToSql_(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AddFileToSql_ * soap_new_ns1__AddFileToSql_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AddFileToSql_(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AddFileToSql_ * soap_new_req_ns1__AddFileToSql_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strFileName,
	const std::wstring& sPointer,
	const std::wstring& tablenamefieldname,
	const std::wstring& fileIP,
	const std::wstring& fileUse,
	const std::wstring& filePassword)
{
	struct ns1__AddFileToSql_ *_p = ::soap_new_ns1__AddFileToSql_(soap);
	if (_p)
	{	::soap_default_ns1__AddFileToSql_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strFileName = strFileName;
		_p->sPointer = sPointer;
		_p->tablenamefieldname = tablenamefieldname;
		_p->fileIP = fileIP;
		_p->fileUse = fileUse;
		_p->filePassword = filePassword;
	}
	return _p;
}

inline struct ns1__AddFileToSql_ * soap_new_set_ns1__AddFileToSql_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strFileName,
	const std::wstring& sPointer,
	const std::wstring& tablenamefieldname,
	const std::wstring& fileIP,
	const std::wstring& fileUse,
	const std::wstring& filePassword)
{
	struct ns1__AddFileToSql_ *_p = ::soap_new_ns1__AddFileToSql_(soap);
	if (_p)
	{	::soap_default_ns1__AddFileToSql_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strFileName = strFileName;
		_p->sPointer = sPointer;
		_p->tablenamefieldname = tablenamefieldname;
		_p->fileIP = fileIP;
		_p->fileUse = fileUse;
		_p->filePassword = filePassword;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddFileToSql_(struct soap*, const struct ns1__AddFileToSql_ *, const char*, const char*);

inline int soap_write_ns1__AddFileToSql_(struct soap *soap, struct ns1__AddFileToSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AddFileToSql_(soap, p), 0) || ::soap_put_ns1__AddFileToSql_(soap, p, "ns1:AddFileToSql", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddFileToSql_(struct soap *soap, const char *URL, struct ns1__AddFileToSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSql_(soap, p), 0) || ::soap_put_ns1__AddFileToSql_(soap, p, "ns1:AddFileToSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AddFileToSql_(struct soap *soap, const char *URL, struct ns1__AddFileToSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSql_(soap, p), 0) || ::soap_put_ns1__AddFileToSql_(soap, p, "ns1:AddFileToSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddFileToSql_(struct soap *soap, const char *URL, struct ns1__AddFileToSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSql_(soap, p), 0) || ::soap_put_ns1__AddFileToSql_(soap, p, "ns1:AddFileToSql", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AddFileToSql_ * SOAP_FMAC4 soap_get_ns1__AddFileToSql_(struct soap*, struct ns1__AddFileToSql_ *, const char*, const char*);

inline int soap_read_ns1__AddFileToSql_(struct soap *soap, struct ns1__AddFileToSql_ *p)
{
	if (p)
	{	::soap_default_ns1__AddFileToSql_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AddFileToSql_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddFileToSql_(struct soap *soap, const char *URL, struct ns1__AddFileToSql_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AddFileToSql_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AddFileToSql_(struct soap *soap, struct ns1__AddFileToSql_ *p)
{
	if (::soap_read_ns1__AddFileToSql_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AddFileToSql_Response_DEFINED
#define SOAP_TYPE_ns1__AddFileToSql_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddFileToSql_Response(struct soap*, struct ns1__AddFileToSql_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddFileToSql_Response(struct soap*, const struct ns1__AddFileToSql_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddFileToSql_Response(struct soap*, const char*, int, const struct ns1__AddFileToSql_Response *, const char*);
SOAP_FMAC3 struct ns1__AddFileToSql_Response * SOAP_FMAC4 soap_in_ns1__AddFileToSql_Response(struct soap*, const char*, struct ns1__AddFileToSql_Response *, const char*);
SOAP_FMAC1 struct ns1__AddFileToSql_Response * SOAP_FMAC2 soap_instantiate_ns1__AddFileToSql_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AddFileToSql_Response * soap_new_ns1__AddFileToSql_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AddFileToSql_Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AddFileToSql_Response * soap_new_req_ns1__AddFileToSql_Response(
	struct soap *soap,
	const std::wstring& AddFileToSqlResult)
{
	struct ns1__AddFileToSql_Response *_p = ::soap_new_ns1__AddFileToSql_Response(soap);
	if (_p)
	{	::soap_default_ns1__AddFileToSql_Response(soap, _p);
		_p->AddFileToSqlResult = AddFileToSqlResult;
	}
	return _p;
}

inline struct ns1__AddFileToSql_Response * soap_new_set_ns1__AddFileToSql_Response(
	struct soap *soap,
	const std::wstring& AddFileToSqlResult)
{
	struct ns1__AddFileToSql_Response *_p = ::soap_new_ns1__AddFileToSql_Response(soap);
	if (_p)
	{	::soap_default_ns1__AddFileToSql_Response(soap, _p);
		_p->AddFileToSqlResult = AddFileToSqlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddFileToSql_Response(struct soap*, const struct ns1__AddFileToSql_Response *, const char*, const char*);

inline int soap_write_ns1__AddFileToSql_Response(struct soap *soap, struct ns1__AddFileToSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AddFileToSql_Response(soap, p), 0) || ::soap_put_ns1__AddFileToSql_Response(soap, p, "ns1:AddFileToSql-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddFileToSql_Response(struct soap *soap, const char *URL, struct ns1__AddFileToSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSql_Response(soap, p), 0) || ::soap_put_ns1__AddFileToSql_Response(soap, p, "ns1:AddFileToSql-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AddFileToSql_Response(struct soap *soap, const char *URL, struct ns1__AddFileToSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSql_Response(soap, p), 0) || ::soap_put_ns1__AddFileToSql_Response(soap, p, "ns1:AddFileToSql-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddFileToSql_Response(struct soap *soap, const char *URL, struct ns1__AddFileToSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSql_Response(soap, p), 0) || ::soap_put_ns1__AddFileToSql_Response(soap, p, "ns1:AddFileToSql-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AddFileToSql_Response * SOAP_FMAC4 soap_get_ns1__AddFileToSql_Response(struct soap*, struct ns1__AddFileToSql_Response *, const char*, const char*);

inline int soap_read_ns1__AddFileToSql_Response(struct soap *soap, struct ns1__AddFileToSql_Response *p)
{
	if (p)
	{	::soap_default_ns1__AddFileToSql_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AddFileToSql_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddFileToSql_Response(struct soap *soap, const char *URL, struct ns1__AddFileToSql_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AddFileToSql_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AddFileToSql_Response(struct soap *soap, struct ns1__AddFileToSql_Response *p)
{
	if (::soap_read_ns1__AddFileToSql_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeStorageProcess__DEFINED
#define SOAP_TYPE_ns1__executeStorageProcess__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeStorageProcess_(struct soap*, struct ns1__executeStorageProcess_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeStorageProcess_(struct soap*, const struct ns1__executeStorageProcess_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeStorageProcess_(struct soap*, const char*, int, const struct ns1__executeStorageProcess_ *, const char*);
SOAP_FMAC3 struct ns1__executeStorageProcess_ * SOAP_FMAC4 soap_in_ns1__executeStorageProcess_(struct soap*, const char*, struct ns1__executeStorageProcess_ *, const char*);
SOAP_FMAC1 struct ns1__executeStorageProcess_ * SOAP_FMAC2 soap_instantiate_ns1__executeStorageProcess_(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeStorageProcess_ * soap_new_ns1__executeStorageProcess_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeStorageProcess_(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeStorageProcess_ * soap_new_req_ns1__executeStorageProcess_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& StorageProcessName,
	const std::wstring& Parameters)
{
	struct ns1__executeStorageProcess_ *_p = ::soap_new_ns1__executeStorageProcess_(soap);
	if (_p)
	{	::soap_default_ns1__executeStorageProcess_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->StorageProcessName = StorageProcessName;
		_p->Parameters = Parameters;
	}
	return _p;
}

inline struct ns1__executeStorageProcess_ * soap_new_set_ns1__executeStorageProcess_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& StorageProcessName,
	const std::wstring& Parameters)
{
	struct ns1__executeStorageProcess_ *_p = ::soap_new_ns1__executeStorageProcess_(soap);
	if (_p)
	{	::soap_default_ns1__executeStorageProcess_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->StorageProcessName = StorageProcessName;
		_p->Parameters = Parameters;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeStorageProcess_(struct soap*, const struct ns1__executeStorageProcess_ *, const char*, const char*);

inline int soap_write_ns1__executeStorageProcess_(struct soap *soap, struct ns1__executeStorageProcess_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeStorageProcess_(soap, p), 0) || ::soap_put_ns1__executeStorageProcess_(soap, p, "ns1:executeStorageProcess", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeStorageProcess_(struct soap *soap, const char *URL, struct ns1__executeStorageProcess_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcess_(soap, p), 0) || ::soap_put_ns1__executeStorageProcess_(soap, p, "ns1:executeStorageProcess", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeStorageProcess_(struct soap *soap, const char *URL, struct ns1__executeStorageProcess_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcess_(soap, p), 0) || ::soap_put_ns1__executeStorageProcess_(soap, p, "ns1:executeStorageProcess", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeStorageProcess_(struct soap *soap, const char *URL, struct ns1__executeStorageProcess_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcess_(soap, p), 0) || ::soap_put_ns1__executeStorageProcess_(soap, p, "ns1:executeStorageProcess", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeStorageProcess_ * SOAP_FMAC4 soap_get_ns1__executeStorageProcess_(struct soap*, struct ns1__executeStorageProcess_ *, const char*, const char*);

inline int soap_read_ns1__executeStorageProcess_(struct soap *soap, struct ns1__executeStorageProcess_ *p)
{
	if (p)
	{	::soap_default_ns1__executeStorageProcess_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeStorageProcess_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeStorageProcess_(struct soap *soap, const char *URL, struct ns1__executeStorageProcess_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeStorageProcess_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeStorageProcess_(struct soap *soap, struct ns1__executeStorageProcess_ *p)
{
	if (::soap_read_ns1__executeStorageProcess_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeStorageProcess_Response_DEFINED
#define SOAP_TYPE_ns1__executeStorageProcess_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeStorageProcess_Response(struct soap*, struct ns1__executeStorageProcess_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeStorageProcess_Response(struct soap*, const struct ns1__executeStorageProcess_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeStorageProcess_Response(struct soap*, const char*, int, const struct ns1__executeStorageProcess_Response *, const char*);
SOAP_FMAC3 struct ns1__executeStorageProcess_Response * SOAP_FMAC4 soap_in_ns1__executeStorageProcess_Response(struct soap*, const char*, struct ns1__executeStorageProcess_Response *, const char*);
SOAP_FMAC1 struct ns1__executeStorageProcess_Response * SOAP_FMAC2 soap_instantiate_ns1__executeStorageProcess_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeStorageProcess_Response * soap_new_ns1__executeStorageProcess_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeStorageProcess_Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeStorageProcess_Response * soap_new_req_ns1__executeStorageProcess_Response(
	struct soap *soap,
	const std::wstring& executeStorageProcessResult)
{
	struct ns1__executeStorageProcess_Response *_p = ::soap_new_ns1__executeStorageProcess_Response(soap);
	if (_p)
	{	::soap_default_ns1__executeStorageProcess_Response(soap, _p);
		_p->executeStorageProcessResult = executeStorageProcessResult;
	}
	return _p;
}

inline struct ns1__executeStorageProcess_Response * soap_new_set_ns1__executeStorageProcess_Response(
	struct soap *soap,
	const std::wstring& executeStorageProcessResult)
{
	struct ns1__executeStorageProcess_Response *_p = ::soap_new_ns1__executeStorageProcess_Response(soap);
	if (_p)
	{	::soap_default_ns1__executeStorageProcess_Response(soap, _p);
		_p->executeStorageProcessResult = executeStorageProcessResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeStorageProcess_Response(struct soap*, const struct ns1__executeStorageProcess_Response *, const char*, const char*);

inline int soap_write_ns1__executeStorageProcess_Response(struct soap *soap, struct ns1__executeStorageProcess_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeStorageProcess_Response(soap, p), 0) || ::soap_put_ns1__executeStorageProcess_Response(soap, p, "ns1:executeStorageProcess-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeStorageProcess_Response(struct soap *soap, const char *URL, struct ns1__executeStorageProcess_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcess_Response(soap, p), 0) || ::soap_put_ns1__executeStorageProcess_Response(soap, p, "ns1:executeStorageProcess-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeStorageProcess_Response(struct soap *soap, const char *URL, struct ns1__executeStorageProcess_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcess_Response(soap, p), 0) || ::soap_put_ns1__executeStorageProcess_Response(soap, p, "ns1:executeStorageProcess-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeStorageProcess_Response(struct soap *soap, const char *URL, struct ns1__executeStorageProcess_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcess_Response(soap, p), 0) || ::soap_put_ns1__executeStorageProcess_Response(soap, p, "ns1:executeStorageProcess-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeStorageProcess_Response * SOAP_FMAC4 soap_get_ns1__executeStorageProcess_Response(struct soap*, struct ns1__executeStorageProcess_Response *, const char*, const char*);

inline int soap_read_ns1__executeStorageProcess_Response(struct soap *soap, struct ns1__executeStorageProcess_Response *p)
{
	if (p)
	{	::soap_default_ns1__executeStorageProcess_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeStorageProcess_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeStorageProcess_Response(struct soap *soap, const char *URL, struct ns1__executeStorageProcess_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeStorageProcess_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeStorageProcess_Response(struct soap *soap, struct ns1__executeStorageProcess_Response *p)
{
	if (::soap_read_ns1__executeStorageProcess_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__insertXml__DEFINED
#define SOAP_TYPE_ns1__insertXml__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__insertXml_(struct soap*, struct ns1__insertXml_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__insertXml_(struct soap*, const struct ns1__insertXml_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__insertXml_(struct soap*, const char*, int, const struct ns1__insertXml_ *, const char*);
SOAP_FMAC3 struct ns1__insertXml_ * SOAP_FMAC4 soap_in_ns1__insertXml_(struct soap*, const char*, struct ns1__insertXml_ *, const char*);
SOAP_FMAC1 struct ns1__insertXml_ * SOAP_FMAC2 soap_instantiate_ns1__insertXml_(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__insertXml_ * soap_new_ns1__insertXml_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__insertXml_(soap, n, NULL, NULL, NULL);
}

inline struct ns1__insertXml_ * soap_new_req_ns1__insertXml_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strXml,
	bool encode)
{
	struct ns1__insertXml_ *_p = ::soap_new_ns1__insertXml_(soap);
	if (_p)
	{	::soap_default_ns1__insertXml_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strXml = strXml;
		_p->encode = encode;
	}
	return _p;
}

inline struct ns1__insertXml_ * soap_new_set_ns1__insertXml_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strXml,
	bool encode)
{
	struct ns1__insertXml_ *_p = ::soap_new_ns1__insertXml_(soap);
	if (_p)
	{	::soap_default_ns1__insertXml_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strXml = strXml;
		_p->encode = encode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__insertXml_(struct soap*, const struct ns1__insertXml_ *, const char*, const char*);

inline int soap_write_ns1__insertXml_(struct soap *soap, struct ns1__insertXml_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__insertXml_(soap, p), 0) || ::soap_put_ns1__insertXml_(soap, p, "ns1:insertXml", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__insertXml_(struct soap *soap, const char *URL, struct ns1__insertXml_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXml_(soap, p), 0) || ::soap_put_ns1__insertXml_(soap, p, "ns1:insertXml", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__insertXml_(struct soap *soap, const char *URL, struct ns1__insertXml_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXml_(soap, p), 0) || ::soap_put_ns1__insertXml_(soap, p, "ns1:insertXml", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__insertXml_(struct soap *soap, const char *URL, struct ns1__insertXml_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXml_(soap, p), 0) || ::soap_put_ns1__insertXml_(soap, p, "ns1:insertXml", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__insertXml_ * SOAP_FMAC4 soap_get_ns1__insertXml_(struct soap*, struct ns1__insertXml_ *, const char*, const char*);

inline int soap_read_ns1__insertXml_(struct soap *soap, struct ns1__insertXml_ *p)
{
	if (p)
	{	::soap_default_ns1__insertXml_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__insertXml_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__insertXml_(struct soap *soap, const char *URL, struct ns1__insertXml_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__insertXml_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__insertXml_(struct soap *soap, struct ns1__insertXml_ *p)
{
	if (::soap_read_ns1__insertXml_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__insertXml_Response_DEFINED
#define SOAP_TYPE_ns1__insertXml_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__insertXml_Response(struct soap*, struct ns1__insertXml_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__insertXml_Response(struct soap*, const struct ns1__insertXml_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__insertXml_Response(struct soap*, const char*, int, const struct ns1__insertXml_Response *, const char*);
SOAP_FMAC3 struct ns1__insertXml_Response * SOAP_FMAC4 soap_in_ns1__insertXml_Response(struct soap*, const char*, struct ns1__insertXml_Response *, const char*);
SOAP_FMAC1 struct ns1__insertXml_Response * SOAP_FMAC2 soap_instantiate_ns1__insertXml_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__insertXml_Response * soap_new_ns1__insertXml_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__insertXml_Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__insertXml_Response * soap_new_req_ns1__insertXml_Response(
	struct soap *soap,
	const std::wstring& insertXmlResult)
{
	struct ns1__insertXml_Response *_p = ::soap_new_ns1__insertXml_Response(soap);
	if (_p)
	{	::soap_default_ns1__insertXml_Response(soap, _p);
		_p->insertXmlResult = insertXmlResult;
	}
	return _p;
}

inline struct ns1__insertXml_Response * soap_new_set_ns1__insertXml_Response(
	struct soap *soap,
	const std::wstring& insertXmlResult)
{
	struct ns1__insertXml_Response *_p = ::soap_new_ns1__insertXml_Response(soap);
	if (_p)
	{	::soap_default_ns1__insertXml_Response(soap, _p);
		_p->insertXmlResult = insertXmlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__insertXml_Response(struct soap*, const struct ns1__insertXml_Response *, const char*, const char*);

inline int soap_write_ns1__insertXml_Response(struct soap *soap, struct ns1__insertXml_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__insertXml_Response(soap, p), 0) || ::soap_put_ns1__insertXml_Response(soap, p, "ns1:insertXml-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__insertXml_Response(struct soap *soap, const char *URL, struct ns1__insertXml_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXml_Response(soap, p), 0) || ::soap_put_ns1__insertXml_Response(soap, p, "ns1:insertXml-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__insertXml_Response(struct soap *soap, const char *URL, struct ns1__insertXml_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXml_Response(soap, p), 0) || ::soap_put_ns1__insertXml_Response(soap, p, "ns1:insertXml-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__insertXml_Response(struct soap *soap, const char *URL, struct ns1__insertXml_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXml_Response(soap, p), 0) || ::soap_put_ns1__insertXml_Response(soap, p, "ns1:insertXml-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__insertXml_Response * SOAP_FMAC4 soap_get_ns1__insertXml_Response(struct soap*, struct ns1__insertXml_Response *, const char*, const char*);

inline int soap_read_ns1__insertXml_Response(struct soap *soap, struct ns1__insertXml_Response *p)
{
	if (p)
	{	::soap_default_ns1__insertXml_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__insertXml_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__insertXml_Response(struct soap *soap, const char *URL, struct ns1__insertXml_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__insertXml_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__insertXml_Response(struct soap *soap, struct ns1__insertXml_Response *p)
{
	if (::soap_read_ns1__insertXml_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSql_USCOREencode__DEFINED
#define SOAP_TYPE_ns1__executeSql_USCOREencode__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREencode_(struct soap*, struct ns1__executeSql_USCOREencode_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREencode_(struct soap*, const struct ns1__executeSql_USCOREencode_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREencode_(struct soap*, const char*, int, const struct ns1__executeSql_USCOREencode_ *, const char*);
SOAP_FMAC3 struct ns1__executeSql_USCOREencode_ * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREencode_(struct soap*, const char*, struct ns1__executeSql_USCOREencode_ *, const char*);
SOAP_FMAC1 struct ns1__executeSql_USCOREencode_ * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREencode_(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSql_USCOREencode_ * soap_new_ns1__executeSql_USCOREencode_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSql_USCOREencode_(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSql_USCOREencode_ * soap_new_req_ns1__executeSql_USCOREencode_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql_USCOREencode_ *_p = ::soap_new_ns1__executeSql_USCOREencode_(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREencode_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct ns1__executeSql_USCOREencode_ * soap_new_set_ns1__executeSql_USCOREencode_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql_USCOREencode_ *_p = ::soap_new_ns1__executeSql_USCOREencode_(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREencode_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREencode_(struct soap*, const struct ns1__executeSql_USCOREencode_ *, const char*, const char*);

inline int soap_write_ns1__executeSql_USCOREencode_(struct soap *soap, struct ns1__executeSql_USCOREencode_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSql_USCOREencode_(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode_(soap, p, "ns1:executeSql_encode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSql_USCOREencode_(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencode_(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode_(soap, p, "ns1:executeSql_encode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSql_USCOREencode_(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencode_(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode_(soap, p, "ns1:executeSql_encode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSql_USCOREencode_(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencode_(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode_(soap, p, "ns1:executeSql_encode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSql_USCOREencode_ * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREencode_(struct soap*, struct ns1__executeSql_USCOREencode_ *, const char*, const char*);

inline int soap_read_ns1__executeSql_USCOREencode_(struct soap *soap, struct ns1__executeSql_USCOREencode_ *p)
{
	if (p)
	{	::soap_default_ns1__executeSql_USCOREencode_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSql_USCOREencode_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSql_USCOREencode_(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSql_USCOREencode_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSql_USCOREencode_(struct soap *soap, struct ns1__executeSql_USCOREencode_ *p)
{
	if (::soap_read_ns1__executeSql_USCOREencode_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSql_USCOREencode_Response_DEFINED
#define SOAP_TYPE_ns1__executeSql_USCOREencode_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREencode_Response(struct soap*, struct ns1__executeSql_USCOREencode_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREencode_Response(struct soap*, const struct ns1__executeSql_USCOREencode_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREencode_Response(struct soap*, const char*, int, const struct ns1__executeSql_USCOREencode_Response *, const char*);
SOAP_FMAC3 struct ns1__executeSql_USCOREencode_Response * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREencode_Response(struct soap*, const char*, struct ns1__executeSql_USCOREencode_Response *, const char*);
SOAP_FMAC1 struct ns1__executeSql_USCOREencode_Response * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREencode_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSql_USCOREencode_Response * soap_new_ns1__executeSql_USCOREencode_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSql_USCOREencode_Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSql_USCOREencode_Response * soap_new_req_ns1__executeSql_USCOREencode_Response(
	struct soap *soap,
	const std::wstring& executeSql_USCOREencodeResult)
{
	struct ns1__executeSql_USCOREencode_Response *_p = ::soap_new_ns1__executeSql_USCOREencode_Response(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREencode_Response(soap, _p);
		_p->executeSql_USCOREencodeResult = executeSql_USCOREencodeResult;
	}
	return _p;
}

inline struct ns1__executeSql_USCOREencode_Response * soap_new_set_ns1__executeSql_USCOREencode_Response(
	struct soap *soap,
	const std::wstring& executeSql_USCOREencodeResult)
{
	struct ns1__executeSql_USCOREencode_Response *_p = ::soap_new_ns1__executeSql_USCOREencode_Response(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREencode_Response(soap, _p);
		_p->executeSql_USCOREencodeResult = executeSql_USCOREencodeResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREencode_Response(struct soap*, const struct ns1__executeSql_USCOREencode_Response *, const char*, const char*);

inline int soap_write_ns1__executeSql_USCOREencode_Response(struct soap *soap, struct ns1__executeSql_USCOREencode_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSql_USCOREencode_Response(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode_Response(soap, p, "ns1:executeSql_encode-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSql_USCOREencode_Response(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencode_Response(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode_Response(soap, p, "ns1:executeSql_encode-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSql_USCOREencode_Response(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencode_Response(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode_Response(soap, p, "ns1:executeSql_encode-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSql_USCOREencode_Response(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencode_Response(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode_Response(soap, p, "ns1:executeSql_encode-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSql_USCOREencode_Response * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREencode_Response(struct soap*, struct ns1__executeSql_USCOREencode_Response *, const char*, const char*);

inline int soap_read_ns1__executeSql_USCOREencode_Response(struct soap *soap, struct ns1__executeSql_USCOREencode_Response *p)
{
	if (p)
	{	::soap_default_ns1__executeSql_USCOREencode_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSql_USCOREencode_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSql_USCOREencode_Response(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSql_USCOREencode_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSql_USCOREencode_Response(struct soap *soap, struct ns1__executeSql_USCOREencode_Response *p)
{
	if (::soap_read_ns1__executeSql_USCOREencode_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSql_USCOREbackEncord__DEFINED
#define SOAP_TYPE_ns1__executeSql_USCOREbackEncord__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREbackEncord_(struct soap*, struct ns1__executeSql_USCOREbackEncord_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREbackEncord_(struct soap*, const struct ns1__executeSql_USCOREbackEncord_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREbackEncord_(struct soap*, const char*, int, const struct ns1__executeSql_USCOREbackEncord_ *, const char*);
SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord_ * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREbackEncord_(struct soap*, const char*, struct ns1__executeSql_USCOREbackEncord_ *, const char*);
SOAP_FMAC1 struct ns1__executeSql_USCOREbackEncord_ * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREbackEncord_(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSql_USCOREbackEncord_ * soap_new_ns1__executeSql_USCOREbackEncord_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSql_USCOREbackEncord_(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSql_USCOREbackEncord_ * soap_new_req_ns1__executeSql_USCOREbackEncord_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql_USCOREbackEncord_ *_p = ::soap_new_ns1__executeSql_USCOREbackEncord_(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREbackEncord_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct ns1__executeSql_USCOREbackEncord_ * soap_new_set_ns1__executeSql_USCOREbackEncord_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql_USCOREbackEncord_ *_p = ::soap_new_ns1__executeSql_USCOREbackEncord_(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREbackEncord_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREbackEncord_(struct soap*, const struct ns1__executeSql_USCOREbackEncord_ *, const char*, const char*);

inline int soap_write_ns1__executeSql_USCOREbackEncord_(struct soap *soap, struct ns1__executeSql_USCOREbackEncord_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSql_USCOREbackEncord_(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord_(soap, p, "ns1:executeSql_backEncord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSql_USCOREbackEncord_(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncord_(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord_(soap, p, "ns1:executeSql_backEncord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSql_USCOREbackEncord_(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncord_(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord_(soap, p, "ns1:executeSql_backEncord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSql_USCOREbackEncord_(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncord_(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord_(soap, p, "ns1:executeSql_backEncord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord_ * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREbackEncord_(struct soap*, struct ns1__executeSql_USCOREbackEncord_ *, const char*, const char*);

inline int soap_read_ns1__executeSql_USCOREbackEncord_(struct soap *soap, struct ns1__executeSql_USCOREbackEncord_ *p)
{
	if (p)
	{	::soap_default_ns1__executeSql_USCOREbackEncord_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSql_USCOREbackEncord_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSql_USCOREbackEncord_(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSql_USCOREbackEncord_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSql_USCOREbackEncord_(struct soap *soap, struct ns1__executeSql_USCOREbackEncord_ *p)
{
	if (::soap_read_ns1__executeSql_USCOREbackEncord_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response_DEFINED
#define SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREbackEncord_Response(struct soap*, struct ns1__executeSql_USCOREbackEncord_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREbackEncord_Response(struct soap*, const struct ns1__executeSql_USCOREbackEncord_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREbackEncord_Response(struct soap*, const char*, int, const struct ns1__executeSql_USCOREbackEncord_Response *, const char*);
SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord_Response * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREbackEncord_Response(struct soap*, const char*, struct ns1__executeSql_USCOREbackEncord_Response *, const char*);
SOAP_FMAC1 struct ns1__executeSql_USCOREbackEncord_Response * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREbackEncord_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSql_USCOREbackEncord_Response * soap_new_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSql_USCOREbackEncord_Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSql_USCOREbackEncord_Response * soap_new_req_ns1__executeSql_USCOREbackEncord_Response(
	struct soap *soap,
	const std::wstring& executeSql_USCOREbackEncordResult)
{
	struct ns1__executeSql_USCOREbackEncord_Response *_p = ::soap_new_ns1__executeSql_USCOREbackEncord_Response(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREbackEncord_Response(soap, _p);
		_p->executeSql_USCOREbackEncordResult = executeSql_USCOREbackEncordResult;
	}
	return _p;
}

inline struct ns1__executeSql_USCOREbackEncord_Response * soap_new_set_ns1__executeSql_USCOREbackEncord_Response(
	struct soap *soap,
	const std::wstring& executeSql_USCOREbackEncordResult)
{
	struct ns1__executeSql_USCOREbackEncord_Response *_p = ::soap_new_ns1__executeSql_USCOREbackEncord_Response(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREbackEncord_Response(soap, _p);
		_p->executeSql_USCOREbackEncordResult = executeSql_USCOREbackEncordResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREbackEncord_Response(struct soap*, const struct ns1__executeSql_USCOREbackEncord_Response *, const char*, const char*);

inline int soap_write_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, struct ns1__executeSql_USCOREbackEncord_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSql_USCOREbackEncord_Response(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord_Response(soap, p, "ns1:executeSql_backEncord-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncord_Response(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord_Response(soap, p, "ns1:executeSql_backEncord-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncord_Response(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord_Response(soap, p, "ns1:executeSql_backEncord-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncord_Response(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord_Response(soap, p, "ns1:executeSql_backEncord-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord_Response * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREbackEncord_Response(struct soap*, struct ns1__executeSql_USCOREbackEncord_Response *, const char*, const char*);

inline int soap_read_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, struct ns1__executeSql_USCOREbackEncord_Response *p)
{
	if (p)
	{	::soap_default_ns1__executeSql_USCOREbackEncord_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSql_USCOREbackEncord_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSql_USCOREbackEncord_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, struct ns1__executeSql_USCOREbackEncord_Response *p)
{
	if (::soap_read_ns1__executeSql_USCOREbackEncord_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSql__DEFINED
#define SOAP_TYPE_ns1__executeSql__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_(struct soap*, struct ns1__executeSql_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_(struct soap*, const struct ns1__executeSql_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_(struct soap*, const char*, int, const struct ns1__executeSql_ *, const char*);
SOAP_FMAC3 struct ns1__executeSql_ * SOAP_FMAC4 soap_in_ns1__executeSql_(struct soap*, const char*, struct ns1__executeSql_ *, const char*);
SOAP_FMAC1 struct ns1__executeSql_ * SOAP_FMAC2 soap_instantiate_ns1__executeSql_(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSql_ * soap_new_ns1__executeSql_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSql_(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSql_ * soap_new_req_ns1__executeSql_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql_ *_p = ::soap_new_ns1__executeSql_(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct ns1__executeSql_ * soap_new_set_ns1__executeSql_(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql_ *_p = ::soap_new_ns1__executeSql_(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_(struct soap*, const struct ns1__executeSql_ *, const char*, const char*);

inline int soap_write_ns1__executeSql_(struct soap *soap, struct ns1__executeSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSql_(soap, p), 0) || ::soap_put_ns1__executeSql_(soap, p, "ns1:executeSql", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSql_(struct soap *soap, const char *URL, struct ns1__executeSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_(soap, p), 0) || ::soap_put_ns1__executeSql_(soap, p, "ns1:executeSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSql_(struct soap *soap, const char *URL, struct ns1__executeSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_(soap, p), 0) || ::soap_put_ns1__executeSql_(soap, p, "ns1:executeSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSql_(struct soap *soap, const char *URL, struct ns1__executeSql_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_(soap, p), 0) || ::soap_put_ns1__executeSql_(soap, p, "ns1:executeSql", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSql_ * SOAP_FMAC4 soap_get_ns1__executeSql_(struct soap*, struct ns1__executeSql_ *, const char*, const char*);

inline int soap_read_ns1__executeSql_(struct soap *soap, struct ns1__executeSql_ *p)
{
	if (p)
	{	::soap_default_ns1__executeSql_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSql_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSql_(struct soap *soap, const char *URL, struct ns1__executeSql_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSql_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSql_(struct soap *soap, struct ns1__executeSql_ *p)
{
	if (::soap_read_ns1__executeSql_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSql_Response_DEFINED
#define SOAP_TYPE_ns1__executeSql_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_Response(struct soap*, struct ns1__executeSql_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_Response(struct soap*, const struct ns1__executeSql_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_Response(struct soap*, const char*, int, const struct ns1__executeSql_Response *, const char*);
SOAP_FMAC3 struct ns1__executeSql_Response * SOAP_FMAC4 soap_in_ns1__executeSql_Response(struct soap*, const char*, struct ns1__executeSql_Response *, const char*);
SOAP_FMAC1 struct ns1__executeSql_Response * SOAP_FMAC2 soap_instantiate_ns1__executeSql_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSql_Response * soap_new_ns1__executeSql_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSql_Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSql_Response * soap_new_req_ns1__executeSql_Response(
	struct soap *soap,
	const std::wstring& executeSqlResult)
{
	struct ns1__executeSql_Response *_p = ::soap_new_ns1__executeSql_Response(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_Response(soap, _p);
		_p->executeSqlResult = executeSqlResult;
	}
	return _p;
}

inline struct ns1__executeSql_Response * soap_new_set_ns1__executeSql_Response(
	struct soap *soap,
	const std::wstring& executeSqlResult)
{
	struct ns1__executeSql_Response *_p = ::soap_new_ns1__executeSql_Response(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_Response(soap, _p);
		_p->executeSqlResult = executeSqlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_Response(struct soap*, const struct ns1__executeSql_Response *, const char*, const char*);

inline int soap_write_ns1__executeSql_Response(struct soap *soap, struct ns1__executeSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSql_Response(soap, p), 0) || ::soap_put_ns1__executeSql_Response(soap, p, "ns1:executeSql-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSql_Response(struct soap *soap, const char *URL, struct ns1__executeSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_Response(soap, p), 0) || ::soap_put_ns1__executeSql_Response(soap, p, "ns1:executeSql-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSql_Response(struct soap *soap, const char *URL, struct ns1__executeSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_Response(soap, p), 0) || ::soap_put_ns1__executeSql_Response(soap, p, "ns1:executeSql-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSql_Response(struct soap *soap, const char *URL, struct ns1__executeSql_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_Response(soap, p), 0) || ::soap_put_ns1__executeSql_Response(soap, p, "ns1:executeSql-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSql_Response * SOAP_FMAC4 soap_get_ns1__executeSql_Response(struct soap*, struct ns1__executeSql_Response *, const char*, const char*);

inline int soap_read_ns1__executeSql_Response(struct soap *soap, struct ns1__executeSql_Response *p)
{
	if (p)
	{	::soap_default_ns1__executeSql_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSql_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSql_Response(struct soap *soap, const char *URL, struct ns1__executeSql_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSql_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSql_Response(struct soap *soap, struct ns1__executeSql_Response *p)
{
	if (::soap_read_ns1__executeSql_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TestLinkSqlserver__DEFINED
#define SOAP_TYPE_ns1__TestLinkSqlserver__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__TestLinkSqlserver_(struct soap*, struct ns1__TestLinkSqlserver_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__TestLinkSqlserver_(struct soap*, const struct ns1__TestLinkSqlserver_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TestLinkSqlserver_(struct soap*, const char*, int, const struct ns1__TestLinkSqlserver_ *, const char*);
SOAP_FMAC3 struct ns1__TestLinkSqlserver_ * SOAP_FMAC4 soap_in_ns1__TestLinkSqlserver_(struct soap*, const char*, struct ns1__TestLinkSqlserver_ *, const char*);
SOAP_FMAC1 struct ns1__TestLinkSqlserver_ * SOAP_FMAC2 soap_instantiate_ns1__TestLinkSqlserver_(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__TestLinkSqlserver_ * soap_new_ns1__TestLinkSqlserver_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TestLinkSqlserver_(soap, n, NULL, NULL, NULL);
}

inline struct ns1__TestLinkSqlserver_ * soap_new_req_ns1__TestLinkSqlserver_(
	struct soap *soap,
	const std::wstring& serverInfo)
{
	struct ns1__TestLinkSqlserver_ *_p = ::soap_new_ns1__TestLinkSqlserver_(soap);
	if (_p)
	{	::soap_default_ns1__TestLinkSqlserver_(soap, _p);
		_p->serverInfo = serverInfo;
	}
	return _p;
}

inline struct ns1__TestLinkSqlserver_ * soap_new_set_ns1__TestLinkSqlserver_(
	struct soap *soap,
	const std::wstring& serverInfo)
{
	struct ns1__TestLinkSqlserver_ *_p = ::soap_new_ns1__TestLinkSqlserver_(soap);
	if (_p)
	{	::soap_default_ns1__TestLinkSqlserver_(soap, _p);
		_p->serverInfo = serverInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__TestLinkSqlserver_(struct soap*, const struct ns1__TestLinkSqlserver_ *, const char*, const char*);

inline int soap_write_ns1__TestLinkSqlserver_(struct soap *soap, struct ns1__TestLinkSqlserver_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__TestLinkSqlserver_(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver_(soap, p, "ns1:TestLinkSqlserver", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TestLinkSqlserver_(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserver_(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver_(soap, p, "ns1:TestLinkSqlserver", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TestLinkSqlserver_(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserver_(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver_(soap, p, "ns1:TestLinkSqlserver", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TestLinkSqlserver_(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserver_(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver_(soap, p, "ns1:TestLinkSqlserver", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__TestLinkSqlserver_ * SOAP_FMAC4 soap_get_ns1__TestLinkSqlserver_(struct soap*, struct ns1__TestLinkSqlserver_ *, const char*, const char*);

inline int soap_read_ns1__TestLinkSqlserver_(struct soap *soap, struct ns1__TestLinkSqlserver_ *p)
{
	if (p)
	{	::soap_default_ns1__TestLinkSqlserver_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TestLinkSqlserver_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TestLinkSqlserver_(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TestLinkSqlserver_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TestLinkSqlserver_(struct soap *soap, struct ns1__TestLinkSqlserver_ *p)
{
	if (::soap_read_ns1__TestLinkSqlserver_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TestLinkSqlserver_Response_DEFINED
#define SOAP_TYPE_ns1__TestLinkSqlserver_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__TestLinkSqlserver_Response(struct soap*, struct ns1__TestLinkSqlserver_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__TestLinkSqlserver_Response(struct soap*, const struct ns1__TestLinkSqlserver_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TestLinkSqlserver_Response(struct soap*, const char*, int, const struct ns1__TestLinkSqlserver_Response *, const char*);
SOAP_FMAC3 struct ns1__TestLinkSqlserver_Response * SOAP_FMAC4 soap_in_ns1__TestLinkSqlserver_Response(struct soap*, const char*, struct ns1__TestLinkSqlserver_Response *, const char*);
SOAP_FMAC1 struct ns1__TestLinkSqlserver_Response * SOAP_FMAC2 soap_instantiate_ns1__TestLinkSqlserver_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__TestLinkSqlserver_Response * soap_new_ns1__TestLinkSqlserver_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TestLinkSqlserver_Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__TestLinkSqlserver_Response * soap_new_req_ns1__TestLinkSqlserver_Response(
	struct soap *soap,
	const std::wstring& TestLinkSqlserverResult)
{
	struct ns1__TestLinkSqlserver_Response *_p = ::soap_new_ns1__TestLinkSqlserver_Response(soap);
	if (_p)
	{	::soap_default_ns1__TestLinkSqlserver_Response(soap, _p);
		_p->TestLinkSqlserverResult = TestLinkSqlserverResult;
	}
	return _p;
}

inline struct ns1__TestLinkSqlserver_Response * soap_new_set_ns1__TestLinkSqlserver_Response(
	struct soap *soap,
	const std::wstring& TestLinkSqlserverResult)
{
	struct ns1__TestLinkSqlserver_Response *_p = ::soap_new_ns1__TestLinkSqlserver_Response(soap);
	if (_p)
	{	::soap_default_ns1__TestLinkSqlserver_Response(soap, _p);
		_p->TestLinkSqlserverResult = TestLinkSqlserverResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__TestLinkSqlserver_Response(struct soap*, const struct ns1__TestLinkSqlserver_Response *, const char*, const char*);

inline int soap_write_ns1__TestLinkSqlserver_Response(struct soap *soap, struct ns1__TestLinkSqlserver_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__TestLinkSqlserver_Response(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver_Response(soap, p, "ns1:TestLinkSqlserver-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TestLinkSqlserver_Response(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserver_Response(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver_Response(soap, p, "ns1:TestLinkSqlserver-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TestLinkSqlserver_Response(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserver_Response(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver_Response(soap, p, "ns1:TestLinkSqlserver-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TestLinkSqlserver_Response(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserver_Response(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver_Response(soap, p, "ns1:TestLinkSqlserver-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__TestLinkSqlserver_Response * SOAP_FMAC4 soap_get_ns1__TestLinkSqlserver_Response(struct soap*, struct ns1__TestLinkSqlserver_Response *, const char*, const char*);

inline int soap_read_ns1__TestLinkSqlserver_Response(struct soap *soap, struct ns1__TestLinkSqlserver_Response *p)
{
	if (p)
	{	::soap_default_ns1__TestLinkSqlserver_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TestLinkSqlserver_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TestLinkSqlserver_Response(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TestLinkSqlserver_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TestLinkSqlserver_Response(struct soap *soap, struct ns1__TestLinkSqlserver_Response *p)
{
	if (::soap_read_ns1__TestLinkSqlserver_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__showExistLink__DEFINED
#define SOAP_TYPE_ns1__showExistLink__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__showExistLink_(struct soap*, struct ns1__showExistLink_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__showExistLink_(struct soap*, const struct ns1__showExistLink_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__showExistLink_(struct soap*, const char*, int, const struct ns1__showExistLink_ *, const char*);
SOAP_FMAC3 struct ns1__showExistLink_ * SOAP_FMAC4 soap_in_ns1__showExistLink_(struct soap*, const char*, struct ns1__showExistLink_ *, const char*);
SOAP_FMAC1 struct ns1__showExistLink_ * SOAP_FMAC2 soap_instantiate_ns1__showExistLink_(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__showExistLink_ * soap_new_ns1__showExistLink_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__showExistLink_(soap, n, NULL, NULL, NULL);
}

inline struct ns1__showExistLink_ * soap_new_req_ns1__showExistLink_(
	struct soap *soap)
{
	struct ns1__showExistLink_ *_p = ::soap_new_ns1__showExistLink_(soap);
	if (_p)
	{	::soap_default_ns1__showExistLink_(soap, _p);
	}
	return _p;
}

inline struct ns1__showExistLink_ * soap_new_set_ns1__showExistLink_(
	struct soap *soap)
{
	struct ns1__showExistLink_ *_p = ::soap_new_ns1__showExistLink_(soap);
	if (_p)
	{	::soap_default_ns1__showExistLink_(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__showExistLink_(struct soap*, const struct ns1__showExistLink_ *, const char*, const char*);

inline int soap_write_ns1__showExistLink_(struct soap *soap, struct ns1__showExistLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__showExistLink_(soap, p), 0) || ::soap_put_ns1__showExistLink_(soap, p, "ns1:showExistLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__showExistLink_(struct soap *soap, const char *URL, struct ns1__showExistLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLink_(soap, p), 0) || ::soap_put_ns1__showExistLink_(soap, p, "ns1:showExistLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__showExistLink_(struct soap *soap, const char *URL, struct ns1__showExistLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLink_(soap, p), 0) || ::soap_put_ns1__showExistLink_(soap, p, "ns1:showExistLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__showExistLink_(struct soap *soap, const char *URL, struct ns1__showExistLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLink_(soap, p), 0) || ::soap_put_ns1__showExistLink_(soap, p, "ns1:showExistLink", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__showExistLink_ * SOAP_FMAC4 soap_get_ns1__showExistLink_(struct soap*, struct ns1__showExistLink_ *, const char*, const char*);

inline int soap_read_ns1__showExistLink_(struct soap *soap, struct ns1__showExistLink_ *p)
{
	if (p)
	{	::soap_default_ns1__showExistLink_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__showExistLink_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__showExistLink_(struct soap *soap, const char *URL, struct ns1__showExistLink_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__showExistLink_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__showExistLink_(struct soap *soap, struct ns1__showExistLink_ *p)
{
	if (::soap_read_ns1__showExistLink_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__showExistLink_Response_DEFINED
#define SOAP_TYPE_ns1__showExistLink_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__showExistLink_Response(struct soap*, struct ns1__showExistLink_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__showExistLink_Response(struct soap*, const struct ns1__showExistLink_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__showExistLink_Response(struct soap*, const char*, int, const struct ns1__showExistLink_Response *, const char*);
SOAP_FMAC3 struct ns1__showExistLink_Response * SOAP_FMAC4 soap_in_ns1__showExistLink_Response(struct soap*, const char*, struct ns1__showExistLink_Response *, const char*);
SOAP_FMAC1 struct ns1__showExistLink_Response * SOAP_FMAC2 soap_instantiate_ns1__showExistLink_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__showExistLink_Response * soap_new_ns1__showExistLink_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__showExistLink_Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__showExistLink_Response * soap_new_req_ns1__showExistLink_Response(
	struct soap *soap,
	const std::wstring& showExistLinkResult)
{
	struct ns1__showExistLink_Response *_p = ::soap_new_ns1__showExistLink_Response(soap);
	if (_p)
	{	::soap_default_ns1__showExistLink_Response(soap, _p);
		_p->showExistLinkResult = showExistLinkResult;
	}
	return _p;
}

inline struct ns1__showExistLink_Response * soap_new_set_ns1__showExistLink_Response(
	struct soap *soap,
	const std::wstring& showExistLinkResult)
{
	struct ns1__showExistLink_Response *_p = ::soap_new_ns1__showExistLink_Response(soap);
	if (_p)
	{	::soap_default_ns1__showExistLink_Response(soap, _p);
		_p->showExistLinkResult = showExistLinkResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__showExistLink_Response(struct soap*, const struct ns1__showExistLink_Response *, const char*, const char*);

inline int soap_write_ns1__showExistLink_Response(struct soap *soap, struct ns1__showExistLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__showExistLink_Response(soap, p), 0) || ::soap_put_ns1__showExistLink_Response(soap, p, "ns1:showExistLink-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__showExistLink_Response(struct soap *soap, const char *URL, struct ns1__showExistLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLink_Response(soap, p), 0) || ::soap_put_ns1__showExistLink_Response(soap, p, "ns1:showExistLink-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__showExistLink_Response(struct soap *soap, const char *URL, struct ns1__showExistLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLink_Response(soap, p), 0) || ::soap_put_ns1__showExistLink_Response(soap, p, "ns1:showExistLink-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__showExistLink_Response(struct soap *soap, const char *URL, struct ns1__showExistLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLink_Response(soap, p), 0) || ::soap_put_ns1__showExistLink_Response(soap, p, "ns1:showExistLink-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__showExistLink_Response * SOAP_FMAC4 soap_get_ns1__showExistLink_Response(struct soap*, struct ns1__showExistLink_Response *, const char*, const char*);

inline int soap_read_ns1__showExistLink_Response(struct soap *soap, struct ns1__showExistLink_Response *p)
{
	if (p)
	{	::soap_default_ns1__showExistLink_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__showExistLink_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__showExistLink_Response(struct soap *soap, const char *URL, struct ns1__showExistLink_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__showExistLink_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__showExistLink_Response(struct soap *soap, struct ns1__showExistLink_Response *p)
{
	if (::soap_read_ns1__showExistLink_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__clearLink__DEFINED
#define SOAP_TYPE_ns1__clearLink__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__clearLink_(struct soap*, struct ns1__clearLink_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__clearLink_(struct soap*, const struct ns1__clearLink_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__clearLink_(struct soap*, const char*, int, const struct ns1__clearLink_ *, const char*);
SOAP_FMAC3 struct ns1__clearLink_ * SOAP_FMAC4 soap_in_ns1__clearLink_(struct soap*, const char*, struct ns1__clearLink_ *, const char*);
SOAP_FMAC1 struct ns1__clearLink_ * SOAP_FMAC2 soap_instantiate_ns1__clearLink_(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__clearLink_ * soap_new_ns1__clearLink_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__clearLink_(soap, n, NULL, NULL, NULL);
}

inline struct ns1__clearLink_ * soap_new_req_ns1__clearLink_(
	struct soap *soap,
	bool bTimeContrl)
{
	struct ns1__clearLink_ *_p = ::soap_new_ns1__clearLink_(soap);
	if (_p)
	{	::soap_default_ns1__clearLink_(soap, _p);
		_p->bTimeContrl = bTimeContrl;
	}
	return _p;
}

inline struct ns1__clearLink_ * soap_new_set_ns1__clearLink_(
	struct soap *soap,
	bool bTimeContrl)
{
	struct ns1__clearLink_ *_p = ::soap_new_ns1__clearLink_(soap);
	if (_p)
	{	::soap_default_ns1__clearLink_(soap, _p);
		_p->bTimeContrl = bTimeContrl;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__clearLink_(struct soap*, const struct ns1__clearLink_ *, const char*, const char*);

inline int soap_write_ns1__clearLink_(struct soap *soap, struct ns1__clearLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__clearLink_(soap, p), 0) || ::soap_put_ns1__clearLink_(soap, p, "ns1:clearLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__clearLink_(struct soap *soap, const char *URL, struct ns1__clearLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLink_(soap, p), 0) || ::soap_put_ns1__clearLink_(soap, p, "ns1:clearLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__clearLink_(struct soap *soap, const char *URL, struct ns1__clearLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLink_(soap, p), 0) || ::soap_put_ns1__clearLink_(soap, p, "ns1:clearLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__clearLink_(struct soap *soap, const char *URL, struct ns1__clearLink_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLink_(soap, p), 0) || ::soap_put_ns1__clearLink_(soap, p, "ns1:clearLink", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__clearLink_ * SOAP_FMAC4 soap_get_ns1__clearLink_(struct soap*, struct ns1__clearLink_ *, const char*, const char*);

inline int soap_read_ns1__clearLink_(struct soap *soap, struct ns1__clearLink_ *p)
{
	if (p)
	{	::soap_default_ns1__clearLink_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__clearLink_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__clearLink_(struct soap *soap, const char *URL, struct ns1__clearLink_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__clearLink_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__clearLink_(struct soap *soap, struct ns1__clearLink_ *p)
{
	if (::soap_read_ns1__clearLink_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__clearLink_Response_DEFINED
#define SOAP_TYPE_ns1__clearLink_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__clearLink_Response(struct soap*, struct ns1__clearLink_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__clearLink_Response(struct soap*, const struct ns1__clearLink_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__clearLink_Response(struct soap*, const char*, int, const struct ns1__clearLink_Response *, const char*);
SOAP_FMAC3 struct ns1__clearLink_Response * SOAP_FMAC4 soap_in_ns1__clearLink_Response(struct soap*, const char*, struct ns1__clearLink_Response *, const char*);
SOAP_FMAC1 struct ns1__clearLink_Response * SOAP_FMAC2 soap_instantiate_ns1__clearLink_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__clearLink_Response * soap_new_ns1__clearLink_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__clearLink_Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__clearLink_Response * soap_new_req_ns1__clearLink_Response(
	struct soap *soap,
	const std::wstring& clearLinkResult)
{
	struct ns1__clearLink_Response *_p = ::soap_new_ns1__clearLink_Response(soap);
	if (_p)
	{	::soap_default_ns1__clearLink_Response(soap, _p);
		_p->clearLinkResult = clearLinkResult;
	}
	return _p;
}

inline struct ns1__clearLink_Response * soap_new_set_ns1__clearLink_Response(
	struct soap *soap,
	const std::wstring& clearLinkResult)
{
	struct ns1__clearLink_Response *_p = ::soap_new_ns1__clearLink_Response(soap);
	if (_p)
	{	::soap_default_ns1__clearLink_Response(soap, _p);
		_p->clearLinkResult = clearLinkResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__clearLink_Response(struct soap*, const struct ns1__clearLink_Response *, const char*, const char*);

inline int soap_write_ns1__clearLink_Response(struct soap *soap, struct ns1__clearLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__clearLink_Response(soap, p), 0) || ::soap_put_ns1__clearLink_Response(soap, p, "ns1:clearLink-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__clearLink_Response(struct soap *soap, const char *URL, struct ns1__clearLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLink_Response(soap, p), 0) || ::soap_put_ns1__clearLink_Response(soap, p, "ns1:clearLink-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__clearLink_Response(struct soap *soap, const char *URL, struct ns1__clearLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLink_Response(soap, p), 0) || ::soap_put_ns1__clearLink_Response(soap, p, "ns1:clearLink-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__clearLink_Response(struct soap *soap, const char *URL, struct ns1__clearLink_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLink_Response(soap, p), 0) || ::soap_put_ns1__clearLink_Response(soap, p, "ns1:clearLink-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__clearLink_Response * SOAP_FMAC4 soap_get_ns1__clearLink_Response(struct soap*, struct ns1__clearLink_Response *, const char*, const char*);

inline int soap_read_ns1__clearLink_Response(struct soap *soap, struct ns1__clearLink_Response *p)
{
	if (p)
	{	::soap_default_ns1__clearLink_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__clearLink_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__clearLink_Response(struct soap *soap, const char *URL, struct ns1__clearLink_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__clearLink_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__clearLink_Response(struct soap *soap, struct ns1__clearLink_Response *p)
{
	if (::soap_read_ns1__clearLink_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AddNumbers__DEFINED
#define SOAP_TYPE_ns1__AddNumbers__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddNumbers_(struct soap*, struct ns1__AddNumbers_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddNumbers_(struct soap*, const struct ns1__AddNumbers_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddNumbers_(struct soap*, const char*, int, const struct ns1__AddNumbers_ *, const char*);
SOAP_FMAC3 struct ns1__AddNumbers_ * SOAP_FMAC4 soap_in_ns1__AddNumbers_(struct soap*, const char*, struct ns1__AddNumbers_ *, const char*);
SOAP_FMAC1 struct ns1__AddNumbers_ * SOAP_FMAC2 soap_instantiate_ns1__AddNumbers_(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AddNumbers_ * soap_new_ns1__AddNumbers_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AddNumbers_(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AddNumbers_ * soap_new_req_ns1__AddNumbers_(
	struct soap *soap,
	int NumberOne,
	int NumberTwo)
{
	struct ns1__AddNumbers_ *_p = ::soap_new_ns1__AddNumbers_(soap);
	if (_p)
	{	::soap_default_ns1__AddNumbers_(soap, _p);
		_p->NumberOne = NumberOne;
		_p->NumberTwo = NumberTwo;
	}
	return _p;
}

inline struct ns1__AddNumbers_ * soap_new_set_ns1__AddNumbers_(
	struct soap *soap,
	int NumberOne,
	int NumberTwo)
{
	struct ns1__AddNumbers_ *_p = ::soap_new_ns1__AddNumbers_(soap);
	if (_p)
	{	::soap_default_ns1__AddNumbers_(soap, _p);
		_p->NumberOne = NumberOne;
		_p->NumberTwo = NumberTwo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddNumbers_(struct soap*, const struct ns1__AddNumbers_ *, const char*, const char*);

inline int soap_write_ns1__AddNumbers_(struct soap *soap, struct ns1__AddNumbers_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AddNumbers_(soap, p), 0) || ::soap_put_ns1__AddNumbers_(soap, p, "ns1:AddNumbers", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddNumbers_(struct soap *soap, const char *URL, struct ns1__AddNumbers_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbers_(soap, p), 0) || ::soap_put_ns1__AddNumbers_(soap, p, "ns1:AddNumbers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AddNumbers_(struct soap *soap, const char *URL, struct ns1__AddNumbers_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbers_(soap, p), 0) || ::soap_put_ns1__AddNumbers_(soap, p, "ns1:AddNumbers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddNumbers_(struct soap *soap, const char *URL, struct ns1__AddNumbers_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbers_(soap, p), 0) || ::soap_put_ns1__AddNumbers_(soap, p, "ns1:AddNumbers", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AddNumbers_ * SOAP_FMAC4 soap_get_ns1__AddNumbers_(struct soap*, struct ns1__AddNumbers_ *, const char*, const char*);

inline int soap_read_ns1__AddNumbers_(struct soap *soap, struct ns1__AddNumbers_ *p)
{
	if (p)
	{	::soap_default_ns1__AddNumbers_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AddNumbers_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddNumbers_(struct soap *soap, const char *URL, struct ns1__AddNumbers_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AddNumbers_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AddNumbers_(struct soap *soap, struct ns1__AddNumbers_ *p)
{
	if (::soap_read_ns1__AddNumbers_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AddNumbers_Response_DEFINED
#define SOAP_TYPE_ns1__AddNumbers_Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddNumbers_Response(struct soap*, struct ns1__AddNumbers_Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddNumbers_Response(struct soap*, const struct ns1__AddNumbers_Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddNumbers_Response(struct soap*, const char*, int, const struct ns1__AddNumbers_Response *, const char*);
SOAP_FMAC3 struct ns1__AddNumbers_Response * SOAP_FMAC4 soap_in_ns1__AddNumbers_Response(struct soap*, const char*, struct ns1__AddNumbers_Response *, const char*);
SOAP_FMAC1 struct ns1__AddNumbers_Response * SOAP_FMAC2 soap_instantiate_ns1__AddNumbers_Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AddNumbers_Response * soap_new_ns1__AddNumbers_Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AddNumbers_Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AddNumbers_Response * soap_new_req_ns1__AddNumbers_Response(
	struct soap *soap,
	int AddNumbersResult)
{
	struct ns1__AddNumbers_Response *_p = ::soap_new_ns1__AddNumbers_Response(soap);
	if (_p)
	{	::soap_default_ns1__AddNumbers_Response(soap, _p);
		_p->AddNumbersResult = AddNumbersResult;
	}
	return _p;
}

inline struct ns1__AddNumbers_Response * soap_new_set_ns1__AddNumbers_Response(
	struct soap *soap,
	int AddNumbersResult)
{
	struct ns1__AddNumbers_Response *_p = ::soap_new_ns1__AddNumbers_Response(soap);
	if (_p)
	{	::soap_default_ns1__AddNumbers_Response(soap, _p);
		_p->AddNumbersResult = AddNumbersResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddNumbers_Response(struct soap*, const struct ns1__AddNumbers_Response *, const char*, const char*);

inline int soap_write_ns1__AddNumbers_Response(struct soap *soap, struct ns1__AddNumbers_Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AddNumbers_Response(soap, p), 0) || ::soap_put_ns1__AddNumbers_Response(soap, p, "ns1:AddNumbers-Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddNumbers_Response(struct soap *soap, const char *URL, struct ns1__AddNumbers_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbers_Response(soap, p), 0) || ::soap_put_ns1__AddNumbers_Response(soap, p, "ns1:AddNumbers-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AddNumbers_Response(struct soap *soap, const char *URL, struct ns1__AddNumbers_Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbers_Response(soap, p), 0) || ::soap_put_ns1__AddNumbers_Response(soap, p, "ns1:AddNumbers-Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddNumbers_Response(struct soap *soap, const char *URL, struct ns1__AddNumbers_Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbers_Response(soap, p), 0) || ::soap_put_ns1__AddNumbers_Response(soap, p, "ns1:AddNumbers-Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AddNumbers_Response * SOAP_FMAC4 soap_get_ns1__AddNumbers_Response(struct soap*, struct ns1__AddNumbers_Response *, const char*, const char*);

inline int soap_read_ns1__AddNumbers_Response(struct soap *soap, struct ns1__AddNumbers_Response *p)
{
	if (p)
	{	::soap_default_ns1__AddNumbers_Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AddNumbers_Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddNumbers_Response(struct soap *soap, const char *URL, struct ns1__AddNumbers_Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AddNumbers_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AddNumbers_Response(struct soap *soap, struct ns1__AddNumbers_Response *p)
{
	if (::soap_read_ns1__AddNumbers_Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AddFileToSql_DEFINED
#define SOAP_TYPE_ns1__AddFileToSql_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddFileToSql(struct soap*, struct ns1__AddFileToSql *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddFileToSql(struct soap*, const struct ns1__AddFileToSql *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddFileToSql(struct soap*, const char*, int, const struct ns1__AddFileToSql *, const char*);
SOAP_FMAC3 struct ns1__AddFileToSql * SOAP_FMAC4 soap_in_ns1__AddFileToSql(struct soap*, const char*, struct ns1__AddFileToSql *, const char*);
SOAP_FMAC1 struct ns1__AddFileToSql * SOAP_FMAC2 soap_instantiate_ns1__AddFileToSql(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AddFileToSql * soap_new_ns1__AddFileToSql(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AddFileToSql(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AddFileToSql * soap_new_req_ns1__AddFileToSql(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strFileName,
	const std::wstring& sPointer,
	const std::wstring& tablenamefieldname,
	const std::wstring& fileIP,
	const std::wstring& fileUse,
	const std::wstring& filePassword)
{
	struct ns1__AddFileToSql *_p = ::soap_new_ns1__AddFileToSql(soap);
	if (_p)
	{	::soap_default_ns1__AddFileToSql(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strFileName = strFileName;
		_p->sPointer = sPointer;
		_p->tablenamefieldname = tablenamefieldname;
		_p->fileIP = fileIP;
		_p->fileUse = fileUse;
		_p->filePassword = filePassword;
	}
	return _p;
}

inline struct ns1__AddFileToSql * soap_new_set_ns1__AddFileToSql(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strFileName,
	const std::wstring& sPointer,
	const std::wstring& tablenamefieldname,
	const std::wstring& fileIP,
	const std::wstring& fileUse,
	const std::wstring& filePassword)
{
	struct ns1__AddFileToSql *_p = ::soap_new_ns1__AddFileToSql(soap);
	if (_p)
	{	::soap_default_ns1__AddFileToSql(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strFileName = strFileName;
		_p->sPointer = sPointer;
		_p->tablenamefieldname = tablenamefieldname;
		_p->fileIP = fileIP;
		_p->fileUse = fileUse;
		_p->filePassword = filePassword;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddFileToSql(struct soap*, const struct ns1__AddFileToSql *, const char*, const char*);

inline int soap_write_ns1__AddFileToSql(struct soap *soap, struct ns1__AddFileToSql const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AddFileToSql(soap, p), 0) || ::soap_put_ns1__AddFileToSql(soap, p, "ns1:AddFileToSql", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddFileToSql(struct soap *soap, const char *URL, struct ns1__AddFileToSql const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSql(soap, p), 0) || ::soap_put_ns1__AddFileToSql(soap, p, "ns1:AddFileToSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AddFileToSql(struct soap *soap, const char *URL, struct ns1__AddFileToSql const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSql(soap, p), 0) || ::soap_put_ns1__AddFileToSql(soap, p, "ns1:AddFileToSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddFileToSql(struct soap *soap, const char *URL, struct ns1__AddFileToSql const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSql(soap, p), 0) || ::soap_put_ns1__AddFileToSql(soap, p, "ns1:AddFileToSql", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AddFileToSql * SOAP_FMAC4 soap_get_ns1__AddFileToSql(struct soap*, struct ns1__AddFileToSql *, const char*, const char*);

inline int soap_read_ns1__AddFileToSql(struct soap *soap, struct ns1__AddFileToSql *p)
{
	if (p)
	{	::soap_default_ns1__AddFileToSql(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AddFileToSql(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddFileToSql(struct soap *soap, const char *URL, struct ns1__AddFileToSql *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AddFileToSql(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AddFileToSql(struct soap *soap, struct ns1__AddFileToSql *p)
{
	if (::soap_read_ns1__AddFileToSql(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AddFileToSqlResponse_DEFINED
#define SOAP_TYPE_ns1__AddFileToSqlResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddFileToSqlResponse(struct soap*, struct ns1__AddFileToSqlResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddFileToSqlResponse(struct soap*, const struct ns1__AddFileToSqlResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddFileToSqlResponse(struct soap*, const char*, int, const struct ns1__AddFileToSqlResponse *, const char*);
SOAP_FMAC3 struct ns1__AddFileToSqlResponse * SOAP_FMAC4 soap_in_ns1__AddFileToSqlResponse(struct soap*, const char*, struct ns1__AddFileToSqlResponse *, const char*);
SOAP_FMAC1 struct ns1__AddFileToSqlResponse * SOAP_FMAC2 soap_instantiate_ns1__AddFileToSqlResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AddFileToSqlResponse * soap_new_ns1__AddFileToSqlResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AddFileToSqlResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AddFileToSqlResponse * soap_new_req_ns1__AddFileToSqlResponse(
	struct soap *soap,
	const std::wstring& AddFileToSqlResult)
{
	struct ns1__AddFileToSqlResponse *_p = ::soap_new_ns1__AddFileToSqlResponse(soap);
	if (_p)
	{	::soap_default_ns1__AddFileToSqlResponse(soap, _p);
		_p->AddFileToSqlResult = AddFileToSqlResult;
	}
	return _p;
}

inline struct ns1__AddFileToSqlResponse * soap_new_set_ns1__AddFileToSqlResponse(
	struct soap *soap,
	const std::wstring& AddFileToSqlResult)
{
	struct ns1__AddFileToSqlResponse *_p = ::soap_new_ns1__AddFileToSqlResponse(soap);
	if (_p)
	{	::soap_default_ns1__AddFileToSqlResponse(soap, _p);
		_p->AddFileToSqlResult = AddFileToSqlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddFileToSqlResponse(struct soap*, const struct ns1__AddFileToSqlResponse *, const char*, const char*);

inline int soap_write_ns1__AddFileToSqlResponse(struct soap *soap, struct ns1__AddFileToSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AddFileToSqlResponse(soap, p), 0) || ::soap_put_ns1__AddFileToSqlResponse(soap, p, "ns1:AddFileToSqlResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddFileToSqlResponse(struct soap *soap, const char *URL, struct ns1__AddFileToSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSqlResponse(soap, p), 0) || ::soap_put_ns1__AddFileToSqlResponse(soap, p, "ns1:AddFileToSqlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AddFileToSqlResponse(struct soap *soap, const char *URL, struct ns1__AddFileToSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSqlResponse(soap, p), 0) || ::soap_put_ns1__AddFileToSqlResponse(soap, p, "ns1:AddFileToSqlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddFileToSqlResponse(struct soap *soap, const char *URL, struct ns1__AddFileToSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddFileToSqlResponse(soap, p), 0) || ::soap_put_ns1__AddFileToSqlResponse(soap, p, "ns1:AddFileToSqlResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AddFileToSqlResponse * SOAP_FMAC4 soap_get_ns1__AddFileToSqlResponse(struct soap*, struct ns1__AddFileToSqlResponse *, const char*, const char*);

inline int soap_read_ns1__AddFileToSqlResponse(struct soap *soap, struct ns1__AddFileToSqlResponse *p)
{
	if (p)
	{	::soap_default_ns1__AddFileToSqlResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AddFileToSqlResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddFileToSqlResponse(struct soap *soap, const char *URL, struct ns1__AddFileToSqlResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AddFileToSqlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AddFileToSqlResponse(struct soap *soap, struct ns1__AddFileToSqlResponse *p)
{
	if (::soap_read_ns1__AddFileToSqlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeStorageProcess_DEFINED
#define SOAP_TYPE_ns1__executeStorageProcess_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeStorageProcess(struct soap*, struct ns1__executeStorageProcess *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeStorageProcess(struct soap*, const struct ns1__executeStorageProcess *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeStorageProcess(struct soap*, const char*, int, const struct ns1__executeStorageProcess *, const char*);
SOAP_FMAC3 struct ns1__executeStorageProcess * SOAP_FMAC4 soap_in_ns1__executeStorageProcess(struct soap*, const char*, struct ns1__executeStorageProcess *, const char*);
SOAP_FMAC1 struct ns1__executeStorageProcess * SOAP_FMAC2 soap_instantiate_ns1__executeStorageProcess(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeStorageProcess * soap_new_ns1__executeStorageProcess(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeStorageProcess(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeStorageProcess * soap_new_req_ns1__executeStorageProcess(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& StorageProcessName,
	const std::wstring& Parameters)
{
	struct ns1__executeStorageProcess *_p = ::soap_new_ns1__executeStorageProcess(soap);
	if (_p)
	{	::soap_default_ns1__executeStorageProcess(soap, _p);
		_p->serverInfo = serverInfo;
		_p->StorageProcessName = StorageProcessName;
		_p->Parameters = Parameters;
	}
	return _p;
}

inline struct ns1__executeStorageProcess * soap_new_set_ns1__executeStorageProcess(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& StorageProcessName,
	const std::wstring& Parameters)
{
	struct ns1__executeStorageProcess *_p = ::soap_new_ns1__executeStorageProcess(soap);
	if (_p)
	{	::soap_default_ns1__executeStorageProcess(soap, _p);
		_p->serverInfo = serverInfo;
		_p->StorageProcessName = StorageProcessName;
		_p->Parameters = Parameters;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeStorageProcess(struct soap*, const struct ns1__executeStorageProcess *, const char*, const char*);

inline int soap_write_ns1__executeStorageProcess(struct soap *soap, struct ns1__executeStorageProcess const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeStorageProcess(soap, p), 0) || ::soap_put_ns1__executeStorageProcess(soap, p, "ns1:executeStorageProcess", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeStorageProcess(struct soap *soap, const char *URL, struct ns1__executeStorageProcess const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcess(soap, p), 0) || ::soap_put_ns1__executeStorageProcess(soap, p, "ns1:executeStorageProcess", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeStorageProcess(struct soap *soap, const char *URL, struct ns1__executeStorageProcess const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcess(soap, p), 0) || ::soap_put_ns1__executeStorageProcess(soap, p, "ns1:executeStorageProcess", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeStorageProcess(struct soap *soap, const char *URL, struct ns1__executeStorageProcess const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcess(soap, p), 0) || ::soap_put_ns1__executeStorageProcess(soap, p, "ns1:executeStorageProcess", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeStorageProcess * SOAP_FMAC4 soap_get_ns1__executeStorageProcess(struct soap*, struct ns1__executeStorageProcess *, const char*, const char*);

inline int soap_read_ns1__executeStorageProcess(struct soap *soap, struct ns1__executeStorageProcess *p)
{
	if (p)
	{	::soap_default_ns1__executeStorageProcess(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeStorageProcess(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeStorageProcess(struct soap *soap, const char *URL, struct ns1__executeStorageProcess *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeStorageProcess(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeStorageProcess(struct soap *soap, struct ns1__executeStorageProcess *p)
{
	if (::soap_read_ns1__executeStorageProcess(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeStorageProcessResponse_DEFINED
#define SOAP_TYPE_ns1__executeStorageProcessResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeStorageProcessResponse(struct soap*, struct ns1__executeStorageProcessResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeStorageProcessResponse(struct soap*, const struct ns1__executeStorageProcessResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeStorageProcessResponse(struct soap*, const char*, int, const struct ns1__executeStorageProcessResponse *, const char*);
SOAP_FMAC3 struct ns1__executeStorageProcessResponse * SOAP_FMAC4 soap_in_ns1__executeStorageProcessResponse(struct soap*, const char*, struct ns1__executeStorageProcessResponse *, const char*);
SOAP_FMAC1 struct ns1__executeStorageProcessResponse * SOAP_FMAC2 soap_instantiate_ns1__executeStorageProcessResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeStorageProcessResponse * soap_new_ns1__executeStorageProcessResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeStorageProcessResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeStorageProcessResponse * soap_new_req_ns1__executeStorageProcessResponse(
	struct soap *soap,
	const std::wstring& executeStorageProcessResult)
{
	struct ns1__executeStorageProcessResponse *_p = ::soap_new_ns1__executeStorageProcessResponse(soap);
	if (_p)
	{	::soap_default_ns1__executeStorageProcessResponse(soap, _p);
		_p->executeStorageProcessResult = executeStorageProcessResult;
	}
	return _p;
}

inline struct ns1__executeStorageProcessResponse * soap_new_set_ns1__executeStorageProcessResponse(
	struct soap *soap,
	const std::wstring& executeStorageProcessResult)
{
	struct ns1__executeStorageProcessResponse *_p = ::soap_new_ns1__executeStorageProcessResponse(soap);
	if (_p)
	{	::soap_default_ns1__executeStorageProcessResponse(soap, _p);
		_p->executeStorageProcessResult = executeStorageProcessResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeStorageProcessResponse(struct soap*, const struct ns1__executeStorageProcessResponse *, const char*, const char*);

inline int soap_write_ns1__executeStorageProcessResponse(struct soap *soap, struct ns1__executeStorageProcessResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeStorageProcessResponse(soap, p), 0) || ::soap_put_ns1__executeStorageProcessResponse(soap, p, "ns1:executeStorageProcessResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeStorageProcessResponse(struct soap *soap, const char *URL, struct ns1__executeStorageProcessResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcessResponse(soap, p), 0) || ::soap_put_ns1__executeStorageProcessResponse(soap, p, "ns1:executeStorageProcessResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeStorageProcessResponse(struct soap *soap, const char *URL, struct ns1__executeStorageProcessResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcessResponse(soap, p), 0) || ::soap_put_ns1__executeStorageProcessResponse(soap, p, "ns1:executeStorageProcessResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeStorageProcessResponse(struct soap *soap, const char *URL, struct ns1__executeStorageProcessResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeStorageProcessResponse(soap, p), 0) || ::soap_put_ns1__executeStorageProcessResponse(soap, p, "ns1:executeStorageProcessResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeStorageProcessResponse * SOAP_FMAC4 soap_get_ns1__executeStorageProcessResponse(struct soap*, struct ns1__executeStorageProcessResponse *, const char*, const char*);

inline int soap_read_ns1__executeStorageProcessResponse(struct soap *soap, struct ns1__executeStorageProcessResponse *p)
{
	if (p)
	{	::soap_default_ns1__executeStorageProcessResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeStorageProcessResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeStorageProcessResponse(struct soap *soap, const char *URL, struct ns1__executeStorageProcessResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeStorageProcessResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeStorageProcessResponse(struct soap *soap, struct ns1__executeStorageProcessResponse *p)
{
	if (::soap_read_ns1__executeStorageProcessResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__insertXml_DEFINED
#define SOAP_TYPE_ns1__insertXml_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__insertXml(struct soap*, struct ns1__insertXml *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__insertXml(struct soap*, const struct ns1__insertXml *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__insertXml(struct soap*, const char*, int, const struct ns1__insertXml *, const char*);
SOAP_FMAC3 struct ns1__insertXml * SOAP_FMAC4 soap_in_ns1__insertXml(struct soap*, const char*, struct ns1__insertXml *, const char*);
SOAP_FMAC1 struct ns1__insertXml * SOAP_FMAC2 soap_instantiate_ns1__insertXml(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__insertXml * soap_new_ns1__insertXml(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__insertXml(soap, n, NULL, NULL, NULL);
}

inline struct ns1__insertXml * soap_new_req_ns1__insertXml(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strXml,
	bool encode)
{
	struct ns1__insertXml *_p = ::soap_new_ns1__insertXml(soap);
	if (_p)
	{	::soap_default_ns1__insertXml(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strXml = strXml;
		_p->encode = encode;
	}
	return _p;
}

inline struct ns1__insertXml * soap_new_set_ns1__insertXml(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& strXml,
	bool encode)
{
	struct ns1__insertXml *_p = ::soap_new_ns1__insertXml(soap);
	if (_p)
	{	::soap_default_ns1__insertXml(soap, _p);
		_p->serverInfo = serverInfo;
		_p->strXml = strXml;
		_p->encode = encode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__insertXml(struct soap*, const struct ns1__insertXml *, const char*, const char*);

inline int soap_write_ns1__insertXml(struct soap *soap, struct ns1__insertXml const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__insertXml(soap, p), 0) || ::soap_put_ns1__insertXml(soap, p, "ns1:insertXml", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__insertXml(struct soap *soap, const char *URL, struct ns1__insertXml const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXml(soap, p), 0) || ::soap_put_ns1__insertXml(soap, p, "ns1:insertXml", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__insertXml(struct soap *soap, const char *URL, struct ns1__insertXml const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXml(soap, p), 0) || ::soap_put_ns1__insertXml(soap, p, "ns1:insertXml", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__insertXml(struct soap *soap, const char *URL, struct ns1__insertXml const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXml(soap, p), 0) || ::soap_put_ns1__insertXml(soap, p, "ns1:insertXml", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__insertXml * SOAP_FMAC4 soap_get_ns1__insertXml(struct soap*, struct ns1__insertXml *, const char*, const char*);

inline int soap_read_ns1__insertXml(struct soap *soap, struct ns1__insertXml *p)
{
	if (p)
	{	::soap_default_ns1__insertXml(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__insertXml(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__insertXml(struct soap *soap, const char *URL, struct ns1__insertXml *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__insertXml(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__insertXml(struct soap *soap, struct ns1__insertXml *p)
{
	if (::soap_read_ns1__insertXml(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__insertXmlResponse_DEFINED
#define SOAP_TYPE_ns1__insertXmlResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__insertXmlResponse(struct soap*, struct ns1__insertXmlResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__insertXmlResponse(struct soap*, const struct ns1__insertXmlResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__insertXmlResponse(struct soap*, const char*, int, const struct ns1__insertXmlResponse *, const char*);
SOAP_FMAC3 struct ns1__insertXmlResponse * SOAP_FMAC4 soap_in_ns1__insertXmlResponse(struct soap*, const char*, struct ns1__insertXmlResponse *, const char*);
SOAP_FMAC1 struct ns1__insertXmlResponse * SOAP_FMAC2 soap_instantiate_ns1__insertXmlResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__insertXmlResponse * soap_new_ns1__insertXmlResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__insertXmlResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__insertXmlResponse * soap_new_req_ns1__insertXmlResponse(
	struct soap *soap,
	const std::wstring& insertXmlResult)
{
	struct ns1__insertXmlResponse *_p = ::soap_new_ns1__insertXmlResponse(soap);
	if (_p)
	{	::soap_default_ns1__insertXmlResponse(soap, _p);
		_p->insertXmlResult = insertXmlResult;
	}
	return _p;
}

inline struct ns1__insertXmlResponse * soap_new_set_ns1__insertXmlResponse(
	struct soap *soap,
	const std::wstring& insertXmlResult)
{
	struct ns1__insertXmlResponse *_p = ::soap_new_ns1__insertXmlResponse(soap);
	if (_p)
	{	::soap_default_ns1__insertXmlResponse(soap, _p);
		_p->insertXmlResult = insertXmlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__insertXmlResponse(struct soap*, const struct ns1__insertXmlResponse *, const char*, const char*);

inline int soap_write_ns1__insertXmlResponse(struct soap *soap, struct ns1__insertXmlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__insertXmlResponse(soap, p), 0) || ::soap_put_ns1__insertXmlResponse(soap, p, "ns1:insertXmlResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__insertXmlResponse(struct soap *soap, const char *URL, struct ns1__insertXmlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXmlResponse(soap, p), 0) || ::soap_put_ns1__insertXmlResponse(soap, p, "ns1:insertXmlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__insertXmlResponse(struct soap *soap, const char *URL, struct ns1__insertXmlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXmlResponse(soap, p), 0) || ::soap_put_ns1__insertXmlResponse(soap, p, "ns1:insertXmlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__insertXmlResponse(struct soap *soap, const char *URL, struct ns1__insertXmlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__insertXmlResponse(soap, p), 0) || ::soap_put_ns1__insertXmlResponse(soap, p, "ns1:insertXmlResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__insertXmlResponse * SOAP_FMAC4 soap_get_ns1__insertXmlResponse(struct soap*, struct ns1__insertXmlResponse *, const char*, const char*);

inline int soap_read_ns1__insertXmlResponse(struct soap *soap, struct ns1__insertXmlResponse *p)
{
	if (p)
	{	::soap_default_ns1__insertXmlResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__insertXmlResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__insertXmlResponse(struct soap *soap, const char *URL, struct ns1__insertXmlResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__insertXmlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__insertXmlResponse(struct soap *soap, struct ns1__insertXmlResponse *p)
{
	if (::soap_read_ns1__insertXmlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSql_USCOREencode_DEFINED
#define SOAP_TYPE_ns1__executeSql_USCOREencode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREencode(struct soap*, struct ns1__executeSql_USCOREencode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREencode(struct soap*, const struct ns1__executeSql_USCOREencode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREencode(struct soap*, const char*, int, const struct ns1__executeSql_USCOREencode *, const char*);
SOAP_FMAC3 struct ns1__executeSql_USCOREencode * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREencode(struct soap*, const char*, struct ns1__executeSql_USCOREencode *, const char*);
SOAP_FMAC1 struct ns1__executeSql_USCOREencode * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREencode(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSql_USCOREencode * soap_new_ns1__executeSql_USCOREencode(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSql_USCOREencode(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSql_USCOREencode * soap_new_req_ns1__executeSql_USCOREencode(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql_USCOREencode *_p = ::soap_new_ns1__executeSql_USCOREencode(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREencode(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct ns1__executeSql_USCOREencode * soap_new_set_ns1__executeSql_USCOREencode(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql_USCOREencode *_p = ::soap_new_ns1__executeSql_USCOREencode(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREencode(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREencode(struct soap*, const struct ns1__executeSql_USCOREencode *, const char*, const char*);

inline int soap_write_ns1__executeSql_USCOREencode(struct soap *soap, struct ns1__executeSql_USCOREencode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSql_USCOREencode(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode(soap, p, "ns1:executeSql_encode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSql_USCOREencode(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencode(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode(soap, p, "ns1:executeSql_encode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSql_USCOREencode(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencode(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode(soap, p, "ns1:executeSql_encode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSql_USCOREencode(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencode(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencode(soap, p, "ns1:executeSql_encode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSql_USCOREencode * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREencode(struct soap*, struct ns1__executeSql_USCOREencode *, const char*, const char*);

inline int soap_read_ns1__executeSql_USCOREencode(struct soap *soap, struct ns1__executeSql_USCOREencode *p)
{
	if (p)
	{	::soap_default_ns1__executeSql_USCOREencode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSql_USCOREencode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSql_USCOREencode(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSql_USCOREencode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSql_USCOREencode(struct soap *soap, struct ns1__executeSql_USCOREencode *p)
{
	if (::soap_read_ns1__executeSql_USCOREencode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSql_USCOREencodeResponse_DEFINED
#define SOAP_TYPE_ns1__executeSql_USCOREencodeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREencodeResponse(struct soap*, struct ns1__executeSql_USCOREencodeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREencodeResponse(struct soap*, const struct ns1__executeSql_USCOREencodeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREencodeResponse(struct soap*, const char*, int, const struct ns1__executeSql_USCOREencodeResponse *, const char*);
SOAP_FMAC3 struct ns1__executeSql_USCOREencodeResponse * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREencodeResponse(struct soap*, const char*, struct ns1__executeSql_USCOREencodeResponse *, const char*);
SOAP_FMAC1 struct ns1__executeSql_USCOREencodeResponse * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREencodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSql_USCOREencodeResponse * soap_new_ns1__executeSql_USCOREencodeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSql_USCOREencodeResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSql_USCOREencodeResponse * soap_new_req_ns1__executeSql_USCOREencodeResponse(
	struct soap *soap,
	const std::wstring& executeSql_USCOREencodeResult)
{
	struct ns1__executeSql_USCOREencodeResponse *_p = ::soap_new_ns1__executeSql_USCOREencodeResponse(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREencodeResponse(soap, _p);
		_p->executeSql_USCOREencodeResult = executeSql_USCOREencodeResult;
	}
	return _p;
}

inline struct ns1__executeSql_USCOREencodeResponse * soap_new_set_ns1__executeSql_USCOREencodeResponse(
	struct soap *soap,
	const std::wstring& executeSql_USCOREencodeResult)
{
	struct ns1__executeSql_USCOREencodeResponse *_p = ::soap_new_ns1__executeSql_USCOREencodeResponse(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREencodeResponse(soap, _p);
		_p->executeSql_USCOREencodeResult = executeSql_USCOREencodeResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREencodeResponse(struct soap*, const struct ns1__executeSql_USCOREencodeResponse *, const char*, const char*);

inline int soap_write_ns1__executeSql_USCOREencodeResponse(struct soap *soap, struct ns1__executeSql_USCOREencodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSql_USCOREencodeResponse(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencodeResponse(soap, p, "ns1:executeSql_encodeResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSql_USCOREencodeResponse(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencodeResponse(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencodeResponse(soap, p, "ns1:executeSql_encodeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSql_USCOREencodeResponse(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencodeResponse(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencodeResponse(soap, p, "ns1:executeSql_encodeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSql_USCOREencodeResponse(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREencodeResponse(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREencodeResponse(soap, p, "ns1:executeSql_encodeResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSql_USCOREencodeResponse * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREencodeResponse(struct soap*, struct ns1__executeSql_USCOREencodeResponse *, const char*, const char*);

inline int soap_read_ns1__executeSql_USCOREencodeResponse(struct soap *soap, struct ns1__executeSql_USCOREencodeResponse *p)
{
	if (p)
	{	::soap_default_ns1__executeSql_USCOREencodeResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSql_USCOREencodeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSql_USCOREencodeResponse(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREencodeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSql_USCOREencodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSql_USCOREencodeResponse(struct soap *soap, struct ns1__executeSql_USCOREencodeResponse *p)
{
	if (::soap_read_ns1__executeSql_USCOREencodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSql_USCOREbackEncord_DEFINED
#define SOAP_TYPE_ns1__executeSql_USCOREbackEncord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREbackEncord(struct soap*, struct ns1__executeSql_USCOREbackEncord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREbackEncord(struct soap*, const struct ns1__executeSql_USCOREbackEncord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREbackEncord(struct soap*, const char*, int, const struct ns1__executeSql_USCOREbackEncord *, const char*);
SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREbackEncord(struct soap*, const char*, struct ns1__executeSql_USCOREbackEncord *, const char*);
SOAP_FMAC1 struct ns1__executeSql_USCOREbackEncord * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREbackEncord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSql_USCOREbackEncord * soap_new_ns1__executeSql_USCOREbackEncord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSql_USCOREbackEncord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSql_USCOREbackEncord * soap_new_req_ns1__executeSql_USCOREbackEncord(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql_USCOREbackEncord *_p = ::soap_new_ns1__executeSql_USCOREbackEncord(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREbackEncord(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct ns1__executeSql_USCOREbackEncord * soap_new_set_ns1__executeSql_USCOREbackEncord(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql_USCOREbackEncord *_p = ::soap_new_ns1__executeSql_USCOREbackEncord(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREbackEncord(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREbackEncord(struct soap*, const struct ns1__executeSql_USCOREbackEncord *, const char*, const char*);

inline int soap_write_ns1__executeSql_USCOREbackEncord(struct soap *soap, struct ns1__executeSql_USCOREbackEncord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSql_USCOREbackEncord(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord(soap, p, "ns1:executeSql_backEncord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSql_USCOREbackEncord(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncord(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord(soap, p, "ns1:executeSql_backEncord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSql_USCOREbackEncord(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncord(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord(soap, p, "ns1:executeSql_backEncord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSql_USCOREbackEncord(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncord(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncord(soap, p, "ns1:executeSql_backEncord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREbackEncord(struct soap*, struct ns1__executeSql_USCOREbackEncord *, const char*, const char*);

inline int soap_read_ns1__executeSql_USCOREbackEncord(struct soap *soap, struct ns1__executeSql_USCOREbackEncord *p)
{
	if (p)
	{	::soap_default_ns1__executeSql_USCOREbackEncord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSql_USCOREbackEncord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSql_USCOREbackEncord(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSql_USCOREbackEncord(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSql_USCOREbackEncord(struct soap *soap, struct ns1__executeSql_USCOREbackEncord *p)
{
	if (::soap_read_ns1__executeSql_USCOREbackEncord(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse_DEFINED
#define SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREbackEncordResponse(struct soap*, struct ns1__executeSql_USCOREbackEncordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREbackEncordResponse(struct soap*, const struct ns1__executeSql_USCOREbackEncordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREbackEncordResponse(struct soap*, const char*, int, const struct ns1__executeSql_USCOREbackEncordResponse *, const char*);
SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncordResponse * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREbackEncordResponse(struct soap*, const char*, struct ns1__executeSql_USCOREbackEncordResponse *, const char*);
SOAP_FMAC1 struct ns1__executeSql_USCOREbackEncordResponse * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREbackEncordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSql_USCOREbackEncordResponse * soap_new_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSql_USCOREbackEncordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSql_USCOREbackEncordResponse * soap_new_req_ns1__executeSql_USCOREbackEncordResponse(
	struct soap *soap,
	const std::wstring& executeSql_USCOREbackEncordResult)
{
	struct ns1__executeSql_USCOREbackEncordResponse *_p = ::soap_new_ns1__executeSql_USCOREbackEncordResponse(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREbackEncordResponse(soap, _p);
		_p->executeSql_USCOREbackEncordResult = executeSql_USCOREbackEncordResult;
	}
	return _p;
}

inline struct ns1__executeSql_USCOREbackEncordResponse * soap_new_set_ns1__executeSql_USCOREbackEncordResponse(
	struct soap *soap,
	const std::wstring& executeSql_USCOREbackEncordResult)
{
	struct ns1__executeSql_USCOREbackEncordResponse *_p = ::soap_new_ns1__executeSql_USCOREbackEncordResponse(soap);
	if (_p)
	{	::soap_default_ns1__executeSql_USCOREbackEncordResponse(soap, _p);
		_p->executeSql_USCOREbackEncordResult = executeSql_USCOREbackEncordResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREbackEncordResponse(struct soap*, const struct ns1__executeSql_USCOREbackEncordResponse *, const char*, const char*);

inline int soap_write_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, struct ns1__executeSql_USCOREbackEncordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSql_USCOREbackEncordResponse(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncordResponse(soap, p, "ns1:executeSql_backEncordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncordResponse(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncordResponse(soap, p, "ns1:executeSql_backEncordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncordResponse(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncordResponse(soap, p, "ns1:executeSql_backEncordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql_USCOREbackEncordResponse(soap, p), 0) || ::soap_put_ns1__executeSql_USCOREbackEncordResponse(soap, p, "ns1:executeSql_backEncordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncordResponse * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREbackEncordResponse(struct soap*, struct ns1__executeSql_USCOREbackEncordResponse *, const char*, const char*);

inline int soap_read_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, struct ns1__executeSql_USCOREbackEncordResponse *p)
{
	if (p)
	{	::soap_default_ns1__executeSql_USCOREbackEncordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSql_USCOREbackEncordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *URL, struct ns1__executeSql_USCOREbackEncordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSql_USCOREbackEncordResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, struct ns1__executeSql_USCOREbackEncordResponse *p)
{
	if (::soap_read_ns1__executeSql_USCOREbackEncordResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSql_DEFINED
#define SOAP_TYPE_ns1__executeSql_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql(struct soap*, struct ns1__executeSql *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql(struct soap*, const struct ns1__executeSql *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql(struct soap*, const char*, int, const struct ns1__executeSql *, const char*);
SOAP_FMAC3 struct ns1__executeSql * SOAP_FMAC4 soap_in_ns1__executeSql(struct soap*, const char*, struct ns1__executeSql *, const char*);
SOAP_FMAC1 struct ns1__executeSql * SOAP_FMAC2 soap_instantiate_ns1__executeSql(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSql * soap_new_ns1__executeSql(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSql(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSql * soap_new_req_ns1__executeSql(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql *_p = ::soap_new_ns1__executeSql(soap);
	if (_p)
	{	::soap_default_ns1__executeSql(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}

inline struct ns1__executeSql * soap_new_set_ns1__executeSql(
	struct soap *soap,
	const std::wstring& serverInfo,
	const std::wstring& sSql)
{
	struct ns1__executeSql *_p = ::soap_new_ns1__executeSql(soap);
	if (_p)
	{	::soap_default_ns1__executeSql(soap, _p);
		_p->serverInfo = serverInfo;
		_p->sSql = sSql;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql(struct soap*, const struct ns1__executeSql *, const char*, const char*);

inline int soap_write_ns1__executeSql(struct soap *soap, struct ns1__executeSql const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSql(soap, p), 0) || ::soap_put_ns1__executeSql(soap, p, "ns1:executeSql", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSql(struct soap *soap, const char *URL, struct ns1__executeSql const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql(soap, p), 0) || ::soap_put_ns1__executeSql(soap, p, "ns1:executeSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSql(struct soap *soap, const char *URL, struct ns1__executeSql const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql(soap, p), 0) || ::soap_put_ns1__executeSql(soap, p, "ns1:executeSql", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSql(struct soap *soap, const char *URL, struct ns1__executeSql const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSql(soap, p), 0) || ::soap_put_ns1__executeSql(soap, p, "ns1:executeSql", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSql * SOAP_FMAC4 soap_get_ns1__executeSql(struct soap*, struct ns1__executeSql *, const char*, const char*);

inline int soap_read_ns1__executeSql(struct soap *soap, struct ns1__executeSql *p)
{
	if (p)
	{	::soap_default_ns1__executeSql(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSql(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSql(struct soap *soap, const char *URL, struct ns1__executeSql *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSql(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSql(struct soap *soap, struct ns1__executeSql *p)
{
	if (::soap_read_ns1__executeSql(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__executeSqlResponse_DEFINED
#define SOAP_TYPE_ns1__executeSqlResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSqlResponse(struct soap*, struct ns1__executeSqlResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSqlResponse(struct soap*, const struct ns1__executeSqlResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSqlResponse(struct soap*, const char*, int, const struct ns1__executeSqlResponse *, const char*);
SOAP_FMAC3 struct ns1__executeSqlResponse * SOAP_FMAC4 soap_in_ns1__executeSqlResponse(struct soap*, const char*, struct ns1__executeSqlResponse *, const char*);
SOAP_FMAC1 struct ns1__executeSqlResponse * SOAP_FMAC2 soap_instantiate_ns1__executeSqlResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__executeSqlResponse * soap_new_ns1__executeSqlResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executeSqlResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__executeSqlResponse * soap_new_req_ns1__executeSqlResponse(
	struct soap *soap,
	const std::wstring& executeSqlResult)
{
	struct ns1__executeSqlResponse *_p = ::soap_new_ns1__executeSqlResponse(soap);
	if (_p)
	{	::soap_default_ns1__executeSqlResponse(soap, _p);
		_p->executeSqlResult = executeSqlResult;
	}
	return _p;
}

inline struct ns1__executeSqlResponse * soap_new_set_ns1__executeSqlResponse(
	struct soap *soap,
	const std::wstring& executeSqlResult)
{
	struct ns1__executeSqlResponse *_p = ::soap_new_ns1__executeSqlResponse(soap);
	if (_p)
	{	::soap_default_ns1__executeSqlResponse(soap, _p);
		_p->executeSqlResult = executeSqlResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSqlResponse(struct soap*, const struct ns1__executeSqlResponse *, const char*, const char*);

inline int soap_write_ns1__executeSqlResponse(struct soap *soap, struct ns1__executeSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__executeSqlResponse(soap, p), 0) || ::soap_put_ns1__executeSqlResponse(soap, p, "ns1:executeSqlResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executeSqlResponse(struct soap *soap, const char *URL, struct ns1__executeSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSqlResponse(soap, p), 0) || ::soap_put_ns1__executeSqlResponse(soap, p, "ns1:executeSqlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__executeSqlResponse(struct soap *soap, const char *URL, struct ns1__executeSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSqlResponse(soap, p), 0) || ::soap_put_ns1__executeSqlResponse(soap, p, "ns1:executeSqlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executeSqlResponse(struct soap *soap, const char *URL, struct ns1__executeSqlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__executeSqlResponse(soap, p), 0) || ::soap_put_ns1__executeSqlResponse(soap, p, "ns1:executeSqlResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__executeSqlResponse * SOAP_FMAC4 soap_get_ns1__executeSqlResponse(struct soap*, struct ns1__executeSqlResponse *, const char*, const char*);

inline int soap_read_ns1__executeSqlResponse(struct soap *soap, struct ns1__executeSqlResponse *p)
{
	if (p)
	{	::soap_default_ns1__executeSqlResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executeSqlResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executeSqlResponse(struct soap *soap, const char *URL, struct ns1__executeSqlResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executeSqlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__executeSqlResponse(struct soap *soap, struct ns1__executeSqlResponse *p)
{
	if (::soap_read_ns1__executeSqlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TestLinkSqlserver_DEFINED
#define SOAP_TYPE_ns1__TestLinkSqlserver_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__TestLinkSqlserver(struct soap*, struct ns1__TestLinkSqlserver *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__TestLinkSqlserver(struct soap*, const struct ns1__TestLinkSqlserver *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TestLinkSqlserver(struct soap*, const char*, int, const struct ns1__TestLinkSqlserver *, const char*);
SOAP_FMAC3 struct ns1__TestLinkSqlserver * SOAP_FMAC4 soap_in_ns1__TestLinkSqlserver(struct soap*, const char*, struct ns1__TestLinkSqlserver *, const char*);
SOAP_FMAC1 struct ns1__TestLinkSqlserver * SOAP_FMAC2 soap_instantiate_ns1__TestLinkSqlserver(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__TestLinkSqlserver * soap_new_ns1__TestLinkSqlserver(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TestLinkSqlserver(soap, n, NULL, NULL, NULL);
}

inline struct ns1__TestLinkSqlserver * soap_new_req_ns1__TestLinkSqlserver(
	struct soap *soap,
	const std::wstring& serverInfo)
{
	struct ns1__TestLinkSqlserver *_p = ::soap_new_ns1__TestLinkSqlserver(soap);
	if (_p)
	{	::soap_default_ns1__TestLinkSqlserver(soap, _p);
		_p->serverInfo = serverInfo;
	}
	return _p;
}

inline struct ns1__TestLinkSqlserver * soap_new_set_ns1__TestLinkSqlserver(
	struct soap *soap,
	const std::wstring& serverInfo)
{
	struct ns1__TestLinkSqlserver *_p = ::soap_new_ns1__TestLinkSqlserver(soap);
	if (_p)
	{	::soap_default_ns1__TestLinkSqlserver(soap, _p);
		_p->serverInfo = serverInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__TestLinkSqlserver(struct soap*, const struct ns1__TestLinkSqlserver *, const char*, const char*);

inline int soap_write_ns1__TestLinkSqlserver(struct soap *soap, struct ns1__TestLinkSqlserver const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__TestLinkSqlserver(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver(soap, p, "ns1:TestLinkSqlserver", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TestLinkSqlserver(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserver(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver(soap, p, "ns1:TestLinkSqlserver", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TestLinkSqlserver(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserver(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver(soap, p, "ns1:TestLinkSqlserver", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TestLinkSqlserver(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserver(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserver(soap, p, "ns1:TestLinkSqlserver", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__TestLinkSqlserver * SOAP_FMAC4 soap_get_ns1__TestLinkSqlserver(struct soap*, struct ns1__TestLinkSqlserver *, const char*, const char*);

inline int soap_read_ns1__TestLinkSqlserver(struct soap *soap, struct ns1__TestLinkSqlserver *p)
{
	if (p)
	{	::soap_default_ns1__TestLinkSqlserver(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TestLinkSqlserver(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TestLinkSqlserver(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserver *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TestLinkSqlserver(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TestLinkSqlserver(struct soap *soap, struct ns1__TestLinkSqlserver *p)
{
	if (::soap_read_ns1__TestLinkSqlserver(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TestLinkSqlserverResponse_DEFINED
#define SOAP_TYPE_ns1__TestLinkSqlserverResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__TestLinkSqlserverResponse(struct soap*, struct ns1__TestLinkSqlserverResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__TestLinkSqlserverResponse(struct soap*, const struct ns1__TestLinkSqlserverResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TestLinkSqlserverResponse(struct soap*, const char*, int, const struct ns1__TestLinkSqlserverResponse *, const char*);
SOAP_FMAC3 struct ns1__TestLinkSqlserverResponse * SOAP_FMAC4 soap_in_ns1__TestLinkSqlserverResponse(struct soap*, const char*, struct ns1__TestLinkSqlserverResponse *, const char*);
SOAP_FMAC1 struct ns1__TestLinkSqlserverResponse * SOAP_FMAC2 soap_instantiate_ns1__TestLinkSqlserverResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__TestLinkSqlserverResponse * soap_new_ns1__TestLinkSqlserverResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TestLinkSqlserverResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__TestLinkSqlserverResponse * soap_new_req_ns1__TestLinkSqlserverResponse(
	struct soap *soap,
	const std::wstring& TestLinkSqlserverResult)
{
	struct ns1__TestLinkSqlserverResponse *_p = ::soap_new_ns1__TestLinkSqlserverResponse(soap);
	if (_p)
	{	::soap_default_ns1__TestLinkSqlserverResponse(soap, _p);
		_p->TestLinkSqlserverResult = TestLinkSqlserverResult;
	}
	return _p;
}

inline struct ns1__TestLinkSqlserverResponse * soap_new_set_ns1__TestLinkSqlserverResponse(
	struct soap *soap,
	const std::wstring& TestLinkSqlserverResult)
{
	struct ns1__TestLinkSqlserverResponse *_p = ::soap_new_ns1__TestLinkSqlserverResponse(soap);
	if (_p)
	{	::soap_default_ns1__TestLinkSqlserverResponse(soap, _p);
		_p->TestLinkSqlserverResult = TestLinkSqlserverResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__TestLinkSqlserverResponse(struct soap*, const struct ns1__TestLinkSqlserverResponse *, const char*, const char*);

inline int soap_write_ns1__TestLinkSqlserverResponse(struct soap *soap, struct ns1__TestLinkSqlserverResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__TestLinkSqlserverResponse(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserverResponse(soap, p, "ns1:TestLinkSqlserverResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TestLinkSqlserverResponse(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserverResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserverResponse(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserverResponse(soap, p, "ns1:TestLinkSqlserverResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TestLinkSqlserverResponse(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserverResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserverResponse(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserverResponse(soap, p, "ns1:TestLinkSqlserverResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TestLinkSqlserverResponse(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserverResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__TestLinkSqlserverResponse(soap, p), 0) || ::soap_put_ns1__TestLinkSqlserverResponse(soap, p, "ns1:TestLinkSqlserverResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__TestLinkSqlserverResponse * SOAP_FMAC4 soap_get_ns1__TestLinkSqlserverResponse(struct soap*, struct ns1__TestLinkSqlserverResponse *, const char*, const char*);

inline int soap_read_ns1__TestLinkSqlserverResponse(struct soap *soap, struct ns1__TestLinkSqlserverResponse *p)
{
	if (p)
	{	::soap_default_ns1__TestLinkSqlserverResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TestLinkSqlserverResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TestLinkSqlserverResponse(struct soap *soap, const char *URL, struct ns1__TestLinkSqlserverResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TestLinkSqlserverResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TestLinkSqlserverResponse(struct soap *soap, struct ns1__TestLinkSqlserverResponse *p)
{
	if (::soap_read_ns1__TestLinkSqlserverResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__showExistLink_DEFINED
#define SOAP_TYPE_ns1__showExistLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__showExistLink(struct soap*, struct ns1__showExistLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__showExistLink(struct soap*, const struct ns1__showExistLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__showExistLink(struct soap*, const char*, int, const struct ns1__showExistLink *, const char*);
SOAP_FMAC3 struct ns1__showExistLink * SOAP_FMAC4 soap_in_ns1__showExistLink(struct soap*, const char*, struct ns1__showExistLink *, const char*);
SOAP_FMAC1 struct ns1__showExistLink * SOAP_FMAC2 soap_instantiate_ns1__showExistLink(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__showExistLink * soap_new_ns1__showExistLink(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__showExistLink(soap, n, NULL, NULL, NULL);
}

inline struct ns1__showExistLink * soap_new_req_ns1__showExistLink(
	struct soap *soap)
{
	struct ns1__showExistLink *_p = ::soap_new_ns1__showExistLink(soap);
	if (_p)
	{	::soap_default_ns1__showExistLink(soap, _p);
	}
	return _p;
}

inline struct ns1__showExistLink * soap_new_set_ns1__showExistLink(
	struct soap *soap)
{
	struct ns1__showExistLink *_p = ::soap_new_ns1__showExistLink(soap);
	if (_p)
	{	::soap_default_ns1__showExistLink(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__showExistLink(struct soap*, const struct ns1__showExistLink *, const char*, const char*);

inline int soap_write_ns1__showExistLink(struct soap *soap, struct ns1__showExistLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__showExistLink(soap, p), 0) || ::soap_put_ns1__showExistLink(soap, p, "ns1:showExistLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__showExistLink(struct soap *soap, const char *URL, struct ns1__showExistLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLink(soap, p), 0) || ::soap_put_ns1__showExistLink(soap, p, "ns1:showExistLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__showExistLink(struct soap *soap, const char *URL, struct ns1__showExistLink const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLink(soap, p), 0) || ::soap_put_ns1__showExistLink(soap, p, "ns1:showExistLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__showExistLink(struct soap *soap, const char *URL, struct ns1__showExistLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLink(soap, p), 0) || ::soap_put_ns1__showExistLink(soap, p, "ns1:showExistLink", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__showExistLink * SOAP_FMAC4 soap_get_ns1__showExistLink(struct soap*, struct ns1__showExistLink *, const char*, const char*);

inline int soap_read_ns1__showExistLink(struct soap *soap, struct ns1__showExistLink *p)
{
	if (p)
	{	::soap_default_ns1__showExistLink(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__showExistLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__showExistLink(struct soap *soap, const char *URL, struct ns1__showExistLink *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__showExistLink(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__showExistLink(struct soap *soap, struct ns1__showExistLink *p)
{
	if (::soap_read_ns1__showExistLink(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__showExistLinkResponse_DEFINED
#define SOAP_TYPE_ns1__showExistLinkResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__showExistLinkResponse(struct soap*, struct ns1__showExistLinkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__showExistLinkResponse(struct soap*, const struct ns1__showExistLinkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__showExistLinkResponse(struct soap*, const char*, int, const struct ns1__showExistLinkResponse *, const char*);
SOAP_FMAC3 struct ns1__showExistLinkResponse * SOAP_FMAC4 soap_in_ns1__showExistLinkResponse(struct soap*, const char*, struct ns1__showExistLinkResponse *, const char*);
SOAP_FMAC1 struct ns1__showExistLinkResponse * SOAP_FMAC2 soap_instantiate_ns1__showExistLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__showExistLinkResponse * soap_new_ns1__showExistLinkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__showExistLinkResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__showExistLinkResponse * soap_new_req_ns1__showExistLinkResponse(
	struct soap *soap,
	const std::wstring& showExistLinkResult)
{
	struct ns1__showExistLinkResponse *_p = ::soap_new_ns1__showExistLinkResponse(soap);
	if (_p)
	{	::soap_default_ns1__showExistLinkResponse(soap, _p);
		_p->showExistLinkResult = showExistLinkResult;
	}
	return _p;
}

inline struct ns1__showExistLinkResponse * soap_new_set_ns1__showExistLinkResponse(
	struct soap *soap,
	const std::wstring& showExistLinkResult)
{
	struct ns1__showExistLinkResponse *_p = ::soap_new_ns1__showExistLinkResponse(soap);
	if (_p)
	{	::soap_default_ns1__showExistLinkResponse(soap, _p);
		_p->showExistLinkResult = showExistLinkResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__showExistLinkResponse(struct soap*, const struct ns1__showExistLinkResponse *, const char*, const char*);

inline int soap_write_ns1__showExistLinkResponse(struct soap *soap, struct ns1__showExistLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__showExistLinkResponse(soap, p), 0) || ::soap_put_ns1__showExistLinkResponse(soap, p, "ns1:showExistLinkResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__showExistLinkResponse(struct soap *soap, const char *URL, struct ns1__showExistLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLinkResponse(soap, p), 0) || ::soap_put_ns1__showExistLinkResponse(soap, p, "ns1:showExistLinkResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__showExistLinkResponse(struct soap *soap, const char *URL, struct ns1__showExistLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLinkResponse(soap, p), 0) || ::soap_put_ns1__showExistLinkResponse(soap, p, "ns1:showExistLinkResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__showExistLinkResponse(struct soap *soap, const char *URL, struct ns1__showExistLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__showExistLinkResponse(soap, p), 0) || ::soap_put_ns1__showExistLinkResponse(soap, p, "ns1:showExistLinkResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__showExistLinkResponse * SOAP_FMAC4 soap_get_ns1__showExistLinkResponse(struct soap*, struct ns1__showExistLinkResponse *, const char*, const char*);

inline int soap_read_ns1__showExistLinkResponse(struct soap *soap, struct ns1__showExistLinkResponse *p)
{
	if (p)
	{	::soap_default_ns1__showExistLinkResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__showExistLinkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__showExistLinkResponse(struct soap *soap, const char *URL, struct ns1__showExistLinkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__showExistLinkResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__showExistLinkResponse(struct soap *soap, struct ns1__showExistLinkResponse *p)
{
	if (::soap_read_ns1__showExistLinkResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__clearLink_DEFINED
#define SOAP_TYPE_ns1__clearLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__clearLink(struct soap*, struct ns1__clearLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__clearLink(struct soap*, const struct ns1__clearLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__clearLink(struct soap*, const char*, int, const struct ns1__clearLink *, const char*);
SOAP_FMAC3 struct ns1__clearLink * SOAP_FMAC4 soap_in_ns1__clearLink(struct soap*, const char*, struct ns1__clearLink *, const char*);
SOAP_FMAC1 struct ns1__clearLink * SOAP_FMAC2 soap_instantiate_ns1__clearLink(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__clearLink * soap_new_ns1__clearLink(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__clearLink(soap, n, NULL, NULL, NULL);
}

inline struct ns1__clearLink * soap_new_req_ns1__clearLink(
	struct soap *soap,
	bool bTimeContrl)
{
	struct ns1__clearLink *_p = ::soap_new_ns1__clearLink(soap);
	if (_p)
	{	::soap_default_ns1__clearLink(soap, _p);
		_p->bTimeContrl = bTimeContrl;
	}
	return _p;
}

inline struct ns1__clearLink * soap_new_set_ns1__clearLink(
	struct soap *soap,
	bool bTimeContrl)
{
	struct ns1__clearLink *_p = ::soap_new_ns1__clearLink(soap);
	if (_p)
	{	::soap_default_ns1__clearLink(soap, _p);
		_p->bTimeContrl = bTimeContrl;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__clearLink(struct soap*, const struct ns1__clearLink *, const char*, const char*);

inline int soap_write_ns1__clearLink(struct soap *soap, struct ns1__clearLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__clearLink(soap, p), 0) || ::soap_put_ns1__clearLink(soap, p, "ns1:clearLink", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__clearLink(struct soap *soap, const char *URL, struct ns1__clearLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLink(soap, p), 0) || ::soap_put_ns1__clearLink(soap, p, "ns1:clearLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__clearLink(struct soap *soap, const char *URL, struct ns1__clearLink const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLink(soap, p), 0) || ::soap_put_ns1__clearLink(soap, p, "ns1:clearLink", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__clearLink(struct soap *soap, const char *URL, struct ns1__clearLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLink(soap, p), 0) || ::soap_put_ns1__clearLink(soap, p, "ns1:clearLink", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__clearLink * SOAP_FMAC4 soap_get_ns1__clearLink(struct soap*, struct ns1__clearLink *, const char*, const char*);

inline int soap_read_ns1__clearLink(struct soap *soap, struct ns1__clearLink *p)
{
	if (p)
	{	::soap_default_ns1__clearLink(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__clearLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__clearLink(struct soap *soap, const char *URL, struct ns1__clearLink *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__clearLink(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__clearLink(struct soap *soap, struct ns1__clearLink *p)
{
	if (::soap_read_ns1__clearLink(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__clearLinkResponse_DEFINED
#define SOAP_TYPE_ns1__clearLinkResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__clearLinkResponse(struct soap*, struct ns1__clearLinkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__clearLinkResponse(struct soap*, const struct ns1__clearLinkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__clearLinkResponse(struct soap*, const char*, int, const struct ns1__clearLinkResponse *, const char*);
SOAP_FMAC3 struct ns1__clearLinkResponse * SOAP_FMAC4 soap_in_ns1__clearLinkResponse(struct soap*, const char*, struct ns1__clearLinkResponse *, const char*);
SOAP_FMAC1 struct ns1__clearLinkResponse * SOAP_FMAC2 soap_instantiate_ns1__clearLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__clearLinkResponse * soap_new_ns1__clearLinkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__clearLinkResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__clearLinkResponse * soap_new_req_ns1__clearLinkResponse(
	struct soap *soap,
	const std::wstring& clearLinkResult)
{
	struct ns1__clearLinkResponse *_p = ::soap_new_ns1__clearLinkResponse(soap);
	if (_p)
	{	::soap_default_ns1__clearLinkResponse(soap, _p);
		_p->clearLinkResult = clearLinkResult;
	}
	return _p;
}

inline struct ns1__clearLinkResponse * soap_new_set_ns1__clearLinkResponse(
	struct soap *soap,
	const std::wstring& clearLinkResult)
{
	struct ns1__clearLinkResponse *_p = ::soap_new_ns1__clearLinkResponse(soap);
	if (_p)
	{	::soap_default_ns1__clearLinkResponse(soap, _p);
		_p->clearLinkResult = clearLinkResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__clearLinkResponse(struct soap*, const struct ns1__clearLinkResponse *, const char*, const char*);

inline int soap_write_ns1__clearLinkResponse(struct soap *soap, struct ns1__clearLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__clearLinkResponse(soap, p), 0) || ::soap_put_ns1__clearLinkResponse(soap, p, "ns1:clearLinkResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__clearLinkResponse(struct soap *soap, const char *URL, struct ns1__clearLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLinkResponse(soap, p), 0) || ::soap_put_ns1__clearLinkResponse(soap, p, "ns1:clearLinkResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__clearLinkResponse(struct soap *soap, const char *URL, struct ns1__clearLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLinkResponse(soap, p), 0) || ::soap_put_ns1__clearLinkResponse(soap, p, "ns1:clearLinkResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__clearLinkResponse(struct soap *soap, const char *URL, struct ns1__clearLinkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__clearLinkResponse(soap, p), 0) || ::soap_put_ns1__clearLinkResponse(soap, p, "ns1:clearLinkResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__clearLinkResponse * SOAP_FMAC4 soap_get_ns1__clearLinkResponse(struct soap*, struct ns1__clearLinkResponse *, const char*, const char*);

inline int soap_read_ns1__clearLinkResponse(struct soap *soap, struct ns1__clearLinkResponse *p)
{
	if (p)
	{	::soap_default_ns1__clearLinkResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__clearLinkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__clearLinkResponse(struct soap *soap, const char *URL, struct ns1__clearLinkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__clearLinkResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__clearLinkResponse(struct soap *soap, struct ns1__clearLinkResponse *p)
{
	if (::soap_read_ns1__clearLinkResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AddNumbers_DEFINED
#define SOAP_TYPE_ns1__AddNumbers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddNumbers(struct soap*, struct ns1__AddNumbers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddNumbers(struct soap*, const struct ns1__AddNumbers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddNumbers(struct soap*, const char*, int, const struct ns1__AddNumbers *, const char*);
SOAP_FMAC3 struct ns1__AddNumbers * SOAP_FMAC4 soap_in_ns1__AddNumbers(struct soap*, const char*, struct ns1__AddNumbers *, const char*);
SOAP_FMAC1 struct ns1__AddNumbers * SOAP_FMAC2 soap_instantiate_ns1__AddNumbers(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AddNumbers * soap_new_ns1__AddNumbers(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AddNumbers(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AddNumbers * soap_new_req_ns1__AddNumbers(
	struct soap *soap,
	int NumberOne,
	int NumberTwo)
{
	struct ns1__AddNumbers *_p = ::soap_new_ns1__AddNumbers(soap);
	if (_p)
	{	::soap_default_ns1__AddNumbers(soap, _p);
		_p->NumberOne = NumberOne;
		_p->NumberTwo = NumberTwo;
	}
	return _p;
}

inline struct ns1__AddNumbers * soap_new_set_ns1__AddNumbers(
	struct soap *soap,
	int NumberOne,
	int NumberTwo)
{
	struct ns1__AddNumbers *_p = ::soap_new_ns1__AddNumbers(soap);
	if (_p)
	{	::soap_default_ns1__AddNumbers(soap, _p);
		_p->NumberOne = NumberOne;
		_p->NumberTwo = NumberTwo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddNumbers(struct soap*, const struct ns1__AddNumbers *, const char*, const char*);

inline int soap_write_ns1__AddNumbers(struct soap *soap, struct ns1__AddNumbers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AddNumbers(soap, p), 0) || ::soap_put_ns1__AddNumbers(soap, p, "ns1:AddNumbers", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddNumbers(struct soap *soap, const char *URL, struct ns1__AddNumbers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbers(soap, p), 0) || ::soap_put_ns1__AddNumbers(soap, p, "ns1:AddNumbers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AddNumbers(struct soap *soap, const char *URL, struct ns1__AddNumbers const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbers(soap, p), 0) || ::soap_put_ns1__AddNumbers(soap, p, "ns1:AddNumbers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddNumbers(struct soap *soap, const char *URL, struct ns1__AddNumbers const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbers(soap, p), 0) || ::soap_put_ns1__AddNumbers(soap, p, "ns1:AddNumbers", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AddNumbers * SOAP_FMAC4 soap_get_ns1__AddNumbers(struct soap*, struct ns1__AddNumbers *, const char*, const char*);

inline int soap_read_ns1__AddNumbers(struct soap *soap, struct ns1__AddNumbers *p)
{
	if (p)
	{	::soap_default_ns1__AddNumbers(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AddNumbers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddNumbers(struct soap *soap, const char *URL, struct ns1__AddNumbers *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AddNumbers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AddNumbers(struct soap *soap, struct ns1__AddNumbers *p)
{
	if (::soap_read_ns1__AddNumbers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AddNumbersResponse_DEFINED
#define SOAP_TYPE_ns1__AddNumbersResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddNumbersResponse(struct soap*, struct ns1__AddNumbersResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddNumbersResponse(struct soap*, const struct ns1__AddNumbersResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddNumbersResponse(struct soap*, const char*, int, const struct ns1__AddNumbersResponse *, const char*);
SOAP_FMAC3 struct ns1__AddNumbersResponse * SOAP_FMAC4 soap_in_ns1__AddNumbersResponse(struct soap*, const char*, struct ns1__AddNumbersResponse *, const char*);
SOAP_FMAC1 struct ns1__AddNumbersResponse * SOAP_FMAC2 soap_instantiate_ns1__AddNumbersResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AddNumbersResponse * soap_new_ns1__AddNumbersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AddNumbersResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AddNumbersResponse * soap_new_req_ns1__AddNumbersResponse(
	struct soap *soap,
	int AddNumbersResult)
{
	struct ns1__AddNumbersResponse *_p = ::soap_new_ns1__AddNumbersResponse(soap);
	if (_p)
	{	::soap_default_ns1__AddNumbersResponse(soap, _p);
		_p->AddNumbersResult = AddNumbersResult;
	}
	return _p;
}

inline struct ns1__AddNumbersResponse * soap_new_set_ns1__AddNumbersResponse(
	struct soap *soap,
	int AddNumbersResult)
{
	struct ns1__AddNumbersResponse *_p = ::soap_new_ns1__AddNumbersResponse(soap);
	if (_p)
	{	::soap_default_ns1__AddNumbersResponse(soap, _p);
		_p->AddNumbersResult = AddNumbersResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddNumbersResponse(struct soap*, const struct ns1__AddNumbersResponse *, const char*, const char*);

inline int soap_write_ns1__AddNumbersResponse(struct soap *soap, struct ns1__AddNumbersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AddNumbersResponse(soap, p), 0) || ::soap_put_ns1__AddNumbersResponse(soap, p, "ns1:AddNumbersResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddNumbersResponse(struct soap *soap, const char *URL, struct ns1__AddNumbersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbersResponse(soap, p), 0) || ::soap_put_ns1__AddNumbersResponse(soap, p, "ns1:AddNumbersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AddNumbersResponse(struct soap *soap, const char *URL, struct ns1__AddNumbersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbersResponse(soap, p), 0) || ::soap_put_ns1__AddNumbersResponse(soap, p, "ns1:AddNumbersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddNumbersResponse(struct soap *soap, const char *URL, struct ns1__AddNumbersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AddNumbersResponse(soap, p), 0) || ::soap_put_ns1__AddNumbersResponse(soap, p, "ns1:AddNumbersResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AddNumbersResponse * SOAP_FMAC4 soap_get_ns1__AddNumbersResponse(struct soap*, struct ns1__AddNumbersResponse *, const char*, const char*);

inline int soap_read_ns1__AddNumbersResponse(struct soap *soap, struct ns1__AddNumbersResponse *p)
{
	if (p)
	{	::soap_default_ns1__AddNumbersResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AddNumbersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddNumbersResponse(struct soap *soap, const char *URL, struct ns1__AddNumbersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AddNumbersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AddNumbersResponse(struct soap *soap, struct ns1__AddNumbersResponse *p)
{
	if (::soap_read_ns1__AddNumbersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

/* End of soapH.h */
