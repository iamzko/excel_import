/* .\Service1.asmx.h
   Generated by wsdl2h 2.8.111 from .\Service1.asmx.wsdl and .\wsmap.dat
   2021-02-22 02:36:43 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on .\Service1.asmx.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://Fantasy/WebServiceDemo/                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER typemap variable:                                               *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

tfzw = "http://Fantasy/WebServiceDemo/"

*/

#define SOAP_NAMESPACE_OF_tfzw	"http://Fantasy/WebServiceDemo/"
//gsoap tfzw  schema namespace:	http://Fantasy/WebServiceDemo/
//gsoap tfzw  schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://Fantasy/WebServiceDemo/                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://Fantasy/WebServiceDemo/                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://Fantasy/WebServiceDemo/                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://Fantasy/WebServiceDemo/                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap tfzw service name:	Service1Soap 
//gsoap tfzw service type:	Service1Soap 
//gsoap tfzw service port:	http://218.26.30.70:81/WebServiceDemo/Service1.asmx 
//gsoap tfzw service namespace:	http://Fantasy/WebServiceDemo/ 
//gsoap tfzw service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref Service1Soap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page Service1Soap Binding "Service1Soap"

@section Service1Soap_operations Operations of Binding "Service1Soap"

  - @ref tfzw__AddNumbers

  - @ref tfzw__clearLink

  - @ref tfzw__showExistLink

  - @ref tfzw__TestLinkSqlserver

  - @ref tfzw__executeSql

  - @ref tfzw__executeSql_USCOREbackEncord

  - @ref tfzw__executeSql_USCOREencode

  - @ref tfzw__insertXml

  - @ref tfzw__executeStorageProcess

  - @ref tfzw__AddFileToSql

  - @ref tfzw__AddNumbers_

  - @ref tfzw__clearLink_

  - @ref tfzw__showExistLink_

  - @ref tfzw__TestLinkSqlserver_

  - @ref tfzw__executeSql_

  - @ref tfzw__executeSql_USCOREbackEncord_

  - @ref tfzw__executeSql_USCOREencode_

  - @ref tfzw__insertXml_

  - @ref tfzw__executeStorageProcess_

  - @ref tfzw__AddFileToSql_

@section Service1Soap_ports Default endpoints of Binding "Service1Soap"

  - http://218.26.30.70:81/WebServiceDemo/Service1.asmx


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   Service1Soap                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__AddNumbers                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__AddNumbers" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/AddNumbers"

  - Addressing input action: "http://Fantasy/WebServiceDemo/AddNumbers"

  - Addressing output action: "http://Fantasy/WebServiceDemo/AddNumbersResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__AddNumbers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 NumberOne,
    int                                 NumberTwo,
    // output parameters:
    int                                &AddNumbersResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__AddNumbers(
    struct soap *soap,
    // input parameters:
    int                                 NumberOne,
    int                                 NumberTwo,
    // output parameters:
    int                                &AddNumbersResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	AddNumbers SOAP
//gsoap tfzw service method-style:	AddNumbers rpc
//gsoap tfzw service method-encoding:	AddNumbers http://schemas.xmlsoap.org/soap/encoding/
//gsoap tfzw service method-input-action:	AddNumbers http://Fantasy/WebServiceDemo/AddNumbers
//gsoap tfzw service method-output-action:	AddNumbers http://Fantasy/WebServiceDemo/AddNumbersResponse
int tfzw__AddNumbers(
    int                                 :NumberOne,	///< Input parameter, :unqualified name as per RPC encoding
    int                                 :NumberTwo,	///< Input parameter, :unqualified name as per RPC encoding
    int                                &:AddNumbersResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__clearLink                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__clearLink" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/clearLink"

  - Addressing input action: "http://Fantasy/WebServiceDemo/clearLink"

  - Addressing output action: "http://Fantasy/WebServiceDemo/clearLinkResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__clearLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    bool                                bTimeContrl,
    // output parameters:
    std::wstring                       &clearLinkResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__clearLink(
    struct soap *soap,
    // input parameters:
    bool                                bTimeContrl,
    // output parameters:
    std::wstring                       &clearLinkResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	clearLink SOAP
//gsoap tfzw service method-style:	clearLink rpc
//gsoap tfzw service method-encoding:	clearLink http://schemas.xmlsoap.org/soap/encoding/
//gsoap tfzw service method-input-action:	clearLink http://Fantasy/WebServiceDemo/clearLink
//gsoap tfzw service method-output-action:	clearLink http://Fantasy/WebServiceDemo/clearLinkResponse
int tfzw__clearLink(
    bool                                :bTimeContrl,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:clearLinkResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__showExistLink                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__showExistLink" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/showExistLink"

  - Addressing input action: "http://Fantasy/WebServiceDemo/showExistLink"

  - Addressing output action: "http://Fantasy/WebServiceDemo/showExistLinkResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__showExistLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    std::wstring                       &showExistLinkResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__showExistLink(
    struct soap *soap,
    // input parameters:
    // output parameters:
    std::wstring                       &showExistLinkResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	showExistLink SOAP
//gsoap tfzw service method-style:	showExistLink rpc
//gsoap tfzw service method-encoding:	showExistLink http://schemas.xmlsoap.org/soap/encoding/
//gsoap tfzw service method-input-action:	showExistLink http://Fantasy/WebServiceDemo/showExistLink
//gsoap tfzw service method-output-action:	showExistLink http://Fantasy/WebServiceDemo/showExistLinkResponse
int tfzw__showExistLink(
    std::wstring                       &:showExistLinkResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__TestLinkSqlserver                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__TestLinkSqlserver" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/TestLinkSqlserver"

  - Addressing input action: "http://Fantasy/WebServiceDemo/TestLinkSqlserver"

  - Addressing output action: "http://Fantasy/WebServiceDemo/TestLinkSqlserverResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__TestLinkSqlserver(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    // output parameters:
    std::wstring                       &TestLinkSqlserverResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__TestLinkSqlserver(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    // output parameters:
    std::wstring                       &TestLinkSqlserverResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	TestLinkSqlserver SOAP
//gsoap tfzw service method-style:	TestLinkSqlserver rpc
//gsoap tfzw service method-encoding:	TestLinkSqlserver http://schemas.xmlsoap.org/soap/encoding/
//gsoap tfzw service method-input-action:	TestLinkSqlserver http://Fantasy/WebServiceDemo/TestLinkSqlserver
//gsoap tfzw service method-output-action:	TestLinkSqlserver http://Fantasy/WebServiceDemo/TestLinkSqlserverResponse
int tfzw__TestLinkSqlserver(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:TestLinkSqlserverResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__executeSql                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__executeSql" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/executeSql"

  - Addressing input action: "http://Fantasy/WebServiceDemo/executeSql"

  - Addressing output action: "http://Fantasy/WebServiceDemo/executeSqlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__executeSql(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSqlResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__executeSql(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSqlResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	executeSql SOAP
//gsoap tfzw service method-style:	executeSql rpc
//gsoap tfzw service method-encoding:	executeSql http://schemas.xmlsoap.org/soap/encoding/
//gsoap tfzw service method-input-action:	executeSql http://Fantasy/WebServiceDemo/executeSql
//gsoap tfzw service method-output-action:	executeSql http://Fantasy/WebServiceDemo/executeSqlResponse
int tfzw__executeSql(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :sSql,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:executeSqlResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__executeSql_USCOREbackEncord                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__executeSql_USCOREbackEncord" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/executeSql_backEncord"

  - Addressing input action: "http://Fantasy/WebServiceDemo/executeSql_backEncord"

  - Addressing output action: "http://Fantasy/WebServiceDemo/executeSql_backEncordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__executeSql_USCOREbackEncord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSql_USCOREbackEncordResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__executeSql_USCOREbackEncord(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSql_USCOREbackEncordResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	executeSql_USCOREbackEncord SOAP
//gsoap tfzw service method-style:	executeSql_USCOREbackEncord rpc
//gsoap tfzw service method-encoding:	executeSql_USCOREbackEncord http://schemas.xmlsoap.org/soap/encoding/
//gsoap tfzw service method-input-action:	executeSql_USCOREbackEncord http://Fantasy/WebServiceDemo/executeSql_backEncord
//gsoap tfzw service method-output-action:	executeSql_USCOREbackEncord http://Fantasy/WebServiceDemo/executeSql_backEncordResponse
int tfzw__executeSql_USCOREbackEncord(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :sSql,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:executeSql_USCOREbackEncordResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__executeSql_USCOREencode                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__executeSql_USCOREencode" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/executeSql_encode"

  - Addressing input action: "http://Fantasy/WebServiceDemo/executeSql_encode"

  - Addressing output action: "http://Fantasy/WebServiceDemo/executeSql_encodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__executeSql_USCOREencode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSql_USCOREencodeResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__executeSql_USCOREencode(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSql_USCOREencodeResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	executeSql_USCOREencode SOAP
//gsoap tfzw service method-style:	executeSql_USCOREencode rpc
//gsoap tfzw service method-encoding:	executeSql_USCOREencode http://schemas.xmlsoap.org/soap/encoding/
//gsoap tfzw service method-input-action:	executeSql_USCOREencode http://Fantasy/WebServiceDemo/executeSql_encode
//gsoap tfzw service method-output-action:	executeSql_USCOREencode http://Fantasy/WebServiceDemo/executeSql_encodeResponse
int tfzw__executeSql_USCOREencode(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :sSql,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:executeSql_USCOREencodeResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__insertXml                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__insertXml" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/insertXml"

  - Addressing input action: "http://Fantasy/WebServiceDemo/insertXml"

  - Addressing output action: "http://Fantasy/WebServiceDemo/insertXmlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__insertXml(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        strXml,
    bool                                encode,
    // output parameters:
    std::wstring                       &insertXmlResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__insertXml(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        strXml,
    bool                                encode,
    // output parameters:
    std::wstring                       &insertXmlResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	insertXml SOAP
//gsoap tfzw service method-style:	insertXml rpc
//gsoap tfzw service method-encoding:	insertXml http://schemas.xmlsoap.org/soap/encoding/
//gsoap tfzw service method-input-action:	insertXml http://Fantasy/WebServiceDemo/insertXml
//gsoap tfzw service method-output-action:	insertXml http://Fantasy/WebServiceDemo/insertXmlResponse
int tfzw__insertXml(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :strXml,	///< Input parameter, :unqualified name as per RPC encoding
    bool                                :encode,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:insertXmlResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__executeStorageProcess                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__executeStorageProcess" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/executeStorageProcess"

  - Addressing input action: "http://Fantasy/WebServiceDemo/executeStorageProcess"

  - Addressing output action: "http://Fantasy/WebServiceDemo/executeStorageProcessResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__executeStorageProcess(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        StorageProcessName,
    std::wstring                        Parameters,
    // output parameters:
    std::wstring                       &executeStorageProcessResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__executeStorageProcess(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        StorageProcessName,
    std::wstring                        Parameters,
    // output parameters:
    std::wstring                       &executeStorageProcessResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	executeStorageProcess SOAP
//gsoap tfzw service method-style:	executeStorageProcess rpc
//gsoap tfzw service method-encoding:	executeStorageProcess http://schemas.xmlsoap.org/soap/encoding/
//gsoap tfzw service method-input-action:	executeStorageProcess http://Fantasy/WebServiceDemo/executeStorageProcess
//gsoap tfzw service method-output-action:	executeStorageProcess http://Fantasy/WebServiceDemo/executeStorageProcessResponse
int tfzw__executeStorageProcess(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :StorageProcessName,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :Parameters,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:executeStorageProcessResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__AddFileToSql                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__AddFileToSql" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/AddFileToSql"

  - Addressing input action: "http://Fantasy/WebServiceDemo/AddFileToSql"

  - Addressing output action: "http://Fantasy/WebServiceDemo/AddFileToSqlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__AddFileToSql(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        strFileName,
    std::wstring                        sPointer,
    std::wstring                        tablenamefieldname,
    std::wstring                        fileIP,
    std::wstring                        fileUse,
    std::wstring                        filePassword,
    // output parameters:
    std::wstring                       &AddFileToSqlResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__AddFileToSql(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        strFileName,
    std::wstring                        sPointer,
    std::wstring                        tablenamefieldname,
    std::wstring                        fileIP,
    std::wstring                        fileUse,
    std::wstring                        filePassword,
    // output parameters:
    std::wstring                       &AddFileToSqlResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	AddFileToSql SOAP
//gsoap tfzw service method-style:	AddFileToSql rpc
//gsoap tfzw service method-encoding:	AddFileToSql http://schemas.xmlsoap.org/soap/encoding/
//gsoap tfzw service method-input-action:	AddFileToSql http://Fantasy/WebServiceDemo/AddFileToSql
//gsoap tfzw service method-output-action:	AddFileToSql http://Fantasy/WebServiceDemo/AddFileToSqlResponse
int tfzw__AddFileToSql(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :strFileName,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :sPointer,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :tablenamefieldname,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :fileIP,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :fileUse,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :filePassword,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:AddFileToSqlResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__AddNumbers_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__AddNumbers_" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://www.w3.org/2003/05/soap-encoding"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/AddNumbers"

  - Addressing input action: "http://Fantasy/WebServiceDemo/AddNumbers"

  - Addressing output action: "http://Fantasy/WebServiceDemo/AddNumbersResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__AddNumbers_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 NumberOne,
    int                                 NumberTwo,
    // output parameters:
    int                                &AddNumbersResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__AddNumbers_(
    struct soap *soap,
    // input parameters:
    int                                 NumberOne,
    int                                 NumberTwo,
    // output parameters:
    int                                &AddNumbersResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	AddNumbers_ SOAP
//gsoap tfzw service method-style:	AddNumbers_ rpc
//gsoap tfzw service method-encoding:	AddNumbers_ http://www.w3.org/2003/05/soap-encoding
//gsoap tfzw service method-input-action:	AddNumbers_ http://Fantasy/WebServiceDemo/AddNumbers
//gsoap tfzw service method-output-action:	AddNumbers_ http://Fantasy/WebServiceDemo/AddNumbersResponse
int tfzw__AddNumbers_(
    int                                 :NumberOne,	///< Input parameter, :unqualified name as per RPC encoding
    int                                 :NumberTwo,	///< Input parameter, :unqualified name as per RPC encoding
    int                                &:AddNumbersResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__clearLink_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__clearLink_" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://www.w3.org/2003/05/soap-encoding"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/clearLink"

  - Addressing input action: "http://Fantasy/WebServiceDemo/clearLink"

  - Addressing output action: "http://Fantasy/WebServiceDemo/clearLinkResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__clearLink_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    bool                                bTimeContrl,
    // output parameters:
    std::wstring                       &clearLinkResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__clearLink_(
    struct soap *soap,
    // input parameters:
    bool                                bTimeContrl,
    // output parameters:
    std::wstring                       &clearLinkResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	clearLink_ SOAP
//gsoap tfzw service method-style:	clearLink_ rpc
//gsoap tfzw service method-encoding:	clearLink_ http://www.w3.org/2003/05/soap-encoding
//gsoap tfzw service method-input-action:	clearLink_ http://Fantasy/WebServiceDemo/clearLink
//gsoap tfzw service method-output-action:	clearLink_ http://Fantasy/WebServiceDemo/clearLinkResponse
int tfzw__clearLink_(
    bool                                :bTimeContrl,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:clearLinkResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__showExistLink_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__showExistLink_" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://www.w3.org/2003/05/soap-encoding"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/showExistLink"

  - Addressing input action: "http://Fantasy/WebServiceDemo/showExistLink"

  - Addressing output action: "http://Fantasy/WebServiceDemo/showExistLinkResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__showExistLink_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    std::wstring                       &showExistLinkResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__showExistLink_(
    struct soap *soap,
    // input parameters:
    // output parameters:
    std::wstring                       &showExistLinkResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	showExistLink_ SOAP
//gsoap tfzw service method-style:	showExistLink_ rpc
//gsoap tfzw service method-encoding:	showExistLink_ http://www.w3.org/2003/05/soap-encoding
//gsoap tfzw service method-input-action:	showExistLink_ http://Fantasy/WebServiceDemo/showExistLink
//gsoap tfzw service method-output-action:	showExistLink_ http://Fantasy/WebServiceDemo/showExistLinkResponse
int tfzw__showExistLink_(
    std::wstring                       &:showExistLinkResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__TestLinkSqlserver_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__TestLinkSqlserver_" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://www.w3.org/2003/05/soap-encoding"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/TestLinkSqlserver"

  - Addressing input action: "http://Fantasy/WebServiceDemo/TestLinkSqlserver"

  - Addressing output action: "http://Fantasy/WebServiceDemo/TestLinkSqlserverResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__TestLinkSqlserver_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    // output parameters:
    std::wstring                       &TestLinkSqlserverResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__TestLinkSqlserver_(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    // output parameters:
    std::wstring                       &TestLinkSqlserverResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	TestLinkSqlserver_ SOAP
//gsoap tfzw service method-style:	TestLinkSqlserver_ rpc
//gsoap tfzw service method-encoding:	TestLinkSqlserver_ http://www.w3.org/2003/05/soap-encoding
//gsoap tfzw service method-input-action:	TestLinkSqlserver_ http://Fantasy/WebServiceDemo/TestLinkSqlserver
//gsoap tfzw service method-output-action:	TestLinkSqlserver_ http://Fantasy/WebServiceDemo/TestLinkSqlserverResponse
int tfzw__TestLinkSqlserver_(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:TestLinkSqlserverResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__executeSql_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__executeSql_" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://www.w3.org/2003/05/soap-encoding"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/executeSql"

  - Addressing input action: "http://Fantasy/WebServiceDemo/executeSql"

  - Addressing output action: "http://Fantasy/WebServiceDemo/executeSqlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__executeSql_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSqlResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__executeSql_(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSqlResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	executeSql_ SOAP
//gsoap tfzw service method-style:	executeSql_ rpc
//gsoap tfzw service method-encoding:	executeSql_ http://www.w3.org/2003/05/soap-encoding
//gsoap tfzw service method-input-action:	executeSql_ http://Fantasy/WebServiceDemo/executeSql
//gsoap tfzw service method-output-action:	executeSql_ http://Fantasy/WebServiceDemo/executeSqlResponse
int tfzw__executeSql_(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :sSql,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:executeSqlResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__executeSql_USCOREbackEncord_                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__executeSql_USCOREbackEncord_" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://www.w3.org/2003/05/soap-encoding"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/executeSql_backEncord"

  - Addressing input action: "http://Fantasy/WebServiceDemo/executeSql_backEncord"

  - Addressing output action: "http://Fantasy/WebServiceDemo/executeSql_backEncordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__executeSql_USCOREbackEncord_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSql_USCOREbackEncordResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__executeSql_USCOREbackEncord_(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSql_USCOREbackEncordResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	executeSql_USCOREbackEncord_ SOAP
//gsoap tfzw service method-style:	executeSql_USCOREbackEncord_ rpc
//gsoap tfzw service method-encoding:	executeSql_USCOREbackEncord_ http://www.w3.org/2003/05/soap-encoding
//gsoap tfzw service method-input-action:	executeSql_USCOREbackEncord_ http://Fantasy/WebServiceDemo/executeSql_backEncord
//gsoap tfzw service method-output-action:	executeSql_USCOREbackEncord_ http://Fantasy/WebServiceDemo/executeSql_backEncordResponse
int tfzw__executeSql_USCOREbackEncord_(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :sSql,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:executeSql_USCOREbackEncordResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__executeSql_USCOREencode_                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__executeSql_USCOREencode_" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://www.w3.org/2003/05/soap-encoding"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/executeSql_encode"

  - Addressing input action: "http://Fantasy/WebServiceDemo/executeSql_encode"

  - Addressing output action: "http://Fantasy/WebServiceDemo/executeSql_encodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__executeSql_USCOREencode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSql_USCOREencodeResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__executeSql_USCOREencode_(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        sSql,
    // output parameters:
    std::wstring                       &executeSql_USCOREencodeResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	executeSql_USCOREencode_ SOAP
//gsoap tfzw service method-style:	executeSql_USCOREencode_ rpc
//gsoap tfzw service method-encoding:	executeSql_USCOREencode_ http://www.w3.org/2003/05/soap-encoding
//gsoap tfzw service method-input-action:	executeSql_USCOREencode_ http://Fantasy/WebServiceDemo/executeSql_encode
//gsoap tfzw service method-output-action:	executeSql_USCOREencode_ http://Fantasy/WebServiceDemo/executeSql_encodeResponse
int tfzw__executeSql_USCOREencode_(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :sSql,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:executeSql_USCOREencodeResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__insertXml_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__insertXml_" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://www.w3.org/2003/05/soap-encoding"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/insertXml"

  - Addressing input action: "http://Fantasy/WebServiceDemo/insertXml"

  - Addressing output action: "http://Fantasy/WebServiceDemo/insertXmlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__insertXml_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        strXml,
    bool                                encode,
    // output parameters:
    std::wstring                       &insertXmlResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__insertXml_(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        strXml,
    bool                                encode,
    // output parameters:
    std::wstring                       &insertXmlResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	insertXml_ SOAP
//gsoap tfzw service method-style:	insertXml_ rpc
//gsoap tfzw service method-encoding:	insertXml_ http://www.w3.org/2003/05/soap-encoding
//gsoap tfzw service method-input-action:	insertXml_ http://Fantasy/WebServiceDemo/insertXml
//gsoap tfzw service method-output-action:	insertXml_ http://Fantasy/WebServiceDemo/insertXmlResponse
int tfzw__insertXml_(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :strXml,	///< Input parameter, :unqualified name as per RPC encoding
    bool                                :encode,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:insertXmlResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__executeStorageProcess_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__executeStorageProcess_" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://www.w3.org/2003/05/soap-encoding"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/executeStorageProcess"

  - Addressing input action: "http://Fantasy/WebServiceDemo/executeStorageProcess"

  - Addressing output action: "http://Fantasy/WebServiceDemo/executeStorageProcessResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__executeStorageProcess_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        StorageProcessName,
    std::wstring                        Parameters,
    // output parameters:
    std::wstring                       &executeStorageProcessResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__executeStorageProcess_(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        StorageProcessName,
    std::wstring                        Parameters,
    // output parameters:
    std::wstring                       &executeStorageProcessResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	executeStorageProcess_ SOAP
//gsoap tfzw service method-style:	executeStorageProcess_ rpc
//gsoap tfzw service method-encoding:	executeStorageProcess_ http://www.w3.org/2003/05/soap-encoding
//gsoap tfzw service method-input-action:	executeStorageProcess_ http://Fantasy/WebServiceDemo/executeStorageProcess
//gsoap tfzw service method-output-action:	executeStorageProcess_ http://Fantasy/WebServiceDemo/executeStorageProcessResponse
int tfzw__executeStorageProcess_(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :StorageProcessName,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :Parameters,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:executeStorageProcessResult	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   tfzw__AddFileToSql_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "tfzw__AddFileToSql_" of service binding "Service1Soap".

  - SOAP RPC encodingStyle="http://www.w3.org/2003/05/soap-encoding"

  - Default endpoints:
    - http://218.26.30.70:81/WebServiceDemo/Service1.asmx

  - Default SOAP action or REST location path:
    - "http://Fantasy/WebServiceDemo/AddFileToSql"

  - Addressing input action: "http://Fantasy/WebServiceDemo/AddFileToSql"

  - Addressing output action: "http://Fantasy/WebServiceDemo/AddFileToSqlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_tfzw__AddFileToSql_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        strFileName,
    std::wstring                        sPointer,
    std::wstring                        tablenamefieldname,
    std::wstring                        fileIP,
    std::wstring                        fileUse,
    std::wstring                        filePassword,
    // output parameters:
    std::wstring                       &AddFileToSqlResult
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int tfzw__AddFileToSql_(
    struct soap *soap,
    // input parameters:
    std::wstring                        serverInfo,
    std::wstring                        strFileName,
    std::wstring                        sPointer,
    std::wstring                        tablenamefieldname,
    std::wstring                        fileIP,
    std::wstring                        fileUse,
    std::wstring                        filePassword,
    // output parameters:
    std::wstring                       &AddFileToSqlResult
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h generated with soapcpp2):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h generated with soapcpp2):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tfzw service method-protocol:	AddFileToSql_ SOAP
//gsoap tfzw service method-style:	AddFileToSql_ rpc
//gsoap tfzw service method-encoding:	AddFileToSql_ http://www.w3.org/2003/05/soap-encoding
//gsoap tfzw service method-input-action:	AddFileToSql_ http://Fantasy/WebServiceDemo/AddFileToSql
//gsoap tfzw service method-output-action:	AddFileToSql_ http://Fantasy/WebServiceDemo/AddFileToSqlResponse
int tfzw__AddFileToSql_(
    std::wstring                        :serverInfo,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :strFileName,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :sPointer,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :tablenamefieldname,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :fileIP,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :fileUse,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                        :filePassword,	///< Input parameter, :unqualified name as per RPC encoding
    std::wstring                       &:AddFileToSqlResult	///< Output parameter, :unqualified name as per RPC encoding
);

/** @page Service1Soap Binding "Service1Soap"

@section Service1Soap_policy_enablers Policy Enablers of Binding "Service1Soap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section tfzw Top-level root elements of schema "http://Fantasy/WebServiceDemo/"

*/

/* End of .\Service1.asmx.h */
