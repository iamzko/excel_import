/* soapService1SoapProxy.cpp
   Generated by gSOAP 2.8.111 for .\Service1.asmx.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapService1SoapProxy.h"

Service1SoapProxy::Service1SoapProxy() : soap(SOAP_IO_DEFAULT)
{	Service1SoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

Service1SoapProxy::Service1SoapProxy(const Service1SoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

Service1SoapProxy::Service1SoapProxy(const struct soap &_soap) : soap(_soap)
{ }

Service1SoapProxy::Service1SoapProxy(const struct soap &_soap, const char *soap_endpoint_url) : soap(_soap)
{
	soap_endpoint = soap_endpoint_url;
}

Service1SoapProxy::Service1SoapProxy(const char *soap_endpoint_url) : soap(SOAP_IO_DEFAULT)
{	Service1SoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

Service1SoapProxy::Service1SoapProxy(soap_mode iomode) : soap(iomode)
{	Service1SoapProxy_init(iomode, iomode);
}

Service1SoapProxy::Service1SoapProxy(const char *soap_endpoint_url, soap_mode iomode) : soap(iomode)
{	Service1SoapProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

Service1SoapProxy::Service1SoapProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	Service1SoapProxy_init(imode, omode);
}

Service1SoapProxy::~Service1SoapProxy()
{
	this->destroy();
}

void Service1SoapProxy::Service1SoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "tfzw", "http://Fantasy/WebServiceDemo/", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

Service1SoapProxy *Service1SoapProxy::copy()
{	Service1SoapProxy *dup = SOAP_NEW_UNMANAGED(Service1SoapProxy(*(struct soap*)this));
	return dup;
}

Service1SoapProxy& Service1SoapProxy::operator=(const Service1SoapProxy& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void Service1SoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void Service1SoapProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	Service1SoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void Service1SoapProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *Service1SoapProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *Service1SoapProxy::soap_fault()
{	return this->fault;
}

const char *Service1SoapProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this);
}

const char *Service1SoapProxy::soap_fault_string()
{	return ::soap_fault_string(this);
}

const char *Service1SoapProxy::soap_fault_detail()
{	return ::soap_fault_detail(this);
}

int Service1SoapProxy::soap_close_socket()
{	return ::soap_closesock(this);
}

int Service1SoapProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this);
}

void Service1SoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void Service1SoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *Service1SoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int Service1SoapProxy::send_AddNumbers(const char *soap_endpoint_url, const char *soap_action, int NumberOne, int NumberTwo)
{
	struct soap *soap = this;
	struct tfzw__AddNumbers soap_tmp_tfzw__AddNumbers;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddNumbers";
	soap_tmp_tfzw__AddNumbers.NumberOne = NumberOne;
	soap_tmp_tfzw__AddNumbers.NumberTwo = NumberTwo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__AddNumbers(soap, &soap_tmp_tfzw__AddNumbers);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__AddNumbers(soap, &soap_tmp_tfzw__AddNumbers, "tfzw:AddNumbers", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__AddNumbers(soap, &soap_tmp_tfzw__AddNumbers, "tfzw:AddNumbers", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_AddNumbers(int &AddNumbersResult)
{
	struct soap *soap = this;
	struct tfzw__AddNumbersResponse *soap_tmp_tfzw__AddNumbersResponse;
	soap_default_int(soap, &AddNumbersResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__AddNumbersResponse = soap_get_tfzw__AddNumbersResponse(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__AddNumbersResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddNumbersResult = soap_tmp_tfzw__AddNumbersResponse->AddNumbersResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_clearLink(const char *soap_endpoint_url, const char *soap_action, bool bTimeContrl)
{
	struct soap *soap = this;
	struct tfzw__clearLink soap_tmp_tfzw__clearLink;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/clearLink";
	soap_tmp_tfzw__clearLink.bTimeContrl = bTimeContrl;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__clearLink(soap, &soap_tmp_tfzw__clearLink);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__clearLink(soap, &soap_tmp_tfzw__clearLink, "tfzw:clearLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__clearLink(soap, &soap_tmp_tfzw__clearLink, "tfzw:clearLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_clearLink(std::wstring &clearLinkResult)
{
	struct soap *soap = this;
	struct tfzw__clearLinkResponse *soap_tmp_tfzw__clearLinkResponse;
	soap_default_std__wstring(soap, &clearLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__clearLinkResponse = soap_get_tfzw__clearLinkResponse(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__clearLinkResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	clearLinkResult = soap_tmp_tfzw__clearLinkResponse->clearLinkResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_showExistLink(const char *soap_endpoint_url, const char *soap_action)
{
	struct soap *soap = this;
	struct tfzw__showExistLink soap_tmp_tfzw__showExistLink;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/showExistLink";
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__showExistLink(soap, &soap_tmp_tfzw__showExistLink);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__showExistLink(soap, &soap_tmp_tfzw__showExistLink, "tfzw:showExistLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__showExistLink(soap, &soap_tmp_tfzw__showExistLink, "tfzw:showExistLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_showExistLink(std::wstring &showExistLinkResult)
{
	struct soap *soap = this;
	struct tfzw__showExistLinkResponse *soap_tmp_tfzw__showExistLinkResponse;
	soap_default_std__wstring(soap, &showExistLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__showExistLinkResponse = soap_get_tfzw__showExistLinkResponse(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__showExistLinkResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	showExistLinkResult = soap_tmp_tfzw__showExistLinkResponse->showExistLinkResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_TestLinkSqlserver(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo)
{
	struct soap *soap = this;
	struct tfzw__TestLinkSqlserver soap_tmp_tfzw__TestLinkSqlserver;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/TestLinkSqlserver";
	soap_tmp_tfzw__TestLinkSqlserver.serverInfo = serverInfo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__TestLinkSqlserver(soap, &soap_tmp_tfzw__TestLinkSqlserver);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__TestLinkSqlserver(soap, &soap_tmp_tfzw__TestLinkSqlserver, "tfzw:TestLinkSqlserver", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__TestLinkSqlserver(soap, &soap_tmp_tfzw__TestLinkSqlserver, "tfzw:TestLinkSqlserver", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_TestLinkSqlserver(std::wstring &TestLinkSqlserverResult)
{
	struct soap *soap = this;
	struct tfzw__TestLinkSqlserverResponse *soap_tmp_tfzw__TestLinkSqlserverResponse;
	soap_default_std__wstring(soap, &TestLinkSqlserverResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__TestLinkSqlserverResponse = soap_get_tfzw__TestLinkSqlserverResponse(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__TestLinkSqlserverResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	TestLinkSqlserverResult = soap_tmp_tfzw__TestLinkSqlserverResponse->TestLinkSqlserverResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_executeSql(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{
	struct soap *soap = this;
	struct tfzw__executeSql soap_tmp_tfzw__executeSql;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql";
	soap_tmp_tfzw__executeSql.serverInfo = serverInfo;
	soap_tmp_tfzw__executeSql.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__executeSql(soap, &soap_tmp_tfzw__executeSql);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__executeSql(soap, &soap_tmp_tfzw__executeSql, "tfzw:executeSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__executeSql(soap, &soap_tmp_tfzw__executeSql, "tfzw:executeSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_executeSql(std::wstring &executeSqlResult)
{
	struct soap *soap = this;
	struct tfzw__executeSqlResponse *soap_tmp_tfzw__executeSqlResponse;
	soap_default_std__wstring(soap, &executeSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__executeSqlResponse = soap_get_tfzw__executeSqlResponse(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__executeSqlResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSqlResult = soap_tmp_tfzw__executeSqlResponse->executeSqlResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_executeSql_USCOREbackEncord(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{
	struct soap *soap = this;
	struct tfzw__executeSql_USCOREbackEncord soap_tmp_tfzw__executeSql_USCOREbackEncord;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_backEncord";
	soap_tmp_tfzw__executeSql_USCOREbackEncord.serverInfo = serverInfo;
	soap_tmp_tfzw__executeSql_USCOREbackEncord.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__executeSql_USCOREbackEncord(soap, &soap_tmp_tfzw__executeSql_USCOREbackEncord);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__executeSql_USCOREbackEncord(soap, &soap_tmp_tfzw__executeSql_USCOREbackEncord, "tfzw:executeSql_backEncord", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__executeSql_USCOREbackEncord(soap, &soap_tmp_tfzw__executeSql_USCOREbackEncord, "tfzw:executeSql_backEncord", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_executeSql_USCOREbackEncord(std::wstring &executeSql_USCOREbackEncordResult)
{
	struct soap *soap = this;
	struct tfzw__executeSql_USCOREbackEncordResponse *soap_tmp_tfzw__executeSql_USCOREbackEncordResponse;
	soap_default_std__wstring(soap, &executeSql_USCOREbackEncordResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__executeSql_USCOREbackEncordResponse = soap_get_tfzw__executeSql_USCOREbackEncordResponse(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__executeSql_USCOREbackEncordResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREbackEncordResult = soap_tmp_tfzw__executeSql_USCOREbackEncordResponse->executeSql_USCOREbackEncordResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_executeSql_USCOREencode(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{
	struct soap *soap = this;
	struct tfzw__executeSql_USCOREencode soap_tmp_tfzw__executeSql_USCOREencode;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_encode";
	soap_tmp_tfzw__executeSql_USCOREencode.serverInfo = serverInfo;
	soap_tmp_tfzw__executeSql_USCOREencode.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__executeSql_USCOREencode(soap, &soap_tmp_tfzw__executeSql_USCOREencode);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__executeSql_USCOREencode(soap, &soap_tmp_tfzw__executeSql_USCOREencode, "tfzw:executeSql_encode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__executeSql_USCOREencode(soap, &soap_tmp_tfzw__executeSql_USCOREencode, "tfzw:executeSql_encode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_executeSql_USCOREencode(std::wstring &executeSql_USCOREencodeResult)
{
	struct soap *soap = this;
	struct tfzw__executeSql_USCOREencodeResponse *soap_tmp_tfzw__executeSql_USCOREencodeResponse;
	soap_default_std__wstring(soap, &executeSql_USCOREencodeResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__executeSql_USCOREencodeResponse = soap_get_tfzw__executeSql_USCOREencodeResponse(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__executeSql_USCOREencodeResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREencodeResult = soap_tmp_tfzw__executeSql_USCOREencodeResponse->executeSql_USCOREencodeResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_insertXml(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strXml, bool encode)
{
	struct soap *soap = this;
	struct tfzw__insertXml soap_tmp_tfzw__insertXml;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/insertXml";
	soap_tmp_tfzw__insertXml.serverInfo = serverInfo;
	soap_tmp_tfzw__insertXml.strXml = strXml;
	soap_tmp_tfzw__insertXml.encode = encode;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__insertXml(soap, &soap_tmp_tfzw__insertXml);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__insertXml(soap, &soap_tmp_tfzw__insertXml, "tfzw:insertXml", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__insertXml(soap, &soap_tmp_tfzw__insertXml, "tfzw:insertXml", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_insertXml(std::wstring &insertXmlResult)
{
	struct soap *soap = this;
	struct tfzw__insertXmlResponse *soap_tmp_tfzw__insertXmlResponse;
	soap_default_std__wstring(soap, &insertXmlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__insertXmlResponse = soap_get_tfzw__insertXmlResponse(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__insertXmlResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	insertXmlResult = soap_tmp_tfzw__insertXmlResponse->insertXmlResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_executeStorageProcess(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& StorageProcessName, const std::wstring& Parameters)
{
	struct soap *soap = this;
	struct tfzw__executeStorageProcess soap_tmp_tfzw__executeStorageProcess;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeStorageProcess";
	soap_tmp_tfzw__executeStorageProcess.serverInfo = serverInfo;
	soap_tmp_tfzw__executeStorageProcess.StorageProcessName = StorageProcessName;
	soap_tmp_tfzw__executeStorageProcess.Parameters = Parameters;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__executeStorageProcess(soap, &soap_tmp_tfzw__executeStorageProcess);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__executeStorageProcess(soap, &soap_tmp_tfzw__executeStorageProcess, "tfzw:executeStorageProcess", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__executeStorageProcess(soap, &soap_tmp_tfzw__executeStorageProcess, "tfzw:executeStorageProcess", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_executeStorageProcess(std::wstring &executeStorageProcessResult)
{
	struct soap *soap = this;
	struct tfzw__executeStorageProcessResponse *soap_tmp_tfzw__executeStorageProcessResponse;
	soap_default_std__wstring(soap, &executeStorageProcessResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__executeStorageProcessResponse = soap_get_tfzw__executeStorageProcessResponse(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__executeStorageProcessResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeStorageProcessResult = soap_tmp_tfzw__executeStorageProcessResponse->executeStorageProcessResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_AddFileToSql(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strFileName, const std::wstring& sPointer, const std::wstring& tablenamefieldname, const std::wstring& fileIP, const std::wstring& fileUse, const std::wstring& filePassword)
{
	struct soap *soap = this;
	struct tfzw__AddFileToSql soap_tmp_tfzw__AddFileToSql;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddFileToSql";
	soap_tmp_tfzw__AddFileToSql.serverInfo = serverInfo;
	soap_tmp_tfzw__AddFileToSql.strFileName = strFileName;
	soap_tmp_tfzw__AddFileToSql.sPointer = sPointer;
	soap_tmp_tfzw__AddFileToSql.tablenamefieldname = tablenamefieldname;
	soap_tmp_tfzw__AddFileToSql.fileIP = fileIP;
	soap_tmp_tfzw__AddFileToSql.fileUse = fileUse;
	soap_tmp_tfzw__AddFileToSql.filePassword = filePassword;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__AddFileToSql(soap, &soap_tmp_tfzw__AddFileToSql);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__AddFileToSql(soap, &soap_tmp_tfzw__AddFileToSql, "tfzw:AddFileToSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__AddFileToSql(soap, &soap_tmp_tfzw__AddFileToSql, "tfzw:AddFileToSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_AddFileToSql(std::wstring &AddFileToSqlResult)
{
	struct soap *soap = this;
	struct tfzw__AddFileToSqlResponse *soap_tmp_tfzw__AddFileToSqlResponse;
	soap_default_std__wstring(soap, &AddFileToSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__AddFileToSqlResponse = soap_get_tfzw__AddFileToSqlResponse(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__AddFileToSqlResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddFileToSqlResult = soap_tmp_tfzw__AddFileToSqlResponse->AddFileToSqlResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_AddNumbers_(const char *soap_endpoint_url, const char *soap_action, int NumberOne, int NumberTwo)
{
	struct soap *soap = this;
	struct tfzw__AddNumbers_ soap_tmp_tfzw__AddNumbers_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddNumbers";
	soap_tmp_tfzw__AddNumbers_.NumberOne = NumberOne;
	soap_tmp_tfzw__AddNumbers_.NumberTwo = NumberTwo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__AddNumbers_(soap, &soap_tmp_tfzw__AddNumbers_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__AddNumbers_(soap, &soap_tmp_tfzw__AddNumbers_, "tfzw:AddNumbers", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__AddNumbers_(soap, &soap_tmp_tfzw__AddNumbers_, "tfzw:AddNumbers", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_AddNumbers_(int &AddNumbersResult)
{
	struct soap *soap = this;
	struct tfzw__AddNumbers_Response *soap_tmp_tfzw__AddNumbers_Response;
	soap_default_int(soap, &AddNumbersResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__AddNumbers_Response = soap_get_tfzw__AddNumbers_Response(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__AddNumbers_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddNumbersResult = soap_tmp_tfzw__AddNumbers_Response->AddNumbersResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_clearLink_(const char *soap_endpoint_url, const char *soap_action, bool bTimeContrl)
{
	struct soap *soap = this;
	struct tfzw__clearLink_ soap_tmp_tfzw__clearLink_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/clearLink";
	soap_tmp_tfzw__clearLink_.bTimeContrl = bTimeContrl;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__clearLink_(soap, &soap_tmp_tfzw__clearLink_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__clearLink_(soap, &soap_tmp_tfzw__clearLink_, "tfzw:clearLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__clearLink_(soap, &soap_tmp_tfzw__clearLink_, "tfzw:clearLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_clearLink_(std::wstring &clearLinkResult)
{
	struct soap *soap = this;
	struct tfzw__clearLink_Response *soap_tmp_tfzw__clearLink_Response;
	soap_default_std__wstring(soap, &clearLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__clearLink_Response = soap_get_tfzw__clearLink_Response(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__clearLink_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	clearLinkResult = soap_tmp_tfzw__clearLink_Response->clearLinkResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_showExistLink_(const char *soap_endpoint_url, const char *soap_action)
{
	struct soap *soap = this;
	struct tfzw__showExistLink_ soap_tmp_tfzw__showExistLink_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/showExistLink";
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__showExistLink_(soap, &soap_tmp_tfzw__showExistLink_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__showExistLink_(soap, &soap_tmp_tfzw__showExistLink_, "tfzw:showExistLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__showExistLink_(soap, &soap_tmp_tfzw__showExistLink_, "tfzw:showExistLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_showExistLink_(std::wstring &showExistLinkResult)
{
	struct soap *soap = this;
	struct tfzw__showExistLink_Response *soap_tmp_tfzw__showExistLink_Response;
	soap_default_std__wstring(soap, &showExistLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__showExistLink_Response = soap_get_tfzw__showExistLink_Response(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__showExistLink_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	showExistLinkResult = soap_tmp_tfzw__showExistLink_Response->showExistLinkResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_TestLinkSqlserver_(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo)
{
	struct soap *soap = this;
	struct tfzw__TestLinkSqlserver_ soap_tmp_tfzw__TestLinkSqlserver_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/TestLinkSqlserver";
	soap_tmp_tfzw__TestLinkSqlserver_.serverInfo = serverInfo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__TestLinkSqlserver_(soap, &soap_tmp_tfzw__TestLinkSqlserver_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__TestLinkSqlserver_(soap, &soap_tmp_tfzw__TestLinkSqlserver_, "tfzw:TestLinkSqlserver", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__TestLinkSqlserver_(soap, &soap_tmp_tfzw__TestLinkSqlserver_, "tfzw:TestLinkSqlserver", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_TestLinkSqlserver_(std::wstring &TestLinkSqlserverResult)
{
	struct soap *soap = this;
	struct tfzw__TestLinkSqlserver_Response *soap_tmp_tfzw__TestLinkSqlserver_Response;
	soap_default_std__wstring(soap, &TestLinkSqlserverResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__TestLinkSqlserver_Response = soap_get_tfzw__TestLinkSqlserver_Response(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__TestLinkSqlserver_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	TestLinkSqlserverResult = soap_tmp_tfzw__TestLinkSqlserver_Response->TestLinkSqlserverResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_executeSql_(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{
	struct soap *soap = this;
	struct tfzw__executeSql_ soap_tmp_tfzw__executeSql_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql";
	soap_tmp_tfzw__executeSql_.serverInfo = serverInfo;
	soap_tmp_tfzw__executeSql_.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__executeSql_(soap, &soap_tmp_tfzw__executeSql_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__executeSql_(soap, &soap_tmp_tfzw__executeSql_, "tfzw:executeSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__executeSql_(soap, &soap_tmp_tfzw__executeSql_, "tfzw:executeSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_executeSql_(std::wstring &executeSqlResult)
{
	struct soap *soap = this;
	struct tfzw__executeSql_Response *soap_tmp_tfzw__executeSql_Response;
	soap_default_std__wstring(soap, &executeSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__executeSql_Response = soap_get_tfzw__executeSql_Response(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__executeSql_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSqlResult = soap_tmp_tfzw__executeSql_Response->executeSqlResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_executeSql_USCOREbackEncord_(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{
	struct soap *soap = this;
	struct tfzw__executeSql_USCOREbackEncord_ soap_tmp_tfzw__executeSql_USCOREbackEncord_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_backEncord";
	soap_tmp_tfzw__executeSql_USCOREbackEncord_.serverInfo = serverInfo;
	soap_tmp_tfzw__executeSql_USCOREbackEncord_.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__executeSql_USCOREbackEncord_(soap, &soap_tmp_tfzw__executeSql_USCOREbackEncord_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__executeSql_USCOREbackEncord_(soap, &soap_tmp_tfzw__executeSql_USCOREbackEncord_, "tfzw:executeSql_backEncord", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__executeSql_USCOREbackEncord_(soap, &soap_tmp_tfzw__executeSql_USCOREbackEncord_, "tfzw:executeSql_backEncord", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_executeSql_USCOREbackEncord_(std::wstring &executeSql_USCOREbackEncordResult)
{
	struct soap *soap = this;
	struct tfzw__executeSql_USCOREbackEncord_Response *soap_tmp_tfzw__executeSql_USCOREbackEncord_Response;
	soap_default_std__wstring(soap, &executeSql_USCOREbackEncordResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__executeSql_USCOREbackEncord_Response = soap_get_tfzw__executeSql_USCOREbackEncord_Response(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__executeSql_USCOREbackEncord_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREbackEncordResult = soap_tmp_tfzw__executeSql_USCOREbackEncord_Response->executeSql_USCOREbackEncordResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_executeSql_USCOREencode_(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{
	struct soap *soap = this;
	struct tfzw__executeSql_USCOREencode_ soap_tmp_tfzw__executeSql_USCOREencode_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_encode";
	soap_tmp_tfzw__executeSql_USCOREencode_.serverInfo = serverInfo;
	soap_tmp_tfzw__executeSql_USCOREencode_.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__executeSql_USCOREencode_(soap, &soap_tmp_tfzw__executeSql_USCOREencode_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__executeSql_USCOREencode_(soap, &soap_tmp_tfzw__executeSql_USCOREencode_, "tfzw:executeSql_encode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__executeSql_USCOREencode_(soap, &soap_tmp_tfzw__executeSql_USCOREencode_, "tfzw:executeSql_encode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_executeSql_USCOREencode_(std::wstring &executeSql_USCOREencodeResult)
{
	struct soap *soap = this;
	struct tfzw__executeSql_USCOREencode_Response *soap_tmp_tfzw__executeSql_USCOREencode_Response;
	soap_default_std__wstring(soap, &executeSql_USCOREencodeResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__executeSql_USCOREencode_Response = soap_get_tfzw__executeSql_USCOREencode_Response(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__executeSql_USCOREencode_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREencodeResult = soap_tmp_tfzw__executeSql_USCOREencode_Response->executeSql_USCOREencodeResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_insertXml_(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strXml, bool encode)
{
	struct soap *soap = this;
	struct tfzw__insertXml_ soap_tmp_tfzw__insertXml_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/insertXml";
	soap_tmp_tfzw__insertXml_.serverInfo = serverInfo;
	soap_tmp_tfzw__insertXml_.strXml = strXml;
	soap_tmp_tfzw__insertXml_.encode = encode;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__insertXml_(soap, &soap_tmp_tfzw__insertXml_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__insertXml_(soap, &soap_tmp_tfzw__insertXml_, "tfzw:insertXml", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__insertXml_(soap, &soap_tmp_tfzw__insertXml_, "tfzw:insertXml", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_insertXml_(std::wstring &insertXmlResult)
{
	struct soap *soap = this;
	struct tfzw__insertXml_Response *soap_tmp_tfzw__insertXml_Response;
	soap_default_std__wstring(soap, &insertXmlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__insertXml_Response = soap_get_tfzw__insertXml_Response(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__insertXml_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	insertXmlResult = soap_tmp_tfzw__insertXml_Response->insertXmlResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_executeStorageProcess_(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& StorageProcessName, const std::wstring& Parameters)
{
	struct soap *soap = this;
	struct tfzw__executeStorageProcess_ soap_tmp_tfzw__executeStorageProcess_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeStorageProcess";
	soap_tmp_tfzw__executeStorageProcess_.serverInfo = serverInfo;
	soap_tmp_tfzw__executeStorageProcess_.StorageProcessName = StorageProcessName;
	soap_tmp_tfzw__executeStorageProcess_.Parameters = Parameters;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__executeStorageProcess_(soap, &soap_tmp_tfzw__executeStorageProcess_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__executeStorageProcess_(soap, &soap_tmp_tfzw__executeStorageProcess_, "tfzw:executeStorageProcess", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__executeStorageProcess_(soap, &soap_tmp_tfzw__executeStorageProcess_, "tfzw:executeStorageProcess", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_executeStorageProcess_(std::wstring &executeStorageProcessResult)
{
	struct soap *soap = this;
	struct tfzw__executeStorageProcess_Response *soap_tmp_tfzw__executeStorageProcess_Response;
	soap_default_std__wstring(soap, &executeStorageProcessResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__executeStorageProcess_Response = soap_get_tfzw__executeStorageProcess_Response(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__executeStorageProcess_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeStorageProcessResult = soap_tmp_tfzw__executeStorageProcess_Response->executeStorageProcessResult;
	return soap_closesock(soap);
}

int Service1SoapProxy::send_AddFileToSql_(const char *soap_endpoint_url, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strFileName, const std::wstring& sPointer, const std::wstring& tablenamefieldname, const std::wstring& fileIP, const std::wstring& fileUse, const std::wstring& filePassword)
{
	struct soap *soap = this;
	struct tfzw__AddFileToSql_ soap_tmp_tfzw__AddFileToSql_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddFileToSql";
	soap_tmp_tfzw__AddFileToSql_.serverInfo = serverInfo;
	soap_tmp_tfzw__AddFileToSql_.strFileName = strFileName;
	soap_tmp_tfzw__AddFileToSql_.sPointer = sPointer;
	soap_tmp_tfzw__AddFileToSql_.tablenamefieldname = tablenamefieldname;
	soap_tmp_tfzw__AddFileToSql_.fileIP = fileIP;
	soap_tmp_tfzw__AddFileToSql_.fileUse = fileUse;
	soap_tmp_tfzw__AddFileToSql_.filePassword = filePassword;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_tfzw__AddFileToSql_(soap, &soap_tmp_tfzw__AddFileToSql_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_tfzw__AddFileToSql_(soap, &soap_tmp_tfzw__AddFileToSql_, "tfzw:AddFileToSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tfzw__AddFileToSql_(soap, &soap_tmp_tfzw__AddFileToSql_, "tfzw:AddFileToSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int Service1SoapProxy::recv_AddFileToSql_(std::wstring &AddFileToSqlResult)
{
	struct soap *soap = this;
	struct tfzw__AddFileToSql_Response *soap_tmp_tfzw__AddFileToSql_Response;
	soap_default_std__wstring(soap, &AddFileToSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_tfzw__AddFileToSql_Response = soap_get_tfzw__AddFileToSql_Response(soap, NULL, "", NULL);
	if (!soap_tmp_tfzw__AddFileToSql_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddFileToSqlResult = soap_tmp_tfzw__AddFileToSql_Response->AddFileToSqlResult;
	return soap_closesock(soap);
}
/* End of client proxy code */
