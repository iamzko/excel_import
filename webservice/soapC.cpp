/* soapC.cpp
   Generated by gSOAP 2.8.111 for .\Service1.asmx.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.111 2021-02-20 08:59:16 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_std__wstring:
		return soap_in_std__wstring(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_ns1__AddFileToSql_:
		return soap_in_ns1__AddFileToSql_(soap, tag, NULL, "ns1:AddFileToSql");
	case SOAP_TYPE_ns1__AddFileToSql_Response:
		return soap_in_ns1__AddFileToSql_Response(soap, tag, NULL, "ns1:AddFileToSql-Response");
	case SOAP_TYPE_ns1__executeStorageProcess_:
		return soap_in_ns1__executeStorageProcess_(soap, tag, NULL, "ns1:executeStorageProcess");
	case SOAP_TYPE_ns1__executeStorageProcess_Response:
		return soap_in_ns1__executeStorageProcess_Response(soap, tag, NULL, "ns1:executeStorageProcess-Response");
	case SOAP_TYPE_ns1__insertXml_:
		return soap_in_ns1__insertXml_(soap, tag, NULL, "ns1:insertXml");
	case SOAP_TYPE_ns1__insertXml_Response:
		return soap_in_ns1__insertXml_Response(soap, tag, NULL, "ns1:insertXml-Response");
	case SOAP_TYPE_ns1__executeSql_USCOREencode_:
		return soap_in_ns1__executeSql_USCOREencode_(soap, tag, NULL, "ns1:executeSql_encode");
	case SOAP_TYPE_ns1__executeSql_USCOREencode_Response:
		return soap_in_ns1__executeSql_USCOREencode_Response(soap, tag, NULL, "ns1:executeSql_encode-Response");
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_:
		return soap_in_ns1__executeSql_USCOREbackEncord_(soap, tag, NULL, "ns1:executeSql_backEncord");
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response:
		return soap_in_ns1__executeSql_USCOREbackEncord_Response(soap, tag, NULL, "ns1:executeSql_backEncord-Response");
	case SOAP_TYPE_ns1__executeSql_:
		return soap_in_ns1__executeSql_(soap, tag, NULL, "ns1:executeSql");
	case SOAP_TYPE_ns1__executeSql_Response:
		return soap_in_ns1__executeSql_Response(soap, tag, NULL, "ns1:executeSql-Response");
	case SOAP_TYPE_ns1__TestLinkSqlserver_:
		return soap_in_ns1__TestLinkSqlserver_(soap, tag, NULL, "ns1:TestLinkSqlserver");
	case SOAP_TYPE_ns1__TestLinkSqlserver_Response:
		return soap_in_ns1__TestLinkSqlserver_Response(soap, tag, NULL, "ns1:TestLinkSqlserver-Response");
	case SOAP_TYPE_ns1__showExistLink_:
		return soap_in_ns1__showExistLink_(soap, tag, NULL, "ns1:showExistLink");
	case SOAP_TYPE_ns1__showExistLink_Response:
		return soap_in_ns1__showExistLink_Response(soap, tag, NULL, "ns1:showExistLink-Response");
	case SOAP_TYPE_ns1__clearLink_:
		return soap_in_ns1__clearLink_(soap, tag, NULL, "ns1:clearLink");
	case SOAP_TYPE_ns1__clearLink_Response:
		return soap_in_ns1__clearLink_Response(soap, tag, NULL, "ns1:clearLink-Response");
	case SOAP_TYPE_ns1__AddNumbers_:
		return soap_in_ns1__AddNumbers_(soap, tag, NULL, "ns1:AddNumbers");
	case SOAP_TYPE_ns1__AddNumbers_Response:
		return soap_in_ns1__AddNumbers_Response(soap, tag, NULL, "ns1:AddNumbers-Response");
	case SOAP_TYPE_ns1__AddFileToSql:
		return soap_in_ns1__AddFileToSql(soap, tag, NULL, "ns1:AddFileToSql");
	case SOAP_TYPE_ns1__AddFileToSqlResponse:
		return soap_in_ns1__AddFileToSqlResponse(soap, tag, NULL, "ns1:AddFileToSqlResponse");
	case SOAP_TYPE_ns1__executeStorageProcess:
		return soap_in_ns1__executeStorageProcess(soap, tag, NULL, "ns1:executeStorageProcess");
	case SOAP_TYPE_ns1__executeStorageProcessResponse:
		return soap_in_ns1__executeStorageProcessResponse(soap, tag, NULL, "ns1:executeStorageProcessResponse");
	case SOAP_TYPE_ns1__insertXml:
		return soap_in_ns1__insertXml(soap, tag, NULL, "ns1:insertXml");
	case SOAP_TYPE_ns1__insertXmlResponse:
		return soap_in_ns1__insertXmlResponse(soap, tag, NULL, "ns1:insertXmlResponse");
	case SOAP_TYPE_ns1__executeSql_USCOREencode:
		return soap_in_ns1__executeSql_USCOREencode(soap, tag, NULL, "ns1:executeSql_encode");
	case SOAP_TYPE_ns1__executeSql_USCOREencodeResponse:
		return soap_in_ns1__executeSql_USCOREencodeResponse(soap, tag, NULL, "ns1:executeSql_encodeResponse");
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord:
		return soap_in_ns1__executeSql_USCOREbackEncord(soap, tag, NULL, "ns1:executeSql_backEncord");
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse:
		return soap_in_ns1__executeSql_USCOREbackEncordResponse(soap, tag, NULL, "ns1:executeSql_backEncordResponse");
	case SOAP_TYPE_ns1__executeSql:
		return soap_in_ns1__executeSql(soap, tag, NULL, "ns1:executeSql");
	case SOAP_TYPE_ns1__executeSqlResponse:
		return soap_in_ns1__executeSqlResponse(soap, tag, NULL, "ns1:executeSqlResponse");
	case SOAP_TYPE_ns1__TestLinkSqlserver:
		return soap_in_ns1__TestLinkSqlserver(soap, tag, NULL, "ns1:TestLinkSqlserver");
	case SOAP_TYPE_ns1__TestLinkSqlserverResponse:
		return soap_in_ns1__TestLinkSqlserverResponse(soap, tag, NULL, "ns1:TestLinkSqlserverResponse");
	case SOAP_TYPE_ns1__showExistLink:
		return soap_in_ns1__showExistLink(soap, tag, NULL, "ns1:showExistLink");
	case SOAP_TYPE_ns1__showExistLinkResponse:
		return soap_in_ns1__showExistLinkResponse(soap, tag, NULL, "ns1:showExistLinkResponse");
	case SOAP_TYPE_ns1__clearLink:
		return soap_in_ns1__clearLink(soap, tag, NULL, "ns1:clearLink");
	case SOAP_TYPE_ns1__clearLinkResponse:
		return soap_in_ns1__clearLinkResponse(soap, tag, NULL, "ns1:clearLinkResponse");
	case SOAP_TYPE_ns1__AddNumbers:
		return soap_in_ns1__AddNumbers(soap, tag, NULL, "ns1:AddNumbers");
	case SOAP_TYPE_ns1__AddNumbersResponse:
		return soap_in_ns1__AddNumbersResponse(soap, tag, NULL, "ns1:AddNumbersResponse");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__wstring;
			return soap_in_std__wstring(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddFileToSql"))
		{	*type = SOAP_TYPE_ns1__AddFileToSql_;
			return soap_in_ns1__AddFileToSql_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddFileToSql-Response"))
		{	*type = SOAP_TYPE_ns1__AddFileToSql_Response;
			return soap_in_ns1__AddFileToSql_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeStorageProcess"))
		{	*type = SOAP_TYPE_ns1__executeStorageProcess_;
			return soap_in_ns1__executeStorageProcess_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeStorageProcess-Response"))
		{	*type = SOAP_TYPE_ns1__executeStorageProcess_Response;
			return soap_in_ns1__executeStorageProcess_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:insertXml"))
		{	*type = SOAP_TYPE_ns1__insertXml_;
			return soap_in_ns1__insertXml_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:insertXml-Response"))
		{	*type = SOAP_TYPE_ns1__insertXml_Response;
			return soap_in_ns1__insertXml_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSql_encode"))
		{	*type = SOAP_TYPE_ns1__executeSql_USCOREencode_;
			return soap_in_ns1__executeSql_USCOREencode_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSql_encode-Response"))
		{	*type = SOAP_TYPE_ns1__executeSql_USCOREencode_Response;
			return soap_in_ns1__executeSql_USCOREencode_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSql_backEncord"))
		{	*type = SOAP_TYPE_ns1__executeSql_USCOREbackEncord_;
			return soap_in_ns1__executeSql_USCOREbackEncord_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSql_backEncord-Response"))
		{	*type = SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response;
			return soap_in_ns1__executeSql_USCOREbackEncord_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSql"))
		{	*type = SOAP_TYPE_ns1__executeSql_;
			return soap_in_ns1__executeSql_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSql-Response"))
		{	*type = SOAP_TYPE_ns1__executeSql_Response;
			return soap_in_ns1__executeSql_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:TestLinkSqlserver"))
		{	*type = SOAP_TYPE_ns1__TestLinkSqlserver_;
			return soap_in_ns1__TestLinkSqlserver_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:TestLinkSqlserver-Response"))
		{	*type = SOAP_TYPE_ns1__TestLinkSqlserver_Response;
			return soap_in_ns1__TestLinkSqlserver_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:showExistLink"))
		{	*type = SOAP_TYPE_ns1__showExistLink_;
			return soap_in_ns1__showExistLink_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:showExistLink-Response"))
		{	*type = SOAP_TYPE_ns1__showExistLink_Response;
			return soap_in_ns1__showExistLink_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:clearLink"))
		{	*type = SOAP_TYPE_ns1__clearLink_;
			return soap_in_ns1__clearLink_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:clearLink-Response"))
		{	*type = SOAP_TYPE_ns1__clearLink_Response;
			return soap_in_ns1__clearLink_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddNumbers"))
		{	*type = SOAP_TYPE_ns1__AddNumbers_;
			return soap_in_ns1__AddNumbers_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddNumbers-Response"))
		{	*type = SOAP_TYPE_ns1__AddNumbers_Response;
			return soap_in_ns1__AddNumbers_Response(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddFileToSql"))
		{	*type = SOAP_TYPE_ns1__AddFileToSql;
			return soap_in_ns1__AddFileToSql(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddFileToSqlResponse"))
		{	*type = SOAP_TYPE_ns1__AddFileToSqlResponse;
			return soap_in_ns1__AddFileToSqlResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeStorageProcess"))
		{	*type = SOAP_TYPE_ns1__executeStorageProcess;
			return soap_in_ns1__executeStorageProcess(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeStorageProcessResponse"))
		{	*type = SOAP_TYPE_ns1__executeStorageProcessResponse;
			return soap_in_ns1__executeStorageProcessResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:insertXml"))
		{	*type = SOAP_TYPE_ns1__insertXml;
			return soap_in_ns1__insertXml(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:insertXmlResponse"))
		{	*type = SOAP_TYPE_ns1__insertXmlResponse;
			return soap_in_ns1__insertXmlResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSql_encode"))
		{	*type = SOAP_TYPE_ns1__executeSql_USCOREencode;
			return soap_in_ns1__executeSql_USCOREencode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSql_encodeResponse"))
		{	*type = SOAP_TYPE_ns1__executeSql_USCOREencodeResponse;
			return soap_in_ns1__executeSql_USCOREencodeResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSql_backEncord"))
		{	*type = SOAP_TYPE_ns1__executeSql_USCOREbackEncord;
			return soap_in_ns1__executeSql_USCOREbackEncord(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSql_backEncordResponse"))
		{	*type = SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse;
			return soap_in_ns1__executeSql_USCOREbackEncordResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSql"))
		{	*type = SOAP_TYPE_ns1__executeSql;
			return soap_in_ns1__executeSql(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executeSqlResponse"))
		{	*type = SOAP_TYPE_ns1__executeSqlResponse;
			return soap_in_ns1__executeSqlResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:TestLinkSqlserver"))
		{	*type = SOAP_TYPE_ns1__TestLinkSqlserver;
			return soap_in_ns1__TestLinkSqlserver(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:TestLinkSqlserverResponse"))
		{	*type = SOAP_TYPE_ns1__TestLinkSqlserverResponse;
			return soap_in_ns1__TestLinkSqlserverResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:showExistLink"))
		{	*type = SOAP_TYPE_ns1__showExistLink;
			return soap_in_ns1__showExistLink(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:showExistLinkResponse"))
		{	*type = SOAP_TYPE_ns1__showExistLinkResponse;
			return soap_in_ns1__showExistLinkResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:clearLink"))
		{	*type = SOAP_TYPE_ns1__clearLink;
			return soap_in_ns1__clearLink(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:clearLinkResponse"))
		{	*type = SOAP_TYPE_ns1__clearLinkResponse;
			return soap_in_ns1__clearLinkResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddNumbers"))
		{	*type = SOAP_TYPE_ns1__AddNumbers;
			return soap_in_ns1__AddNumbers(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddNumbersResponse"))
		{	*type = SOAP_TYPE_ns1__AddNumbersResponse;
			return soap_in_ns1__AddNumbersResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__wstring:
		return soap_out_std__wstring(soap, tag, id, (const std::wstring *)ptr, "xsd:string");
	case SOAP_TYPE_ns1__AddFileToSql_:
		return soap_out_ns1__AddFileToSql_(soap, tag, id, (const struct ns1__AddFileToSql_ *)ptr, "ns1:AddFileToSql");
	case SOAP_TYPE_ns1__AddFileToSql_Response:
		return soap_out_ns1__AddFileToSql_Response(soap, tag, id, (const struct ns1__AddFileToSql_Response *)ptr, "ns1:AddFileToSql-Response");
	case SOAP_TYPE_ns1__executeStorageProcess_:
		return soap_out_ns1__executeStorageProcess_(soap, tag, id, (const struct ns1__executeStorageProcess_ *)ptr, "ns1:executeStorageProcess");
	case SOAP_TYPE_ns1__executeStorageProcess_Response:
		return soap_out_ns1__executeStorageProcess_Response(soap, tag, id, (const struct ns1__executeStorageProcess_Response *)ptr, "ns1:executeStorageProcess-Response");
	case SOAP_TYPE_ns1__insertXml_:
		return soap_out_ns1__insertXml_(soap, tag, id, (const struct ns1__insertXml_ *)ptr, "ns1:insertXml");
	case SOAP_TYPE_ns1__insertXml_Response:
		return soap_out_ns1__insertXml_Response(soap, tag, id, (const struct ns1__insertXml_Response *)ptr, "ns1:insertXml-Response");
	case SOAP_TYPE_ns1__executeSql_USCOREencode_:
		return soap_out_ns1__executeSql_USCOREencode_(soap, tag, id, (const struct ns1__executeSql_USCOREencode_ *)ptr, "ns1:executeSql_encode");
	case SOAP_TYPE_ns1__executeSql_USCOREencode_Response:
		return soap_out_ns1__executeSql_USCOREencode_Response(soap, tag, id, (const struct ns1__executeSql_USCOREencode_Response *)ptr, "ns1:executeSql_encode-Response");
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_:
		return soap_out_ns1__executeSql_USCOREbackEncord_(soap, tag, id, (const struct ns1__executeSql_USCOREbackEncord_ *)ptr, "ns1:executeSql_backEncord");
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response:
		return soap_out_ns1__executeSql_USCOREbackEncord_Response(soap, tag, id, (const struct ns1__executeSql_USCOREbackEncord_Response *)ptr, "ns1:executeSql_backEncord-Response");
	case SOAP_TYPE_ns1__executeSql_:
		return soap_out_ns1__executeSql_(soap, tag, id, (const struct ns1__executeSql_ *)ptr, "ns1:executeSql");
	case SOAP_TYPE_ns1__executeSql_Response:
		return soap_out_ns1__executeSql_Response(soap, tag, id, (const struct ns1__executeSql_Response *)ptr, "ns1:executeSql-Response");
	case SOAP_TYPE_ns1__TestLinkSqlserver_:
		return soap_out_ns1__TestLinkSqlserver_(soap, tag, id, (const struct ns1__TestLinkSqlserver_ *)ptr, "ns1:TestLinkSqlserver");
	case SOAP_TYPE_ns1__TestLinkSqlserver_Response:
		return soap_out_ns1__TestLinkSqlserver_Response(soap, tag, id, (const struct ns1__TestLinkSqlserver_Response *)ptr, "ns1:TestLinkSqlserver-Response");
	case SOAP_TYPE_ns1__showExistLink_:
		return soap_out_ns1__showExistLink_(soap, tag, id, (const struct ns1__showExistLink_ *)ptr, "ns1:showExistLink");
	case SOAP_TYPE_ns1__showExistLink_Response:
		return soap_out_ns1__showExistLink_Response(soap, tag, id, (const struct ns1__showExistLink_Response *)ptr, "ns1:showExistLink-Response");
	case SOAP_TYPE_ns1__clearLink_:
		return soap_out_ns1__clearLink_(soap, tag, id, (const struct ns1__clearLink_ *)ptr, "ns1:clearLink");
	case SOAP_TYPE_ns1__clearLink_Response:
		return soap_out_ns1__clearLink_Response(soap, tag, id, (const struct ns1__clearLink_Response *)ptr, "ns1:clearLink-Response");
	case SOAP_TYPE_ns1__AddNumbers_:
		return soap_out_ns1__AddNumbers_(soap, tag, id, (const struct ns1__AddNumbers_ *)ptr, "ns1:AddNumbers");
	case SOAP_TYPE_ns1__AddNumbers_Response:
		return soap_out_ns1__AddNumbers_Response(soap, tag, id, (const struct ns1__AddNumbers_Response *)ptr, "ns1:AddNumbers-Response");
	case SOAP_TYPE_ns1__AddFileToSql:
		return soap_out_ns1__AddFileToSql(soap, tag, id, (const struct ns1__AddFileToSql *)ptr, "ns1:AddFileToSql");
	case SOAP_TYPE_ns1__AddFileToSqlResponse:
		return soap_out_ns1__AddFileToSqlResponse(soap, tag, id, (const struct ns1__AddFileToSqlResponse *)ptr, "ns1:AddFileToSqlResponse");
	case SOAP_TYPE_ns1__executeStorageProcess:
		return soap_out_ns1__executeStorageProcess(soap, tag, id, (const struct ns1__executeStorageProcess *)ptr, "ns1:executeStorageProcess");
	case SOAP_TYPE_ns1__executeStorageProcessResponse:
		return soap_out_ns1__executeStorageProcessResponse(soap, tag, id, (const struct ns1__executeStorageProcessResponse *)ptr, "ns1:executeStorageProcessResponse");
	case SOAP_TYPE_ns1__insertXml:
		return soap_out_ns1__insertXml(soap, tag, id, (const struct ns1__insertXml *)ptr, "ns1:insertXml");
	case SOAP_TYPE_ns1__insertXmlResponse:
		return soap_out_ns1__insertXmlResponse(soap, tag, id, (const struct ns1__insertXmlResponse *)ptr, "ns1:insertXmlResponse");
	case SOAP_TYPE_ns1__executeSql_USCOREencode:
		return soap_out_ns1__executeSql_USCOREencode(soap, tag, id, (const struct ns1__executeSql_USCOREencode *)ptr, "ns1:executeSql_encode");
	case SOAP_TYPE_ns1__executeSql_USCOREencodeResponse:
		return soap_out_ns1__executeSql_USCOREencodeResponse(soap, tag, id, (const struct ns1__executeSql_USCOREencodeResponse *)ptr, "ns1:executeSql_encodeResponse");
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord:
		return soap_out_ns1__executeSql_USCOREbackEncord(soap, tag, id, (const struct ns1__executeSql_USCOREbackEncord *)ptr, "ns1:executeSql_backEncord");
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse:
		return soap_out_ns1__executeSql_USCOREbackEncordResponse(soap, tag, id, (const struct ns1__executeSql_USCOREbackEncordResponse *)ptr, "ns1:executeSql_backEncordResponse");
	case SOAP_TYPE_ns1__executeSql:
		return soap_out_ns1__executeSql(soap, tag, id, (const struct ns1__executeSql *)ptr, "ns1:executeSql");
	case SOAP_TYPE_ns1__executeSqlResponse:
		return soap_out_ns1__executeSqlResponse(soap, tag, id, (const struct ns1__executeSqlResponse *)ptr, "ns1:executeSqlResponse");
	case SOAP_TYPE_ns1__TestLinkSqlserver:
		return soap_out_ns1__TestLinkSqlserver(soap, tag, id, (const struct ns1__TestLinkSqlserver *)ptr, "ns1:TestLinkSqlserver");
	case SOAP_TYPE_ns1__TestLinkSqlserverResponse:
		return soap_out_ns1__TestLinkSqlserverResponse(soap, tag, id, (const struct ns1__TestLinkSqlserverResponse *)ptr, "ns1:TestLinkSqlserverResponse");
	case SOAP_TYPE_ns1__showExistLink:
		return soap_out_ns1__showExistLink(soap, tag, id, (const struct ns1__showExistLink *)ptr, "ns1:showExistLink");
	case SOAP_TYPE_ns1__showExistLinkResponse:
		return soap_out_ns1__showExistLinkResponse(soap, tag, id, (const struct ns1__showExistLinkResponse *)ptr, "ns1:showExistLinkResponse");
	case SOAP_TYPE_ns1__clearLink:
		return soap_out_ns1__clearLink(soap, tag, id, (const struct ns1__clearLink *)ptr, "ns1:clearLink");
	case SOAP_TYPE_ns1__clearLinkResponse:
		return soap_out_ns1__clearLinkResponse(soap, tag, id, (const struct ns1__clearLinkResponse *)ptr, "ns1:clearLinkResponse");
	case SOAP_TYPE_ns1__AddNumbers:
		return soap_out_ns1__AddNumbers(soap, tag, id, (const struct ns1__AddNumbers *)ptr, "ns1:AddNumbers");
	case SOAP_TYPE_ns1__AddNumbersResponse:
		return soap_out_ns1__AddNumbersResponse(soap, tag, id, (const struct ns1__AddNumbersResponse *)ptr, "ns1:AddNumbersResponse");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag, 0, NULL); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__wstring:
		soap_serialize_std__wstring(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_ns1__AddFileToSql_:
		soap_serialize_ns1__AddFileToSql_(soap, (const struct ns1__AddFileToSql_ *)ptr);
		break;
	case SOAP_TYPE_ns1__AddFileToSql_Response:
		soap_serialize_ns1__AddFileToSql_Response(soap, (const struct ns1__AddFileToSql_Response *)ptr);
		break;
	case SOAP_TYPE_ns1__executeStorageProcess_:
		soap_serialize_ns1__executeStorageProcess_(soap, (const struct ns1__executeStorageProcess_ *)ptr);
		break;
	case SOAP_TYPE_ns1__executeStorageProcess_Response:
		soap_serialize_ns1__executeStorageProcess_Response(soap, (const struct ns1__executeStorageProcess_Response *)ptr);
		break;
	case SOAP_TYPE_ns1__insertXml_:
		soap_serialize_ns1__insertXml_(soap, (const struct ns1__insertXml_ *)ptr);
		break;
	case SOAP_TYPE_ns1__insertXml_Response:
		soap_serialize_ns1__insertXml_Response(soap, (const struct ns1__insertXml_Response *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencode_:
		soap_serialize_ns1__executeSql_USCOREencode_(soap, (const struct ns1__executeSql_USCOREencode_ *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencode_Response:
		soap_serialize_ns1__executeSql_USCOREencode_Response(soap, (const struct ns1__executeSql_USCOREencode_Response *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_:
		soap_serialize_ns1__executeSql_USCOREbackEncord_(soap, (const struct ns1__executeSql_USCOREbackEncord_ *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response:
		soap_serialize_ns1__executeSql_USCOREbackEncord_Response(soap, (const struct ns1__executeSql_USCOREbackEncord_Response *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSql_:
		soap_serialize_ns1__executeSql_(soap, (const struct ns1__executeSql_ *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSql_Response:
		soap_serialize_ns1__executeSql_Response(soap, (const struct ns1__executeSql_Response *)ptr);
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserver_:
		soap_serialize_ns1__TestLinkSqlserver_(soap, (const struct ns1__TestLinkSqlserver_ *)ptr);
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserver_Response:
		soap_serialize_ns1__TestLinkSqlserver_Response(soap, (const struct ns1__TestLinkSqlserver_Response *)ptr);
		break;
	case SOAP_TYPE_ns1__showExistLink_:
		soap_serialize_ns1__showExistLink_(soap, (const struct ns1__showExistLink_ *)ptr);
		break;
	case SOAP_TYPE_ns1__showExistLink_Response:
		soap_serialize_ns1__showExistLink_Response(soap, (const struct ns1__showExistLink_Response *)ptr);
		break;
	case SOAP_TYPE_ns1__clearLink_:
		soap_serialize_ns1__clearLink_(soap, (const struct ns1__clearLink_ *)ptr);
		break;
	case SOAP_TYPE_ns1__clearLink_Response:
		soap_serialize_ns1__clearLink_Response(soap, (const struct ns1__clearLink_Response *)ptr);
		break;
	case SOAP_TYPE_ns1__AddNumbers_:
		soap_serialize_ns1__AddNumbers_(soap, (const struct ns1__AddNumbers_ *)ptr);
		break;
	case SOAP_TYPE_ns1__AddNumbers_Response:
		soap_serialize_ns1__AddNumbers_Response(soap, (const struct ns1__AddNumbers_Response *)ptr);
		break;
	case SOAP_TYPE_ns1__AddFileToSql:
		soap_serialize_ns1__AddFileToSql(soap, (const struct ns1__AddFileToSql *)ptr);
		break;
	case SOAP_TYPE_ns1__AddFileToSqlResponse:
		soap_serialize_ns1__AddFileToSqlResponse(soap, (const struct ns1__AddFileToSqlResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__executeStorageProcess:
		soap_serialize_ns1__executeStorageProcess(soap, (const struct ns1__executeStorageProcess *)ptr);
		break;
	case SOAP_TYPE_ns1__executeStorageProcessResponse:
		soap_serialize_ns1__executeStorageProcessResponse(soap, (const struct ns1__executeStorageProcessResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__insertXml:
		soap_serialize_ns1__insertXml(soap, (const struct ns1__insertXml *)ptr);
		break;
	case SOAP_TYPE_ns1__insertXmlResponse:
		soap_serialize_ns1__insertXmlResponse(soap, (const struct ns1__insertXmlResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencode:
		soap_serialize_ns1__executeSql_USCOREencode(soap, (const struct ns1__executeSql_USCOREencode *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencodeResponse:
		soap_serialize_ns1__executeSql_USCOREencodeResponse(soap, (const struct ns1__executeSql_USCOREencodeResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord:
		soap_serialize_ns1__executeSql_USCOREbackEncord(soap, (const struct ns1__executeSql_USCOREbackEncord *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse:
		soap_serialize_ns1__executeSql_USCOREbackEncordResponse(soap, (const struct ns1__executeSql_USCOREbackEncordResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSql:
		soap_serialize_ns1__executeSql(soap, (const struct ns1__executeSql *)ptr);
		break;
	case SOAP_TYPE_ns1__executeSqlResponse:
		soap_serialize_ns1__executeSqlResponse(soap, (const struct ns1__executeSqlResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserver:
		soap_serialize_ns1__TestLinkSqlserver(soap, (const struct ns1__TestLinkSqlserver *)ptr);
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserverResponse:
		soap_serialize_ns1__TestLinkSqlserverResponse(soap, (const struct ns1__TestLinkSqlserverResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__showExistLink:
		soap_serialize_ns1__showExistLink(soap, (const struct ns1__showExistLink *)ptr);
		break;
	case SOAP_TYPE_ns1__showExistLinkResponse:
		soap_serialize_ns1__showExistLinkResponse(soap, (const struct ns1__showExistLinkResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__clearLink:
		soap_serialize_ns1__clearLink(soap, (const struct ns1__clearLink *)ptr);
		break;
	case SOAP_TYPE_ns1__clearLinkResponse:
		soap_serialize_ns1__clearLinkResponse(soap, (const struct ns1__clearLinkResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__AddNumbers:
		soap_serialize_ns1__AddNumbers(soap, (const struct ns1__AddNumbers *)ptr);
		break;
	case SOAP_TYPE_ns1__AddNumbersResponse:
		soap_serialize_ns1__AddNumbersResponse(soap, (const struct ns1__AddNumbersResponse *)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns1__AddNumbersResponse:
		return (void*)soap_instantiate_ns1__AddNumbersResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AddNumbers:
		return (void*)soap_instantiate_ns1__AddNumbers(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__wstring:
		return (void*)soap_instantiate_std__wstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__clearLinkResponse:
		return (void*)soap_instantiate_ns1__clearLinkResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__clearLink:
		return (void*)soap_instantiate_ns1__clearLink(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__showExistLinkResponse:
		return (void*)soap_instantiate_ns1__showExistLinkResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__showExistLink:
		return (void*)soap_instantiate_ns1__showExistLink(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__TestLinkSqlserverResponse:
		return (void*)soap_instantiate_ns1__TestLinkSqlserverResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__TestLinkSqlserver:
		return (void*)soap_instantiate_ns1__TestLinkSqlserver(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSqlResponse:
		return (void*)soap_instantiate_ns1__executeSqlResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSql:
		return (void*)soap_instantiate_ns1__executeSql(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse:
		return (void*)soap_instantiate_ns1__executeSql_USCOREbackEncordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord:
		return (void*)soap_instantiate_ns1__executeSql_USCOREbackEncord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSql_USCOREencodeResponse:
		return (void*)soap_instantiate_ns1__executeSql_USCOREencodeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSql_USCOREencode:
		return (void*)soap_instantiate_ns1__executeSql_USCOREencode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__insertXmlResponse:
		return (void*)soap_instantiate_ns1__insertXmlResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__insertXml:
		return (void*)soap_instantiate_ns1__insertXml(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeStorageProcessResponse:
		return (void*)soap_instantiate_ns1__executeStorageProcessResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeStorageProcess:
		return (void*)soap_instantiate_ns1__executeStorageProcess(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AddFileToSqlResponse:
		return (void*)soap_instantiate_ns1__AddFileToSqlResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AddFileToSql:
		return (void*)soap_instantiate_ns1__AddFileToSql(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AddNumbers_Response:
		return (void*)soap_instantiate_ns1__AddNumbers_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AddNumbers_:
		return (void*)soap_instantiate_ns1__AddNumbers_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__clearLink_Response:
		return (void*)soap_instantiate_ns1__clearLink_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__clearLink_:
		return (void*)soap_instantiate_ns1__clearLink_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__showExistLink_Response:
		return (void*)soap_instantiate_ns1__showExistLink_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__showExistLink_:
		return (void*)soap_instantiate_ns1__showExistLink_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__TestLinkSqlserver_Response:
		return (void*)soap_instantiate_ns1__TestLinkSqlserver_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__TestLinkSqlserver_:
		return (void*)soap_instantiate_ns1__TestLinkSqlserver_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSql_Response:
		return (void*)soap_instantiate_ns1__executeSql_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSql_:
		return (void*)soap_instantiate_ns1__executeSql_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response:
		return (void*)soap_instantiate_ns1__executeSql_USCOREbackEncord_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_:
		return (void*)soap_instantiate_ns1__executeSql_USCOREbackEncord_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSql_USCOREencode_Response:
		return (void*)soap_instantiate_ns1__executeSql_USCOREencode_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeSql_USCOREencode_:
		return (void*)soap_instantiate_ns1__executeSql_USCOREencode_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__insertXml_Response:
		return (void*)soap_instantiate_ns1__insertXml_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__insertXml_:
		return (void*)soap_instantiate_ns1__insertXml_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeStorageProcess_Response:
		return (void*)soap_instantiate_ns1__executeStorageProcess_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executeStorageProcess_:
		return (void*)soap_instantiate_ns1__executeStorageProcess_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AddFileToSql_Response:
		return (void*)soap_instantiate_ns1__AddFileToSql_Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AddFileToSql_:
		return (void*)soap_instantiate_ns1__AddFileToSql_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_ns1__AddNumbersResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__AddNumbersResponse*>(p->ptr), struct ns1__AddNumbersResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__AddNumbersResponse*>(p->ptr), struct ns1__AddNumbersResponse);
		break;
	case SOAP_TYPE_ns1__AddNumbers:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__AddNumbers*>(p->ptr), struct ns1__AddNumbers);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__AddNumbers*>(p->ptr), struct ns1__AddNumbers);
		break;
	case SOAP_TYPE_std__wstring:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::wstring*>(p->ptr), std::wstring);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::wstring*>(p->ptr), std::wstring);
		break;
	case SOAP_TYPE_ns1__clearLinkResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__clearLinkResponse*>(p->ptr), struct ns1__clearLinkResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__clearLinkResponse*>(p->ptr), struct ns1__clearLinkResponse);
		break;
	case SOAP_TYPE_ns1__clearLink:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__clearLink*>(p->ptr), struct ns1__clearLink);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__clearLink*>(p->ptr), struct ns1__clearLink);
		break;
	case SOAP_TYPE_ns1__showExistLinkResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__showExistLinkResponse*>(p->ptr), struct ns1__showExistLinkResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__showExistLinkResponse*>(p->ptr), struct ns1__showExistLinkResponse);
		break;
	case SOAP_TYPE_ns1__showExistLink:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__showExistLink*>(p->ptr), struct ns1__showExistLink);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__showExistLink*>(p->ptr), struct ns1__showExistLink);
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserverResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__TestLinkSqlserverResponse*>(p->ptr), struct ns1__TestLinkSqlserverResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__TestLinkSqlserverResponse*>(p->ptr), struct ns1__TestLinkSqlserverResponse);
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserver:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__TestLinkSqlserver*>(p->ptr), struct ns1__TestLinkSqlserver);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__TestLinkSqlserver*>(p->ptr), struct ns1__TestLinkSqlserver);
		break;
	case SOAP_TYPE_ns1__executeSqlResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSqlResponse*>(p->ptr), struct ns1__executeSqlResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSqlResponse*>(p->ptr), struct ns1__executeSqlResponse);
		break;
	case SOAP_TYPE_ns1__executeSql:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSql*>(p->ptr), struct ns1__executeSql);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSql*>(p->ptr), struct ns1__executeSql);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSql_USCOREbackEncordResponse*>(p->ptr), struct ns1__executeSql_USCOREbackEncordResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSql_USCOREbackEncordResponse*>(p->ptr), struct ns1__executeSql_USCOREbackEncordResponse);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSql_USCOREbackEncord*>(p->ptr), struct ns1__executeSql_USCOREbackEncord);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSql_USCOREbackEncord*>(p->ptr), struct ns1__executeSql_USCOREbackEncord);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencodeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSql_USCOREencodeResponse*>(p->ptr), struct ns1__executeSql_USCOREencodeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSql_USCOREencodeResponse*>(p->ptr), struct ns1__executeSql_USCOREencodeResponse);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSql_USCOREencode*>(p->ptr), struct ns1__executeSql_USCOREencode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSql_USCOREencode*>(p->ptr), struct ns1__executeSql_USCOREencode);
		break;
	case SOAP_TYPE_ns1__insertXmlResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__insertXmlResponse*>(p->ptr), struct ns1__insertXmlResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__insertXmlResponse*>(p->ptr), struct ns1__insertXmlResponse);
		break;
	case SOAP_TYPE_ns1__insertXml:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__insertXml*>(p->ptr), struct ns1__insertXml);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__insertXml*>(p->ptr), struct ns1__insertXml);
		break;
	case SOAP_TYPE_ns1__executeStorageProcessResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeStorageProcessResponse*>(p->ptr), struct ns1__executeStorageProcessResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeStorageProcessResponse*>(p->ptr), struct ns1__executeStorageProcessResponse);
		break;
	case SOAP_TYPE_ns1__executeStorageProcess:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeStorageProcess*>(p->ptr), struct ns1__executeStorageProcess);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeStorageProcess*>(p->ptr), struct ns1__executeStorageProcess);
		break;
	case SOAP_TYPE_ns1__AddFileToSqlResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__AddFileToSqlResponse*>(p->ptr), struct ns1__AddFileToSqlResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__AddFileToSqlResponse*>(p->ptr), struct ns1__AddFileToSqlResponse);
		break;
	case SOAP_TYPE_ns1__AddFileToSql:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__AddFileToSql*>(p->ptr), struct ns1__AddFileToSql);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__AddFileToSql*>(p->ptr), struct ns1__AddFileToSql);
		break;
	case SOAP_TYPE_ns1__AddNumbers_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__AddNumbers_Response*>(p->ptr), struct ns1__AddNumbers_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__AddNumbers_Response*>(p->ptr), struct ns1__AddNumbers_Response);
		break;
	case SOAP_TYPE_ns1__AddNumbers_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__AddNumbers_*>(p->ptr), struct ns1__AddNumbers_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__AddNumbers_*>(p->ptr), struct ns1__AddNumbers_);
		break;
	case SOAP_TYPE_ns1__clearLink_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__clearLink_Response*>(p->ptr), struct ns1__clearLink_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__clearLink_Response*>(p->ptr), struct ns1__clearLink_Response);
		break;
	case SOAP_TYPE_ns1__clearLink_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__clearLink_*>(p->ptr), struct ns1__clearLink_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__clearLink_*>(p->ptr), struct ns1__clearLink_);
		break;
	case SOAP_TYPE_ns1__showExistLink_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__showExistLink_Response*>(p->ptr), struct ns1__showExistLink_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__showExistLink_Response*>(p->ptr), struct ns1__showExistLink_Response);
		break;
	case SOAP_TYPE_ns1__showExistLink_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__showExistLink_*>(p->ptr), struct ns1__showExistLink_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__showExistLink_*>(p->ptr), struct ns1__showExistLink_);
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserver_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__TestLinkSqlserver_Response*>(p->ptr), struct ns1__TestLinkSqlserver_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__TestLinkSqlserver_Response*>(p->ptr), struct ns1__TestLinkSqlserver_Response);
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserver_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__TestLinkSqlserver_*>(p->ptr), struct ns1__TestLinkSqlserver_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__TestLinkSqlserver_*>(p->ptr), struct ns1__TestLinkSqlserver_);
		break;
	case SOAP_TYPE_ns1__executeSql_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSql_Response*>(p->ptr), struct ns1__executeSql_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSql_Response*>(p->ptr), struct ns1__executeSql_Response);
		break;
	case SOAP_TYPE_ns1__executeSql_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSql_*>(p->ptr), struct ns1__executeSql_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSql_*>(p->ptr), struct ns1__executeSql_);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSql_USCOREbackEncord_Response*>(p->ptr), struct ns1__executeSql_USCOREbackEncord_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSql_USCOREbackEncord_Response*>(p->ptr), struct ns1__executeSql_USCOREbackEncord_Response);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSql_USCOREbackEncord_*>(p->ptr), struct ns1__executeSql_USCOREbackEncord_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSql_USCOREbackEncord_*>(p->ptr), struct ns1__executeSql_USCOREbackEncord_);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencode_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSql_USCOREencode_Response*>(p->ptr), struct ns1__executeSql_USCOREencode_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSql_USCOREencode_Response*>(p->ptr), struct ns1__executeSql_USCOREencode_Response);
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencode_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeSql_USCOREencode_*>(p->ptr), struct ns1__executeSql_USCOREencode_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeSql_USCOREencode_*>(p->ptr), struct ns1__executeSql_USCOREencode_);
		break;
	case SOAP_TYPE_ns1__insertXml_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__insertXml_Response*>(p->ptr), struct ns1__insertXml_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__insertXml_Response*>(p->ptr), struct ns1__insertXml_Response);
		break;
	case SOAP_TYPE_ns1__insertXml_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__insertXml_*>(p->ptr), struct ns1__insertXml_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__insertXml_*>(p->ptr), struct ns1__insertXml_);
		break;
	case SOAP_TYPE_ns1__executeStorageProcess_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeStorageProcess_Response*>(p->ptr), struct ns1__executeStorageProcess_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeStorageProcess_Response*>(p->ptr), struct ns1__executeStorageProcess_Response);
		break;
	case SOAP_TYPE_ns1__executeStorageProcess_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__executeStorageProcess_*>(p->ptr), struct ns1__executeStorageProcess_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__executeStorageProcess_*>(p->ptr), struct ns1__executeStorageProcess_);
		break;
	case SOAP_TYPE_ns1__AddFileToSql_Response:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__AddFileToSql_Response*>(p->ptr), struct ns1__AddFileToSql_Response);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__AddFileToSql_Response*>(p->ptr), struct ns1__AddFileToSql_Response);
		break;
	case SOAP_TYPE_ns1__AddFileToSql_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns1__AddFileToSql_*>(p->ptr), struct ns1__AddFileToSql_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns1__AddFileToSql_*>(p->ptr), struct ns1__AddFileToSql_);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_ns1__AddNumbersResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__AddNumbersResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__AddNumbersResponse*)p = *(struct ns1__AddNumbersResponse*)q;
		break;
	case SOAP_TYPE_ns1__AddNumbers:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__AddNumbers type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__AddNumbers*)p = *(struct ns1__AddNumbers*)q;
		break;
	case SOAP_TYPE_std__wstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::wstring type=%d location=%p object=%p\n", t, p, q));
		*(std::wstring*)p = *(std::wstring*)q;
		break;
	case SOAP_TYPE_ns1__clearLinkResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__clearLinkResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__clearLinkResponse*)p = *(struct ns1__clearLinkResponse*)q;
		break;
	case SOAP_TYPE_ns1__clearLink:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__clearLink type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__clearLink*)p = *(struct ns1__clearLink*)q;
		break;
	case SOAP_TYPE_ns1__showExistLinkResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__showExistLinkResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__showExistLinkResponse*)p = *(struct ns1__showExistLinkResponse*)q;
		break;
	case SOAP_TYPE_ns1__showExistLink:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__showExistLink type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__showExistLink*)p = *(struct ns1__showExistLink*)q;
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserverResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__TestLinkSqlserverResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__TestLinkSqlserverResponse*)p = *(struct ns1__TestLinkSqlserverResponse*)q;
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserver:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__TestLinkSqlserver type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__TestLinkSqlserver*)p = *(struct ns1__TestLinkSqlserver*)q;
		break;
	case SOAP_TYPE_ns1__executeSqlResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSqlResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSqlResponse*)p = *(struct ns1__executeSqlResponse*)q;
		break;
	case SOAP_TYPE_ns1__executeSql:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSql type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSql*)p = *(struct ns1__executeSql*)q;
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSql_USCOREbackEncordResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSql_USCOREbackEncordResponse*)p = *(struct ns1__executeSql_USCOREbackEncordResponse*)q;
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSql_USCOREbackEncord type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSql_USCOREbackEncord*)p = *(struct ns1__executeSql_USCOREbackEncord*)q;
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencodeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSql_USCOREencodeResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSql_USCOREencodeResponse*)p = *(struct ns1__executeSql_USCOREencodeResponse*)q;
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSql_USCOREencode type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSql_USCOREencode*)p = *(struct ns1__executeSql_USCOREencode*)q;
		break;
	case SOAP_TYPE_ns1__insertXmlResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__insertXmlResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__insertXmlResponse*)p = *(struct ns1__insertXmlResponse*)q;
		break;
	case SOAP_TYPE_ns1__insertXml:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__insertXml type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__insertXml*)p = *(struct ns1__insertXml*)q;
		break;
	case SOAP_TYPE_ns1__executeStorageProcessResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeStorageProcessResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeStorageProcessResponse*)p = *(struct ns1__executeStorageProcessResponse*)q;
		break;
	case SOAP_TYPE_ns1__executeStorageProcess:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeStorageProcess type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeStorageProcess*)p = *(struct ns1__executeStorageProcess*)q;
		break;
	case SOAP_TYPE_ns1__AddFileToSqlResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__AddFileToSqlResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__AddFileToSqlResponse*)p = *(struct ns1__AddFileToSqlResponse*)q;
		break;
	case SOAP_TYPE_ns1__AddFileToSql:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__AddFileToSql type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__AddFileToSql*)p = *(struct ns1__AddFileToSql*)q;
		break;
	case SOAP_TYPE_ns1__AddNumbers_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__AddNumbers_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__AddNumbers_Response*)p = *(struct ns1__AddNumbers_Response*)q;
		break;
	case SOAP_TYPE_ns1__AddNumbers_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__AddNumbers_ type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__AddNumbers_*)p = *(struct ns1__AddNumbers_*)q;
		break;
	case SOAP_TYPE_ns1__clearLink_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__clearLink_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__clearLink_Response*)p = *(struct ns1__clearLink_Response*)q;
		break;
	case SOAP_TYPE_ns1__clearLink_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__clearLink_ type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__clearLink_*)p = *(struct ns1__clearLink_*)q;
		break;
	case SOAP_TYPE_ns1__showExistLink_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__showExistLink_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__showExistLink_Response*)p = *(struct ns1__showExistLink_Response*)q;
		break;
	case SOAP_TYPE_ns1__showExistLink_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__showExistLink_ type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__showExistLink_*)p = *(struct ns1__showExistLink_*)q;
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserver_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__TestLinkSqlserver_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__TestLinkSqlserver_Response*)p = *(struct ns1__TestLinkSqlserver_Response*)q;
		break;
	case SOAP_TYPE_ns1__TestLinkSqlserver_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__TestLinkSqlserver_ type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__TestLinkSqlserver_*)p = *(struct ns1__TestLinkSqlserver_*)q;
		break;
	case SOAP_TYPE_ns1__executeSql_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSql_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSql_Response*)p = *(struct ns1__executeSql_Response*)q;
		break;
	case SOAP_TYPE_ns1__executeSql_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSql_ type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSql_*)p = *(struct ns1__executeSql_*)q;
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSql_USCOREbackEncord_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSql_USCOREbackEncord_Response*)p = *(struct ns1__executeSql_USCOREbackEncord_Response*)q;
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREbackEncord_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSql_USCOREbackEncord_ type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSql_USCOREbackEncord_*)p = *(struct ns1__executeSql_USCOREbackEncord_*)q;
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencode_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSql_USCOREencode_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSql_USCOREencode_Response*)p = *(struct ns1__executeSql_USCOREencode_Response*)q;
		break;
	case SOAP_TYPE_ns1__executeSql_USCOREencode_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeSql_USCOREencode_ type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeSql_USCOREencode_*)p = *(struct ns1__executeSql_USCOREencode_*)q;
		break;
	case SOAP_TYPE_ns1__insertXml_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__insertXml_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__insertXml_Response*)p = *(struct ns1__insertXml_Response*)q;
		break;
	case SOAP_TYPE_ns1__insertXml_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__insertXml_ type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__insertXml_*)p = *(struct ns1__insertXml_*)q;
		break;
	case SOAP_TYPE_ns1__executeStorageProcess_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeStorageProcess_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeStorageProcess_Response*)p = *(struct ns1__executeStorageProcess_Response*)q;
		break;
	case SOAP_TYPE_ns1__executeStorageProcess_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__executeStorageProcess_ type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__executeStorageProcess_*)p = *(struct ns1__executeStorageProcess_*)q;
		break;
	case SOAP_TYPE_ns1__AddFileToSql_Response:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__AddFileToSql_Response type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__AddFileToSql_Response*)p = *(struct ns1__AddFileToSql_Response*)q;
		break;
	case SOAP_TYPE_ns1__AddFileToSql_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__AddFileToSql_ type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__AddFileToSql_*)p = *(struct ns1__AddFileToSql_*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap *soap, const std::wstring *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__wstring), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	wchar_t *t;
		s = (std::wstring*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_wstring_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__wstring, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__wstring(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::wstring *p;
	size_t k = sizeof(std::wstring);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__wstring, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::wstring);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::wstring, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::wstring location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	if (soap_out_std__wstring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddFileToSql_(struct soap *soap, struct ns1__AddFileToSql_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->strFileName);
	soap_default_std__wstring(soap, &a->sPointer);
	soap_default_std__wstring(soap, &a->tablenamefieldname);
	soap_default_std__wstring(soap, &a->fileIP);
	soap_default_std__wstring(soap, &a->fileUse);
	soap_default_std__wstring(soap, &a->filePassword);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddFileToSql_(struct soap *soap, const struct ns1__AddFileToSql_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->strFileName);
	soap_serialize_std__wstring(soap, &a->sPointer);
	soap_serialize_std__wstring(soap, &a->tablenamefieldname);
	soap_serialize_std__wstring(soap, &a->fileIP);
	soap_serialize_std__wstring(soap, &a->fileUse);
	soap_serialize_std__wstring(soap, &a->filePassword);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddFileToSql_(struct soap *soap, const char *tag, int id, const struct ns1__AddFileToSql_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AddFileToSql_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "strFileName", -1, &a->strFileName, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sPointer", -1, &a->sPointer, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "tablenamefieldname", -1, &a->tablenamefieldname, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "fileIP", -1, &a->fileIP, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "fileUse", -1, &a->fileUse, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "filePassword", -1, &a->filePassword, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__AddFileToSql_ * SOAP_FMAC4 soap_in_ns1__AddFileToSql_(struct soap *soap, const char *tag, struct ns1__AddFileToSql_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_strFileName = 1;
	size_t soap_flag_sPointer = 1;
	size_t soap_flag_tablenamefieldname = 1;
	size_t soap_flag_fileIP = 1;
	size_t soap_flag_fileUse = 1;
	size_t soap_flag_filePassword = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__AddFileToSql_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AddFileToSql_, sizeof(struct ns1__AddFileToSql_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__AddFileToSql_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_strFileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "strFileName", &a->strFileName, "xsd:string"))
				{	soap_flag_strFileName--;
					continue;
				}
			}
			if (soap_flag_sPointer && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sPointer", &a->sPointer, "xsd:string"))
				{	soap_flag_sPointer--;
					continue;
				}
			}
			if (soap_flag_tablenamefieldname && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "tablenamefieldname", &a->tablenamefieldname, "xsd:string"))
				{	soap_flag_tablenamefieldname--;
					continue;
				}
			}
			if (soap_flag_fileIP && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "fileIP", &a->fileIP, "xsd:string"))
				{	soap_flag_fileIP--;
					continue;
				}
			}
			if (soap_flag_fileUse && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "fileUse", &a->fileUse, "xsd:string"))
				{	soap_flag_fileUse--;
					continue;
				}
			}
			if (soap_flag_filePassword && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "filePassword", &a->filePassword, "xsd:string"))
				{	soap_flag_filePassword--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_strFileName > 0 || soap_flag_sPointer > 0 || soap_flag_tablenamefieldname > 0 || soap_flag_fileIP > 0 || soap_flag_fileUse > 0 || soap_flag_filePassword > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__AddFileToSql_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AddFileToSql_, SOAP_TYPE_ns1__AddFileToSql_, sizeof(struct ns1__AddFileToSql_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__AddFileToSql_ * SOAP_FMAC2 soap_instantiate_ns1__AddFileToSql_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AddFileToSql_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__AddFileToSql_ *p;
	size_t k = sizeof(struct ns1__AddFileToSql_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__AddFileToSql_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__AddFileToSql_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__AddFileToSql_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__AddFileToSql_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddFileToSql_(struct soap *soap, const struct ns1__AddFileToSql_ *a, const char *tag, const char *type)
{
	if (soap_out_ns1__AddFileToSql_(soap, tag ? tag : "ns1:AddFileToSql", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__AddFileToSql_ * SOAP_FMAC4 soap_get_ns1__AddFileToSql_(struct soap *soap, struct ns1__AddFileToSql_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AddFileToSql_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddFileToSql_Response(struct soap *soap, struct ns1__AddFileToSql_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->AddFileToSqlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddFileToSql_Response(struct soap *soap, const struct ns1__AddFileToSql_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->AddFileToSqlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddFileToSql_Response(struct soap *soap, const char *tag, int id, const struct ns1__AddFileToSql_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AddFileToSql_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "AddFileToSqlResult", -1, &a->AddFileToSqlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__AddFileToSql_Response * SOAP_FMAC4 soap_in_ns1__AddFileToSql_Response(struct soap *soap, const char *tag, struct ns1__AddFileToSql_Response *a, const char *type)
{
	size_t soap_flag_AddFileToSqlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__AddFileToSql_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AddFileToSql_Response, sizeof(struct ns1__AddFileToSql_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__AddFileToSql_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddFileToSqlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "AddFileToSqlResult", &a->AddFileToSqlResult, "xsd:string"))
				{	soap_flag_AddFileToSqlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AddFileToSqlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__AddFileToSql_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AddFileToSql_Response, SOAP_TYPE_ns1__AddFileToSql_Response, sizeof(struct ns1__AddFileToSql_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__AddFileToSql_Response * SOAP_FMAC2 soap_instantiate_ns1__AddFileToSql_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AddFileToSql_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__AddFileToSql_Response *p;
	size_t k = sizeof(struct ns1__AddFileToSql_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__AddFileToSql_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__AddFileToSql_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__AddFileToSql_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__AddFileToSql_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddFileToSql_Response(struct soap *soap, const struct ns1__AddFileToSql_Response *a, const char *tag, const char *type)
{
	if (soap_out_ns1__AddFileToSql_Response(soap, tag ? tag : "ns1:AddFileToSql-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__AddFileToSql_Response * SOAP_FMAC4 soap_get_ns1__AddFileToSql_Response(struct soap *soap, struct ns1__AddFileToSql_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AddFileToSql_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeStorageProcess_(struct soap *soap, struct ns1__executeStorageProcess_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->StorageProcessName);
	soap_default_std__wstring(soap, &a->Parameters);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeStorageProcess_(struct soap *soap, const struct ns1__executeStorageProcess_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->StorageProcessName);
	soap_serialize_std__wstring(soap, &a->Parameters);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeStorageProcess_(struct soap *soap, const char *tag, int id, const struct ns1__executeStorageProcess_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeStorageProcess_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "StorageProcessName", -1, &a->StorageProcessName, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "Parameters", -1, &a->Parameters, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeStorageProcess_ * SOAP_FMAC4 soap_in_ns1__executeStorageProcess_(struct soap *soap, const char *tag, struct ns1__executeStorageProcess_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_StorageProcessName = 1;
	size_t soap_flag_Parameters = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeStorageProcess_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeStorageProcess_, sizeof(struct ns1__executeStorageProcess_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeStorageProcess_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_StorageProcessName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "StorageProcessName", &a->StorageProcessName, "xsd:string"))
				{	soap_flag_StorageProcessName--;
					continue;
				}
			}
			if (soap_flag_Parameters && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "Parameters", &a->Parameters, "xsd:string"))
				{	soap_flag_Parameters--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_StorageProcessName > 0 || soap_flag_Parameters > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeStorageProcess_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeStorageProcess_, SOAP_TYPE_ns1__executeStorageProcess_, sizeof(struct ns1__executeStorageProcess_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeStorageProcess_ * SOAP_FMAC2 soap_instantiate_ns1__executeStorageProcess_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeStorageProcess_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeStorageProcess_ *p;
	size_t k = sizeof(struct ns1__executeStorageProcess_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeStorageProcess_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeStorageProcess_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeStorageProcess_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeStorageProcess_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeStorageProcess_(struct soap *soap, const struct ns1__executeStorageProcess_ *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeStorageProcess_(soap, tag ? tag : "ns1:executeStorageProcess", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeStorageProcess_ * SOAP_FMAC4 soap_get_ns1__executeStorageProcess_(struct soap *soap, struct ns1__executeStorageProcess_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeStorageProcess_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeStorageProcess_Response(struct soap *soap, struct ns1__executeStorageProcess_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeStorageProcessResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeStorageProcess_Response(struct soap *soap, const struct ns1__executeStorageProcess_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeStorageProcessResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeStorageProcess_Response(struct soap *soap, const char *tag, int id, const struct ns1__executeStorageProcess_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeStorageProcess_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeStorageProcessResult", -1, &a->executeStorageProcessResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeStorageProcess_Response * SOAP_FMAC4 soap_in_ns1__executeStorageProcess_Response(struct soap *soap, const char *tag, struct ns1__executeStorageProcess_Response *a, const char *type)
{
	size_t soap_flag_executeStorageProcessResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeStorageProcess_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeStorageProcess_Response, sizeof(struct ns1__executeStorageProcess_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeStorageProcess_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeStorageProcessResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeStorageProcessResult", &a->executeStorageProcessResult, "xsd:string"))
				{	soap_flag_executeStorageProcessResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeStorageProcessResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeStorageProcess_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeStorageProcess_Response, SOAP_TYPE_ns1__executeStorageProcess_Response, sizeof(struct ns1__executeStorageProcess_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeStorageProcess_Response * SOAP_FMAC2 soap_instantiate_ns1__executeStorageProcess_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeStorageProcess_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeStorageProcess_Response *p;
	size_t k = sizeof(struct ns1__executeStorageProcess_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeStorageProcess_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeStorageProcess_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeStorageProcess_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeStorageProcess_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeStorageProcess_Response(struct soap *soap, const struct ns1__executeStorageProcess_Response *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeStorageProcess_Response(soap, tag ? tag : "ns1:executeStorageProcess-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeStorageProcess_Response * SOAP_FMAC4 soap_get_ns1__executeStorageProcess_Response(struct soap *soap, struct ns1__executeStorageProcess_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeStorageProcess_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__insertXml_(struct soap *soap, struct ns1__insertXml_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->strXml);
	soap_default_bool(soap, &a->encode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__insertXml_(struct soap *soap, const struct ns1__insertXml_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->strXml);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__insertXml_(struct soap *soap, const char *tag, int id, const struct ns1__insertXml_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__insertXml_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "strXml", -1, &a->strXml, ""))
		return soap->error;
	if (soap_out_bool(soap, "encode", -1, &a->encode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__insertXml_ * SOAP_FMAC4 soap_in_ns1__insertXml_(struct soap *soap, const char *tag, struct ns1__insertXml_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_strXml = 1;
	size_t soap_flag_encode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__insertXml_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__insertXml_, sizeof(struct ns1__insertXml_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__insertXml_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_strXml && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "strXml", &a->strXml, "xsd:string"))
				{	soap_flag_strXml--;
					continue;
				}
			}
			if (soap_flag_encode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "encode", &a->encode, "xsd:boolean"))
				{	soap_flag_encode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_strXml > 0 || soap_flag_encode > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__insertXml_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__insertXml_, SOAP_TYPE_ns1__insertXml_, sizeof(struct ns1__insertXml_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__insertXml_ * SOAP_FMAC2 soap_instantiate_ns1__insertXml_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__insertXml_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__insertXml_ *p;
	size_t k = sizeof(struct ns1__insertXml_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__insertXml_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__insertXml_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__insertXml_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__insertXml_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__insertXml_(struct soap *soap, const struct ns1__insertXml_ *a, const char *tag, const char *type)
{
	if (soap_out_ns1__insertXml_(soap, tag ? tag : "ns1:insertXml", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__insertXml_ * SOAP_FMAC4 soap_get_ns1__insertXml_(struct soap *soap, struct ns1__insertXml_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__insertXml_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__insertXml_Response(struct soap *soap, struct ns1__insertXml_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->insertXmlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__insertXml_Response(struct soap *soap, const struct ns1__insertXml_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->insertXmlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__insertXml_Response(struct soap *soap, const char *tag, int id, const struct ns1__insertXml_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__insertXml_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "insertXmlResult", -1, &a->insertXmlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__insertXml_Response * SOAP_FMAC4 soap_in_ns1__insertXml_Response(struct soap *soap, const char *tag, struct ns1__insertXml_Response *a, const char *type)
{
	size_t soap_flag_insertXmlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__insertXml_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__insertXml_Response, sizeof(struct ns1__insertXml_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__insertXml_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_insertXmlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "insertXmlResult", &a->insertXmlResult, "xsd:string"))
				{	soap_flag_insertXmlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_insertXmlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__insertXml_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__insertXml_Response, SOAP_TYPE_ns1__insertXml_Response, sizeof(struct ns1__insertXml_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__insertXml_Response * SOAP_FMAC2 soap_instantiate_ns1__insertXml_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__insertXml_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__insertXml_Response *p;
	size_t k = sizeof(struct ns1__insertXml_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__insertXml_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__insertXml_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__insertXml_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__insertXml_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__insertXml_Response(struct soap *soap, const struct ns1__insertXml_Response *a, const char *tag, const char *type)
{
	if (soap_out_ns1__insertXml_Response(soap, tag ? tag : "ns1:insertXml-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__insertXml_Response * SOAP_FMAC4 soap_get_ns1__insertXml_Response(struct soap *soap, struct ns1__insertXml_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__insertXml_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREencode_(struct soap *soap, struct ns1__executeSql_USCOREencode_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREencode_(struct soap *soap, const struct ns1__executeSql_USCOREencode_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREencode_(struct soap *soap, const char *tag, int id, const struct ns1__executeSql_USCOREencode_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSql_USCOREencode_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREencode_ * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREencode_(struct soap *soap, const char *tag, struct ns1__executeSql_USCOREencode_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSql_USCOREencode_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSql_USCOREencode_, sizeof(struct ns1__executeSql_USCOREencode_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSql_USCOREencode_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSql_USCOREencode_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSql_USCOREencode_, SOAP_TYPE_ns1__executeSql_USCOREencode_, sizeof(struct ns1__executeSql_USCOREencode_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSql_USCOREencode_ * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREencode_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSql_USCOREencode_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSql_USCOREencode_ *p;
	size_t k = sizeof(struct ns1__executeSql_USCOREencode_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSql_USCOREencode_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSql_USCOREencode_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSql_USCOREencode_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSql_USCOREencode_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREencode_(struct soap *soap, const struct ns1__executeSql_USCOREencode_ *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSql_USCOREencode_(soap, tag ? tag : "ns1:executeSql_encode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREencode_ * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREencode_(struct soap *soap, struct ns1__executeSql_USCOREencode_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSql_USCOREencode_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREencode_Response(struct soap *soap, struct ns1__executeSql_USCOREencode_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSql_USCOREencodeResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREencode_Response(struct soap *soap, const struct ns1__executeSql_USCOREencode_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSql_USCOREencodeResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREencode_Response(struct soap *soap, const char *tag, int id, const struct ns1__executeSql_USCOREencode_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSql_USCOREencode_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSql_encodeResult", -1, &a->executeSql_USCOREencodeResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREencode_Response * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREencode_Response(struct soap *soap, const char *tag, struct ns1__executeSql_USCOREencode_Response *a, const char *type)
{
	size_t soap_flag_executeSql_USCOREencodeResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSql_USCOREencode_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSql_USCOREencode_Response, sizeof(struct ns1__executeSql_USCOREencode_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSql_USCOREencode_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSql_USCOREencodeResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSql_encodeResult", &a->executeSql_USCOREencodeResult, "xsd:string"))
				{	soap_flag_executeSql_USCOREencodeResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSql_USCOREencodeResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSql_USCOREencode_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSql_USCOREencode_Response, SOAP_TYPE_ns1__executeSql_USCOREencode_Response, sizeof(struct ns1__executeSql_USCOREencode_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSql_USCOREencode_Response * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREencode_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSql_USCOREencode_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSql_USCOREencode_Response *p;
	size_t k = sizeof(struct ns1__executeSql_USCOREencode_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSql_USCOREencode_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSql_USCOREencode_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSql_USCOREencode_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSql_USCOREencode_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREencode_Response(struct soap *soap, const struct ns1__executeSql_USCOREencode_Response *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSql_USCOREencode_Response(soap, tag ? tag : "ns1:executeSql_encode-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREencode_Response * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREencode_Response(struct soap *soap, struct ns1__executeSql_USCOREencode_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSql_USCOREencode_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREbackEncord_(struct soap *soap, struct ns1__executeSql_USCOREbackEncord_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREbackEncord_(struct soap *soap, const struct ns1__executeSql_USCOREbackEncord_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREbackEncord_(struct soap *soap, const char *tag, int id, const struct ns1__executeSql_USCOREbackEncord_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSql_USCOREbackEncord_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord_ * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREbackEncord_(struct soap *soap, const char *tag, struct ns1__executeSql_USCOREbackEncord_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSql_USCOREbackEncord_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSql_USCOREbackEncord_, sizeof(struct ns1__executeSql_USCOREbackEncord_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSql_USCOREbackEncord_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSql_USCOREbackEncord_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSql_USCOREbackEncord_, SOAP_TYPE_ns1__executeSql_USCOREbackEncord_, sizeof(struct ns1__executeSql_USCOREbackEncord_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSql_USCOREbackEncord_ * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREbackEncord_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSql_USCOREbackEncord_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSql_USCOREbackEncord_ *p;
	size_t k = sizeof(struct ns1__executeSql_USCOREbackEncord_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSql_USCOREbackEncord_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSql_USCOREbackEncord_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSql_USCOREbackEncord_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSql_USCOREbackEncord_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREbackEncord_(struct soap *soap, const struct ns1__executeSql_USCOREbackEncord_ *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSql_USCOREbackEncord_(soap, tag ? tag : "ns1:executeSql_backEncord", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord_ * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREbackEncord_(struct soap *soap, struct ns1__executeSql_USCOREbackEncord_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSql_USCOREbackEncord_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, struct ns1__executeSql_USCOREbackEncord_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSql_USCOREbackEncordResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, const struct ns1__executeSql_USCOREbackEncord_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSql_USCOREbackEncordResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *tag, int id, const struct ns1__executeSql_USCOREbackEncord_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSql_backEncordResult", -1, &a->executeSql_USCOREbackEncordResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord_Response * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, const char *tag, struct ns1__executeSql_USCOREbackEncord_Response *a, const char *type)
{
	size_t soap_flag_executeSql_USCOREbackEncordResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSql_USCOREbackEncord_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response, sizeof(struct ns1__executeSql_USCOREbackEncord_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSql_USCOREbackEncord_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSql_USCOREbackEncordResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSql_backEncordResult", &a->executeSql_USCOREbackEncordResult, "xsd:string"))
				{	soap_flag_executeSql_USCOREbackEncordResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSql_USCOREbackEncordResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSql_USCOREbackEncord_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response, SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response, sizeof(struct ns1__executeSql_USCOREbackEncord_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSql_USCOREbackEncord_Response * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSql_USCOREbackEncord_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSql_USCOREbackEncord_Response *p;
	size_t k = sizeof(struct ns1__executeSql_USCOREbackEncord_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSql_USCOREbackEncord_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSql_USCOREbackEncord_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSql_USCOREbackEncord_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSql_USCOREbackEncord_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, const struct ns1__executeSql_USCOREbackEncord_Response *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSql_USCOREbackEncord_Response(soap, tag ? tag : "ns1:executeSql_backEncord-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord_Response * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREbackEncord_Response(struct soap *soap, struct ns1__executeSql_USCOREbackEncord_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSql_USCOREbackEncord_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_(struct soap *soap, struct ns1__executeSql_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_(struct soap *soap, const struct ns1__executeSql_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_(struct soap *soap, const char *tag, int id, const struct ns1__executeSql_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSql_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSql_ * SOAP_FMAC4 soap_in_ns1__executeSql_(struct soap *soap, const char *tag, struct ns1__executeSql_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSql_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSql_, sizeof(struct ns1__executeSql_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSql_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSql_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSql_, SOAP_TYPE_ns1__executeSql_, sizeof(struct ns1__executeSql_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSql_ * SOAP_FMAC2 soap_instantiate_ns1__executeSql_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSql_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSql_ *p;
	size_t k = sizeof(struct ns1__executeSql_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSql_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSql_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSql_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSql_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_(struct soap *soap, const struct ns1__executeSql_ *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSql_(soap, tag ? tag : "ns1:executeSql", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSql_ * SOAP_FMAC4 soap_get_ns1__executeSql_(struct soap *soap, struct ns1__executeSql_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSql_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_Response(struct soap *soap, struct ns1__executeSql_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSqlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_Response(struct soap *soap, const struct ns1__executeSql_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSqlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_Response(struct soap *soap, const char *tag, int id, const struct ns1__executeSql_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSql_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSqlResult", -1, &a->executeSqlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSql_Response * SOAP_FMAC4 soap_in_ns1__executeSql_Response(struct soap *soap, const char *tag, struct ns1__executeSql_Response *a, const char *type)
{
	size_t soap_flag_executeSqlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSql_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSql_Response, sizeof(struct ns1__executeSql_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSql_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSqlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSqlResult", &a->executeSqlResult, "xsd:string"))
				{	soap_flag_executeSqlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSqlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSql_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSql_Response, SOAP_TYPE_ns1__executeSql_Response, sizeof(struct ns1__executeSql_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSql_Response * SOAP_FMAC2 soap_instantiate_ns1__executeSql_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSql_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSql_Response *p;
	size_t k = sizeof(struct ns1__executeSql_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSql_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSql_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSql_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSql_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_Response(struct soap *soap, const struct ns1__executeSql_Response *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSql_Response(soap, tag ? tag : "ns1:executeSql-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSql_Response * SOAP_FMAC4 soap_get_ns1__executeSql_Response(struct soap *soap, struct ns1__executeSql_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSql_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__TestLinkSqlserver_(struct soap *soap, struct ns1__TestLinkSqlserver_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__TestLinkSqlserver_(struct soap *soap, const struct ns1__TestLinkSqlserver_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TestLinkSqlserver_(struct soap *soap, const char *tag, int id, const struct ns1__TestLinkSqlserver_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__TestLinkSqlserver_), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__TestLinkSqlserver_ * SOAP_FMAC4 soap_in_ns1__TestLinkSqlserver_(struct soap *soap, const char *tag, struct ns1__TestLinkSqlserver_ *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__TestLinkSqlserver_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__TestLinkSqlserver_, sizeof(struct ns1__TestLinkSqlserver_), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__TestLinkSqlserver_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__TestLinkSqlserver_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__TestLinkSqlserver_, SOAP_TYPE_ns1__TestLinkSqlserver_, sizeof(struct ns1__TestLinkSqlserver_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__TestLinkSqlserver_ * SOAP_FMAC2 soap_instantiate_ns1__TestLinkSqlserver_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__TestLinkSqlserver_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__TestLinkSqlserver_ *p;
	size_t k = sizeof(struct ns1__TestLinkSqlserver_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__TestLinkSqlserver_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__TestLinkSqlserver_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__TestLinkSqlserver_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__TestLinkSqlserver_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__TestLinkSqlserver_(struct soap *soap, const struct ns1__TestLinkSqlserver_ *a, const char *tag, const char *type)
{
	if (soap_out_ns1__TestLinkSqlserver_(soap, tag ? tag : "ns1:TestLinkSqlserver", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__TestLinkSqlserver_ * SOAP_FMAC4 soap_get_ns1__TestLinkSqlserver_(struct soap *soap, struct ns1__TestLinkSqlserver_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__TestLinkSqlserver_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__TestLinkSqlserver_Response(struct soap *soap, struct ns1__TestLinkSqlserver_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->TestLinkSqlserverResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__TestLinkSqlserver_Response(struct soap *soap, const struct ns1__TestLinkSqlserver_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->TestLinkSqlserverResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TestLinkSqlserver_Response(struct soap *soap, const char *tag, int id, const struct ns1__TestLinkSqlserver_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__TestLinkSqlserver_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "TestLinkSqlserverResult", -1, &a->TestLinkSqlserverResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__TestLinkSqlserver_Response * SOAP_FMAC4 soap_in_ns1__TestLinkSqlserver_Response(struct soap *soap, const char *tag, struct ns1__TestLinkSqlserver_Response *a, const char *type)
{
	size_t soap_flag_TestLinkSqlserverResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__TestLinkSqlserver_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__TestLinkSqlserver_Response, sizeof(struct ns1__TestLinkSqlserver_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__TestLinkSqlserver_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TestLinkSqlserverResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "TestLinkSqlserverResult", &a->TestLinkSqlserverResult, "xsd:string"))
				{	soap_flag_TestLinkSqlserverResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TestLinkSqlserverResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__TestLinkSqlserver_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__TestLinkSqlserver_Response, SOAP_TYPE_ns1__TestLinkSqlserver_Response, sizeof(struct ns1__TestLinkSqlserver_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__TestLinkSqlserver_Response * SOAP_FMAC2 soap_instantiate_ns1__TestLinkSqlserver_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__TestLinkSqlserver_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__TestLinkSqlserver_Response *p;
	size_t k = sizeof(struct ns1__TestLinkSqlserver_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__TestLinkSqlserver_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__TestLinkSqlserver_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__TestLinkSqlserver_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__TestLinkSqlserver_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__TestLinkSqlserver_Response(struct soap *soap, const struct ns1__TestLinkSqlserver_Response *a, const char *tag, const char *type)
{
	if (soap_out_ns1__TestLinkSqlserver_Response(soap, tag ? tag : "ns1:TestLinkSqlserver-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__TestLinkSqlserver_Response * SOAP_FMAC4 soap_get_ns1__TestLinkSqlserver_Response(struct soap *soap, struct ns1__TestLinkSqlserver_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__TestLinkSqlserver_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__showExistLink_(struct soap *soap, struct ns1__showExistLink_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__showExistLink_(struct soap *soap, const struct ns1__showExistLink_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__showExistLink_(struct soap *soap, const char *tag, int id, const struct ns1__showExistLink_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__showExistLink_), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__showExistLink_ * SOAP_FMAC4 soap_in_ns1__showExistLink_(struct soap *soap, const char *tag, struct ns1__showExistLink_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__showExistLink_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__showExistLink_, sizeof(struct ns1__showExistLink_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__showExistLink_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__showExistLink_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__showExistLink_, SOAP_TYPE_ns1__showExistLink_, sizeof(struct ns1__showExistLink_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__showExistLink_ * SOAP_FMAC2 soap_instantiate_ns1__showExistLink_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__showExistLink_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__showExistLink_ *p;
	size_t k = sizeof(struct ns1__showExistLink_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__showExistLink_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__showExistLink_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__showExistLink_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__showExistLink_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__showExistLink_(struct soap *soap, const struct ns1__showExistLink_ *a, const char *tag, const char *type)
{
	if (soap_out_ns1__showExistLink_(soap, tag ? tag : "ns1:showExistLink", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__showExistLink_ * SOAP_FMAC4 soap_get_ns1__showExistLink_(struct soap *soap, struct ns1__showExistLink_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__showExistLink_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__showExistLink_Response(struct soap *soap, struct ns1__showExistLink_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->showExistLinkResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__showExistLink_Response(struct soap *soap, const struct ns1__showExistLink_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->showExistLinkResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__showExistLink_Response(struct soap *soap, const char *tag, int id, const struct ns1__showExistLink_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__showExistLink_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "showExistLinkResult", -1, &a->showExistLinkResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__showExistLink_Response * SOAP_FMAC4 soap_in_ns1__showExistLink_Response(struct soap *soap, const char *tag, struct ns1__showExistLink_Response *a, const char *type)
{
	size_t soap_flag_showExistLinkResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__showExistLink_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__showExistLink_Response, sizeof(struct ns1__showExistLink_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__showExistLink_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_showExistLinkResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "showExistLinkResult", &a->showExistLinkResult, "xsd:string"))
				{	soap_flag_showExistLinkResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_showExistLinkResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__showExistLink_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__showExistLink_Response, SOAP_TYPE_ns1__showExistLink_Response, sizeof(struct ns1__showExistLink_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__showExistLink_Response * SOAP_FMAC2 soap_instantiate_ns1__showExistLink_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__showExistLink_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__showExistLink_Response *p;
	size_t k = sizeof(struct ns1__showExistLink_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__showExistLink_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__showExistLink_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__showExistLink_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__showExistLink_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__showExistLink_Response(struct soap *soap, const struct ns1__showExistLink_Response *a, const char *tag, const char *type)
{
	if (soap_out_ns1__showExistLink_Response(soap, tag ? tag : "ns1:showExistLink-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__showExistLink_Response * SOAP_FMAC4 soap_get_ns1__showExistLink_Response(struct soap *soap, struct ns1__showExistLink_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__showExistLink_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__clearLink_(struct soap *soap, struct ns1__clearLink_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->bTimeContrl);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__clearLink_(struct soap *soap, const struct ns1__clearLink_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__clearLink_(struct soap *soap, const char *tag, int id, const struct ns1__clearLink_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__clearLink_), type))
		return soap->error;
	if (soap_out_bool(soap, "bTimeContrl", -1, &a->bTimeContrl, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__clearLink_ * SOAP_FMAC4 soap_in_ns1__clearLink_(struct soap *soap, const char *tag, struct ns1__clearLink_ *a, const char *type)
{
	size_t soap_flag_bTimeContrl = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__clearLink_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__clearLink_, sizeof(struct ns1__clearLink_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__clearLink_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_bTimeContrl && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "bTimeContrl", &a->bTimeContrl, "xsd:boolean"))
				{	soap_flag_bTimeContrl--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_bTimeContrl > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__clearLink_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__clearLink_, SOAP_TYPE_ns1__clearLink_, sizeof(struct ns1__clearLink_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__clearLink_ * SOAP_FMAC2 soap_instantiate_ns1__clearLink_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__clearLink_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__clearLink_ *p;
	size_t k = sizeof(struct ns1__clearLink_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__clearLink_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__clearLink_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__clearLink_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__clearLink_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__clearLink_(struct soap *soap, const struct ns1__clearLink_ *a, const char *tag, const char *type)
{
	if (soap_out_ns1__clearLink_(soap, tag ? tag : "ns1:clearLink", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__clearLink_ * SOAP_FMAC4 soap_get_ns1__clearLink_(struct soap *soap, struct ns1__clearLink_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__clearLink_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__clearLink_Response(struct soap *soap, struct ns1__clearLink_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->clearLinkResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__clearLink_Response(struct soap *soap, const struct ns1__clearLink_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->clearLinkResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__clearLink_Response(struct soap *soap, const char *tag, int id, const struct ns1__clearLink_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__clearLink_Response), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "clearLinkResult", -1, &a->clearLinkResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__clearLink_Response * SOAP_FMAC4 soap_in_ns1__clearLink_Response(struct soap *soap, const char *tag, struct ns1__clearLink_Response *a, const char *type)
{
	size_t soap_flag_clearLinkResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__clearLink_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__clearLink_Response, sizeof(struct ns1__clearLink_Response), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__clearLink_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_clearLinkResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "clearLinkResult", &a->clearLinkResult, "xsd:string"))
				{	soap_flag_clearLinkResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_clearLinkResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__clearLink_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__clearLink_Response, SOAP_TYPE_ns1__clearLink_Response, sizeof(struct ns1__clearLink_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__clearLink_Response * SOAP_FMAC2 soap_instantiate_ns1__clearLink_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__clearLink_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__clearLink_Response *p;
	size_t k = sizeof(struct ns1__clearLink_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__clearLink_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__clearLink_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__clearLink_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__clearLink_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__clearLink_Response(struct soap *soap, const struct ns1__clearLink_Response *a, const char *tag, const char *type)
{
	if (soap_out_ns1__clearLink_Response(soap, tag ? tag : "ns1:clearLink-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__clearLink_Response * SOAP_FMAC4 soap_get_ns1__clearLink_Response(struct soap *soap, struct ns1__clearLink_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__clearLink_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddNumbers_(struct soap *soap, struct ns1__AddNumbers_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->NumberOne);
	soap_default_int(soap, &a->NumberTwo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddNumbers_(struct soap *soap, const struct ns1__AddNumbers_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddNumbers_(struct soap *soap, const char *tag, int id, const struct ns1__AddNumbers_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AddNumbers_), type))
		return soap->error;
	if (soap_out_int(soap, "NumberOne", -1, &a->NumberOne, ""))
		return soap->error;
	if (soap_out_int(soap, "NumberTwo", -1, &a->NumberTwo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__AddNumbers_ * SOAP_FMAC4 soap_in_ns1__AddNumbers_(struct soap *soap, const char *tag, struct ns1__AddNumbers_ *a, const char *type)
{
	size_t soap_flag_NumberOne = 1;
	size_t soap_flag_NumberTwo = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__AddNumbers_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AddNumbers_, sizeof(struct ns1__AddNumbers_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__AddNumbers_(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NumberOne && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "NumberOne", &a->NumberOne, "xsd:int"))
				{	soap_flag_NumberOne--;
					continue;
				}
			}
			if (soap_flag_NumberTwo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "NumberTwo", &a->NumberTwo, "xsd:int"))
				{	soap_flag_NumberTwo--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_NumberOne > 0 || soap_flag_NumberTwo > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__AddNumbers_ *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AddNumbers_, SOAP_TYPE_ns1__AddNumbers_, sizeof(struct ns1__AddNumbers_), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__AddNumbers_ * SOAP_FMAC2 soap_instantiate_ns1__AddNumbers_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AddNumbers_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__AddNumbers_ *p;
	size_t k = sizeof(struct ns1__AddNumbers_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__AddNumbers_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__AddNumbers_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__AddNumbers_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__AddNumbers_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddNumbers_(struct soap *soap, const struct ns1__AddNumbers_ *a, const char *tag, const char *type)
{
	if (soap_out_ns1__AddNumbers_(soap, tag ? tag : "ns1:AddNumbers", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__AddNumbers_ * SOAP_FMAC4 soap_get_ns1__AddNumbers_(struct soap *soap, struct ns1__AddNumbers_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AddNumbers_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddNumbers_Response(struct soap *soap, struct ns1__AddNumbers_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->AddNumbersResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddNumbers_Response(struct soap *soap, const struct ns1__AddNumbers_Response *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddNumbers_Response(struct soap *soap, const char *tag, int id, const struct ns1__AddNumbers_Response *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AddNumbers_Response), type))
		return soap->error;
	if (soap_out_int(soap, "AddNumbersResult", -1, &a->AddNumbersResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__AddNumbers_Response * SOAP_FMAC4 soap_in_ns1__AddNumbers_Response(struct soap *soap, const char *tag, struct ns1__AddNumbers_Response *a, const char *type)
{
	size_t soap_flag_AddNumbersResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__AddNumbers_Response*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AddNumbers_Response, sizeof(struct ns1__AddNumbers_Response), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__AddNumbers_Response(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddNumbersResult && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "AddNumbersResult", &a->AddNumbersResult, "xsd:int"))
				{	soap_flag_AddNumbersResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AddNumbersResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__AddNumbers_Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AddNumbers_Response, SOAP_TYPE_ns1__AddNumbers_Response, sizeof(struct ns1__AddNumbers_Response), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__AddNumbers_Response * SOAP_FMAC2 soap_instantiate_ns1__AddNumbers_Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AddNumbers_Response(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__AddNumbers_Response *p;
	size_t k = sizeof(struct ns1__AddNumbers_Response);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__AddNumbers_Response, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__AddNumbers_Response);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__AddNumbers_Response, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__AddNumbers_Response location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddNumbers_Response(struct soap *soap, const struct ns1__AddNumbers_Response *a, const char *tag, const char *type)
{
	if (soap_out_ns1__AddNumbers_Response(soap, tag ? tag : "ns1:AddNumbers-Response", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__AddNumbers_Response * SOAP_FMAC4 soap_get_ns1__AddNumbers_Response(struct soap *soap, struct ns1__AddNumbers_Response *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AddNumbers_Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddFileToSql(struct soap *soap, struct ns1__AddFileToSql *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->strFileName);
	soap_default_std__wstring(soap, &a->sPointer);
	soap_default_std__wstring(soap, &a->tablenamefieldname);
	soap_default_std__wstring(soap, &a->fileIP);
	soap_default_std__wstring(soap, &a->fileUse);
	soap_default_std__wstring(soap, &a->filePassword);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddFileToSql(struct soap *soap, const struct ns1__AddFileToSql *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->strFileName);
	soap_serialize_std__wstring(soap, &a->sPointer);
	soap_serialize_std__wstring(soap, &a->tablenamefieldname);
	soap_serialize_std__wstring(soap, &a->fileIP);
	soap_serialize_std__wstring(soap, &a->fileUse);
	soap_serialize_std__wstring(soap, &a->filePassword);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddFileToSql(struct soap *soap, const char *tag, int id, const struct ns1__AddFileToSql *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AddFileToSql), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "strFileName", -1, &a->strFileName, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sPointer", -1, &a->sPointer, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "tablenamefieldname", -1, &a->tablenamefieldname, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "fileIP", -1, &a->fileIP, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "fileUse", -1, &a->fileUse, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "filePassword", -1, &a->filePassword, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__AddFileToSql * SOAP_FMAC4 soap_in_ns1__AddFileToSql(struct soap *soap, const char *tag, struct ns1__AddFileToSql *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_strFileName = 1;
	size_t soap_flag_sPointer = 1;
	size_t soap_flag_tablenamefieldname = 1;
	size_t soap_flag_fileIP = 1;
	size_t soap_flag_fileUse = 1;
	size_t soap_flag_filePassword = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__AddFileToSql*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AddFileToSql, sizeof(struct ns1__AddFileToSql), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__AddFileToSql(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_strFileName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "strFileName", &a->strFileName, "xsd:string"))
				{	soap_flag_strFileName--;
					continue;
				}
			}
			if (soap_flag_sPointer && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sPointer", &a->sPointer, "xsd:string"))
				{	soap_flag_sPointer--;
					continue;
				}
			}
			if (soap_flag_tablenamefieldname && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "tablenamefieldname", &a->tablenamefieldname, "xsd:string"))
				{	soap_flag_tablenamefieldname--;
					continue;
				}
			}
			if (soap_flag_fileIP && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "fileIP", &a->fileIP, "xsd:string"))
				{	soap_flag_fileIP--;
					continue;
				}
			}
			if (soap_flag_fileUse && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "fileUse", &a->fileUse, "xsd:string"))
				{	soap_flag_fileUse--;
					continue;
				}
			}
			if (soap_flag_filePassword && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "filePassword", &a->filePassword, "xsd:string"))
				{	soap_flag_filePassword--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_strFileName > 0 || soap_flag_sPointer > 0 || soap_flag_tablenamefieldname > 0 || soap_flag_fileIP > 0 || soap_flag_fileUse > 0 || soap_flag_filePassword > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__AddFileToSql *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AddFileToSql, SOAP_TYPE_ns1__AddFileToSql, sizeof(struct ns1__AddFileToSql), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__AddFileToSql * SOAP_FMAC2 soap_instantiate_ns1__AddFileToSql(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AddFileToSql(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__AddFileToSql *p;
	size_t k = sizeof(struct ns1__AddFileToSql);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__AddFileToSql, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__AddFileToSql);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__AddFileToSql, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__AddFileToSql location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddFileToSql(struct soap *soap, const struct ns1__AddFileToSql *a, const char *tag, const char *type)
{
	if (soap_out_ns1__AddFileToSql(soap, tag ? tag : "ns1:AddFileToSql", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__AddFileToSql * SOAP_FMAC4 soap_get_ns1__AddFileToSql(struct soap *soap, struct ns1__AddFileToSql *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AddFileToSql(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddFileToSqlResponse(struct soap *soap, struct ns1__AddFileToSqlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->AddFileToSqlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddFileToSqlResponse(struct soap *soap, const struct ns1__AddFileToSqlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->AddFileToSqlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddFileToSqlResponse(struct soap *soap, const char *tag, int id, const struct ns1__AddFileToSqlResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AddFileToSqlResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "AddFileToSqlResult", -1, &a->AddFileToSqlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__AddFileToSqlResponse * SOAP_FMAC4 soap_in_ns1__AddFileToSqlResponse(struct soap *soap, const char *tag, struct ns1__AddFileToSqlResponse *a, const char *type)
{
	size_t soap_flag_AddFileToSqlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__AddFileToSqlResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AddFileToSqlResponse, sizeof(struct ns1__AddFileToSqlResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__AddFileToSqlResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddFileToSqlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "AddFileToSqlResult", &a->AddFileToSqlResult, "xsd:string"))
				{	soap_flag_AddFileToSqlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AddFileToSqlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__AddFileToSqlResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AddFileToSqlResponse, SOAP_TYPE_ns1__AddFileToSqlResponse, sizeof(struct ns1__AddFileToSqlResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__AddFileToSqlResponse * SOAP_FMAC2 soap_instantiate_ns1__AddFileToSqlResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AddFileToSqlResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__AddFileToSqlResponse *p;
	size_t k = sizeof(struct ns1__AddFileToSqlResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__AddFileToSqlResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__AddFileToSqlResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__AddFileToSqlResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__AddFileToSqlResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddFileToSqlResponse(struct soap *soap, const struct ns1__AddFileToSqlResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__AddFileToSqlResponse(soap, tag ? tag : "ns1:AddFileToSqlResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__AddFileToSqlResponse * SOAP_FMAC4 soap_get_ns1__AddFileToSqlResponse(struct soap *soap, struct ns1__AddFileToSqlResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AddFileToSqlResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeStorageProcess(struct soap *soap, struct ns1__executeStorageProcess *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->StorageProcessName);
	soap_default_std__wstring(soap, &a->Parameters);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeStorageProcess(struct soap *soap, const struct ns1__executeStorageProcess *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->StorageProcessName);
	soap_serialize_std__wstring(soap, &a->Parameters);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeStorageProcess(struct soap *soap, const char *tag, int id, const struct ns1__executeStorageProcess *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeStorageProcess), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "StorageProcessName", -1, &a->StorageProcessName, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "Parameters", -1, &a->Parameters, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeStorageProcess * SOAP_FMAC4 soap_in_ns1__executeStorageProcess(struct soap *soap, const char *tag, struct ns1__executeStorageProcess *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_StorageProcessName = 1;
	size_t soap_flag_Parameters = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeStorageProcess*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeStorageProcess, sizeof(struct ns1__executeStorageProcess), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeStorageProcess(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_StorageProcessName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "StorageProcessName", &a->StorageProcessName, "xsd:string"))
				{	soap_flag_StorageProcessName--;
					continue;
				}
			}
			if (soap_flag_Parameters && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "Parameters", &a->Parameters, "xsd:string"))
				{	soap_flag_Parameters--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_StorageProcessName > 0 || soap_flag_Parameters > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeStorageProcess *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeStorageProcess, SOAP_TYPE_ns1__executeStorageProcess, sizeof(struct ns1__executeStorageProcess), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeStorageProcess * SOAP_FMAC2 soap_instantiate_ns1__executeStorageProcess(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeStorageProcess(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeStorageProcess *p;
	size_t k = sizeof(struct ns1__executeStorageProcess);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeStorageProcess, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeStorageProcess);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeStorageProcess, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeStorageProcess location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeStorageProcess(struct soap *soap, const struct ns1__executeStorageProcess *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeStorageProcess(soap, tag ? tag : "ns1:executeStorageProcess", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeStorageProcess * SOAP_FMAC4 soap_get_ns1__executeStorageProcess(struct soap *soap, struct ns1__executeStorageProcess *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeStorageProcess(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeStorageProcessResponse(struct soap *soap, struct ns1__executeStorageProcessResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeStorageProcessResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeStorageProcessResponse(struct soap *soap, const struct ns1__executeStorageProcessResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeStorageProcessResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeStorageProcessResponse(struct soap *soap, const char *tag, int id, const struct ns1__executeStorageProcessResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeStorageProcessResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeStorageProcessResult", -1, &a->executeStorageProcessResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeStorageProcessResponse * SOAP_FMAC4 soap_in_ns1__executeStorageProcessResponse(struct soap *soap, const char *tag, struct ns1__executeStorageProcessResponse *a, const char *type)
{
	size_t soap_flag_executeStorageProcessResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeStorageProcessResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeStorageProcessResponse, sizeof(struct ns1__executeStorageProcessResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeStorageProcessResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeStorageProcessResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeStorageProcessResult", &a->executeStorageProcessResult, "xsd:string"))
				{	soap_flag_executeStorageProcessResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeStorageProcessResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeStorageProcessResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeStorageProcessResponse, SOAP_TYPE_ns1__executeStorageProcessResponse, sizeof(struct ns1__executeStorageProcessResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeStorageProcessResponse * SOAP_FMAC2 soap_instantiate_ns1__executeStorageProcessResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeStorageProcessResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeStorageProcessResponse *p;
	size_t k = sizeof(struct ns1__executeStorageProcessResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeStorageProcessResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeStorageProcessResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeStorageProcessResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeStorageProcessResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeStorageProcessResponse(struct soap *soap, const struct ns1__executeStorageProcessResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeStorageProcessResponse(soap, tag ? tag : "ns1:executeStorageProcessResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeStorageProcessResponse * SOAP_FMAC4 soap_get_ns1__executeStorageProcessResponse(struct soap *soap, struct ns1__executeStorageProcessResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeStorageProcessResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__insertXml(struct soap *soap, struct ns1__insertXml *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->strXml);
	soap_default_bool(soap, &a->encode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__insertXml(struct soap *soap, const struct ns1__insertXml *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->strXml);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__insertXml(struct soap *soap, const char *tag, int id, const struct ns1__insertXml *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__insertXml), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "strXml", -1, &a->strXml, ""))
		return soap->error;
	if (soap_out_bool(soap, "encode", -1, &a->encode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__insertXml * SOAP_FMAC4 soap_in_ns1__insertXml(struct soap *soap, const char *tag, struct ns1__insertXml *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_strXml = 1;
	size_t soap_flag_encode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__insertXml*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__insertXml, sizeof(struct ns1__insertXml), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__insertXml(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_strXml && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "strXml", &a->strXml, "xsd:string"))
				{	soap_flag_strXml--;
					continue;
				}
			}
			if (soap_flag_encode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "encode", &a->encode, "xsd:boolean"))
				{	soap_flag_encode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_strXml > 0 || soap_flag_encode > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__insertXml *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__insertXml, SOAP_TYPE_ns1__insertXml, sizeof(struct ns1__insertXml), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__insertXml * SOAP_FMAC2 soap_instantiate_ns1__insertXml(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__insertXml(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__insertXml *p;
	size_t k = sizeof(struct ns1__insertXml);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__insertXml, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__insertXml);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__insertXml, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__insertXml location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__insertXml(struct soap *soap, const struct ns1__insertXml *a, const char *tag, const char *type)
{
	if (soap_out_ns1__insertXml(soap, tag ? tag : "ns1:insertXml", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__insertXml * SOAP_FMAC4 soap_get_ns1__insertXml(struct soap *soap, struct ns1__insertXml *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__insertXml(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__insertXmlResponse(struct soap *soap, struct ns1__insertXmlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->insertXmlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__insertXmlResponse(struct soap *soap, const struct ns1__insertXmlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->insertXmlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__insertXmlResponse(struct soap *soap, const char *tag, int id, const struct ns1__insertXmlResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__insertXmlResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "insertXmlResult", -1, &a->insertXmlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__insertXmlResponse * SOAP_FMAC4 soap_in_ns1__insertXmlResponse(struct soap *soap, const char *tag, struct ns1__insertXmlResponse *a, const char *type)
{
	size_t soap_flag_insertXmlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__insertXmlResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__insertXmlResponse, sizeof(struct ns1__insertXmlResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__insertXmlResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_insertXmlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "insertXmlResult", &a->insertXmlResult, "xsd:string"))
				{	soap_flag_insertXmlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_insertXmlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__insertXmlResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__insertXmlResponse, SOAP_TYPE_ns1__insertXmlResponse, sizeof(struct ns1__insertXmlResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__insertXmlResponse * SOAP_FMAC2 soap_instantiate_ns1__insertXmlResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__insertXmlResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__insertXmlResponse *p;
	size_t k = sizeof(struct ns1__insertXmlResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__insertXmlResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__insertXmlResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__insertXmlResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__insertXmlResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__insertXmlResponse(struct soap *soap, const struct ns1__insertXmlResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__insertXmlResponse(soap, tag ? tag : "ns1:insertXmlResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__insertXmlResponse * SOAP_FMAC4 soap_get_ns1__insertXmlResponse(struct soap *soap, struct ns1__insertXmlResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__insertXmlResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREencode(struct soap *soap, struct ns1__executeSql_USCOREencode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREencode(struct soap *soap, const struct ns1__executeSql_USCOREencode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREencode(struct soap *soap, const char *tag, int id, const struct ns1__executeSql_USCOREencode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSql_USCOREencode), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREencode * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREencode(struct soap *soap, const char *tag, struct ns1__executeSql_USCOREencode *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSql_USCOREencode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSql_USCOREencode, sizeof(struct ns1__executeSql_USCOREencode), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSql_USCOREencode(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSql_USCOREencode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSql_USCOREencode, SOAP_TYPE_ns1__executeSql_USCOREencode, sizeof(struct ns1__executeSql_USCOREencode), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSql_USCOREencode * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREencode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSql_USCOREencode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSql_USCOREencode *p;
	size_t k = sizeof(struct ns1__executeSql_USCOREencode);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSql_USCOREencode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSql_USCOREencode);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSql_USCOREencode, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSql_USCOREencode location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREencode(struct soap *soap, const struct ns1__executeSql_USCOREencode *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSql_USCOREencode(soap, tag ? tag : "ns1:executeSql_encode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREencode * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREencode(struct soap *soap, struct ns1__executeSql_USCOREencode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSql_USCOREencode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREencodeResponse(struct soap *soap, struct ns1__executeSql_USCOREencodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSql_USCOREencodeResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREencodeResponse(struct soap *soap, const struct ns1__executeSql_USCOREencodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSql_USCOREencodeResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREencodeResponse(struct soap *soap, const char *tag, int id, const struct ns1__executeSql_USCOREencodeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSql_USCOREencodeResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSql_encodeResult", -1, &a->executeSql_USCOREencodeResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREencodeResponse * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREencodeResponse(struct soap *soap, const char *tag, struct ns1__executeSql_USCOREencodeResponse *a, const char *type)
{
	size_t soap_flag_executeSql_USCOREencodeResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSql_USCOREencodeResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSql_USCOREencodeResponse, sizeof(struct ns1__executeSql_USCOREencodeResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSql_USCOREencodeResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSql_USCOREencodeResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSql_encodeResult", &a->executeSql_USCOREencodeResult, "xsd:string"))
				{	soap_flag_executeSql_USCOREencodeResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSql_USCOREencodeResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSql_USCOREencodeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSql_USCOREencodeResponse, SOAP_TYPE_ns1__executeSql_USCOREencodeResponse, sizeof(struct ns1__executeSql_USCOREencodeResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSql_USCOREencodeResponse * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREencodeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSql_USCOREencodeResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSql_USCOREencodeResponse *p;
	size_t k = sizeof(struct ns1__executeSql_USCOREencodeResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSql_USCOREencodeResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSql_USCOREencodeResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSql_USCOREencodeResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSql_USCOREencodeResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREencodeResponse(struct soap *soap, const struct ns1__executeSql_USCOREencodeResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSql_USCOREencodeResponse(soap, tag ? tag : "ns1:executeSql_encodeResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREencodeResponse * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREencodeResponse(struct soap *soap, struct ns1__executeSql_USCOREencodeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSql_USCOREencodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREbackEncord(struct soap *soap, struct ns1__executeSql_USCOREbackEncord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREbackEncord(struct soap *soap, const struct ns1__executeSql_USCOREbackEncord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREbackEncord(struct soap *soap, const char *tag, int id, const struct ns1__executeSql_USCOREbackEncord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSql_USCOREbackEncord), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREbackEncord(struct soap *soap, const char *tag, struct ns1__executeSql_USCOREbackEncord *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSql_USCOREbackEncord*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSql_USCOREbackEncord, sizeof(struct ns1__executeSql_USCOREbackEncord), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSql_USCOREbackEncord(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSql_USCOREbackEncord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSql_USCOREbackEncord, SOAP_TYPE_ns1__executeSql_USCOREbackEncord, sizeof(struct ns1__executeSql_USCOREbackEncord), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSql_USCOREbackEncord * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREbackEncord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSql_USCOREbackEncord(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSql_USCOREbackEncord *p;
	size_t k = sizeof(struct ns1__executeSql_USCOREbackEncord);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSql_USCOREbackEncord, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSql_USCOREbackEncord);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSql_USCOREbackEncord, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSql_USCOREbackEncord location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREbackEncord(struct soap *soap, const struct ns1__executeSql_USCOREbackEncord *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSql_USCOREbackEncord(soap, tag ? tag : "ns1:executeSql_backEncord", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncord * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREbackEncord(struct soap *soap, struct ns1__executeSql_USCOREbackEncord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSql_USCOREbackEncord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, struct ns1__executeSql_USCOREbackEncordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSql_USCOREbackEncordResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, const struct ns1__executeSql_USCOREbackEncordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSql_USCOREbackEncordResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *tag, int id, const struct ns1__executeSql_USCOREbackEncordResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSql_backEncordResult", -1, &a->executeSql_USCOREbackEncordResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncordResponse * SOAP_FMAC4 soap_in_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, const char *tag, struct ns1__executeSql_USCOREbackEncordResponse *a, const char *type)
{
	size_t soap_flag_executeSql_USCOREbackEncordResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSql_USCOREbackEncordResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse, sizeof(struct ns1__executeSql_USCOREbackEncordResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSql_USCOREbackEncordResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSql_USCOREbackEncordResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSql_backEncordResult", &a->executeSql_USCOREbackEncordResult, "xsd:string"))
				{	soap_flag_executeSql_USCOREbackEncordResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSql_USCOREbackEncordResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSql_USCOREbackEncordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse, SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse, sizeof(struct ns1__executeSql_USCOREbackEncordResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSql_USCOREbackEncordResponse * SOAP_FMAC2 soap_instantiate_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSql_USCOREbackEncordResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSql_USCOREbackEncordResponse *p;
	size_t k = sizeof(struct ns1__executeSql_USCOREbackEncordResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSql_USCOREbackEncordResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSql_USCOREbackEncordResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSql_USCOREbackEncordResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSql_USCOREbackEncordResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, const struct ns1__executeSql_USCOREbackEncordResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSql_USCOREbackEncordResponse(soap, tag ? tag : "ns1:executeSql_backEncordResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSql_USCOREbackEncordResponse * SOAP_FMAC4 soap_get_ns1__executeSql_USCOREbackEncordResponse(struct soap *soap, struct ns1__executeSql_USCOREbackEncordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSql_USCOREbackEncordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSql(struct soap *soap, struct ns1__executeSql *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
	soap_default_std__wstring(soap, &a->sSql);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSql(struct soap *soap, const struct ns1__executeSql *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
	soap_serialize_std__wstring(soap, &a->sSql);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSql(struct soap *soap, const char *tag, int id, const struct ns1__executeSql *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSql), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "sSql", -1, &a->sSql, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSql * SOAP_FMAC4 soap_in_ns1__executeSql(struct soap *soap, const char *tag, struct ns1__executeSql *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	size_t soap_flag_sSql = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSql*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSql, sizeof(struct ns1__executeSql), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSql(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap_flag_sSql && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "sSql", &a->sSql, "xsd:string"))
				{	soap_flag_sSql--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0 || soap_flag_sSql > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSql *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSql, SOAP_TYPE_ns1__executeSql, sizeof(struct ns1__executeSql), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSql * SOAP_FMAC2 soap_instantiate_ns1__executeSql(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSql(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSql *p;
	size_t k = sizeof(struct ns1__executeSql);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSql, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSql);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSql, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSql location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSql(struct soap *soap, const struct ns1__executeSql *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSql(soap, tag ? tag : "ns1:executeSql", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSql * SOAP_FMAC4 soap_get_ns1__executeSql(struct soap *soap, struct ns1__executeSql *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSql(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__executeSqlResponse(struct soap *soap, struct ns1__executeSqlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->executeSqlResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__executeSqlResponse(struct soap *soap, const struct ns1__executeSqlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->executeSqlResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executeSqlResponse(struct soap *soap, const char *tag, int id, const struct ns1__executeSqlResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executeSqlResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "executeSqlResult", -1, &a->executeSqlResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__executeSqlResponse * SOAP_FMAC4 soap_in_ns1__executeSqlResponse(struct soap *soap, const char *tag, struct ns1__executeSqlResponse *a, const char *type)
{
	size_t soap_flag_executeSqlResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__executeSqlResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executeSqlResponse, sizeof(struct ns1__executeSqlResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__executeSqlResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_executeSqlResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "executeSqlResult", &a->executeSqlResult, "xsd:string"))
				{	soap_flag_executeSqlResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_executeSqlResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__executeSqlResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executeSqlResponse, SOAP_TYPE_ns1__executeSqlResponse, sizeof(struct ns1__executeSqlResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__executeSqlResponse * SOAP_FMAC2 soap_instantiate_ns1__executeSqlResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executeSqlResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__executeSqlResponse *p;
	size_t k = sizeof(struct ns1__executeSqlResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executeSqlResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__executeSqlResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__executeSqlResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__executeSqlResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__executeSqlResponse(struct soap *soap, const struct ns1__executeSqlResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__executeSqlResponse(soap, tag ? tag : "ns1:executeSqlResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__executeSqlResponse * SOAP_FMAC4 soap_get_ns1__executeSqlResponse(struct soap *soap, struct ns1__executeSqlResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executeSqlResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__TestLinkSqlserver(struct soap *soap, struct ns1__TestLinkSqlserver *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->serverInfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__TestLinkSqlserver(struct soap *soap, const struct ns1__TestLinkSqlserver *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->serverInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TestLinkSqlserver(struct soap *soap, const char *tag, int id, const struct ns1__TestLinkSqlserver *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__TestLinkSqlserver), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "serverInfo", -1, &a->serverInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__TestLinkSqlserver * SOAP_FMAC4 soap_in_ns1__TestLinkSqlserver(struct soap *soap, const char *tag, struct ns1__TestLinkSqlserver *a, const char *type)
{
	size_t soap_flag_serverInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__TestLinkSqlserver*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__TestLinkSqlserver, sizeof(struct ns1__TestLinkSqlserver), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__TestLinkSqlserver(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "serverInfo", &a->serverInfo, "xsd:string"))
				{	soap_flag_serverInfo--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serverInfo > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__TestLinkSqlserver *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__TestLinkSqlserver, SOAP_TYPE_ns1__TestLinkSqlserver, sizeof(struct ns1__TestLinkSqlserver), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__TestLinkSqlserver * SOAP_FMAC2 soap_instantiate_ns1__TestLinkSqlserver(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__TestLinkSqlserver(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__TestLinkSqlserver *p;
	size_t k = sizeof(struct ns1__TestLinkSqlserver);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__TestLinkSqlserver, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__TestLinkSqlserver);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__TestLinkSqlserver, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__TestLinkSqlserver location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__TestLinkSqlserver(struct soap *soap, const struct ns1__TestLinkSqlserver *a, const char *tag, const char *type)
{
	if (soap_out_ns1__TestLinkSqlserver(soap, tag ? tag : "ns1:TestLinkSqlserver", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__TestLinkSqlserver * SOAP_FMAC4 soap_get_ns1__TestLinkSqlserver(struct soap *soap, struct ns1__TestLinkSqlserver *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__TestLinkSqlserver(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__TestLinkSqlserverResponse(struct soap *soap, struct ns1__TestLinkSqlserverResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->TestLinkSqlserverResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__TestLinkSqlserverResponse(struct soap *soap, const struct ns1__TestLinkSqlserverResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->TestLinkSqlserverResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TestLinkSqlserverResponse(struct soap *soap, const char *tag, int id, const struct ns1__TestLinkSqlserverResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__TestLinkSqlserverResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "TestLinkSqlserverResult", -1, &a->TestLinkSqlserverResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__TestLinkSqlserverResponse * SOAP_FMAC4 soap_in_ns1__TestLinkSqlserverResponse(struct soap *soap, const char *tag, struct ns1__TestLinkSqlserverResponse *a, const char *type)
{
	size_t soap_flag_TestLinkSqlserverResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__TestLinkSqlserverResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__TestLinkSqlserverResponse, sizeof(struct ns1__TestLinkSqlserverResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__TestLinkSqlserverResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TestLinkSqlserverResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "TestLinkSqlserverResult", &a->TestLinkSqlserverResult, "xsd:string"))
				{	soap_flag_TestLinkSqlserverResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TestLinkSqlserverResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__TestLinkSqlserverResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__TestLinkSqlserverResponse, SOAP_TYPE_ns1__TestLinkSqlserverResponse, sizeof(struct ns1__TestLinkSqlserverResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__TestLinkSqlserverResponse * SOAP_FMAC2 soap_instantiate_ns1__TestLinkSqlserverResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__TestLinkSqlserverResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__TestLinkSqlserverResponse *p;
	size_t k = sizeof(struct ns1__TestLinkSqlserverResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__TestLinkSqlserverResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__TestLinkSqlserverResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__TestLinkSqlserverResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__TestLinkSqlserverResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__TestLinkSqlserverResponse(struct soap *soap, const struct ns1__TestLinkSqlserverResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__TestLinkSqlserverResponse(soap, tag ? tag : "ns1:TestLinkSqlserverResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__TestLinkSqlserverResponse * SOAP_FMAC4 soap_get_ns1__TestLinkSqlserverResponse(struct soap *soap, struct ns1__TestLinkSqlserverResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__TestLinkSqlserverResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__showExistLink(struct soap *soap, struct ns1__showExistLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__showExistLink(struct soap *soap, const struct ns1__showExistLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__showExistLink(struct soap *soap, const char *tag, int id, const struct ns1__showExistLink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__showExistLink), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__showExistLink * SOAP_FMAC4 soap_in_ns1__showExistLink(struct soap *soap, const char *tag, struct ns1__showExistLink *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__showExistLink*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__showExistLink, sizeof(struct ns1__showExistLink), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__showExistLink(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__showExistLink *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__showExistLink, SOAP_TYPE_ns1__showExistLink, sizeof(struct ns1__showExistLink), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__showExistLink * SOAP_FMAC2 soap_instantiate_ns1__showExistLink(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__showExistLink(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__showExistLink *p;
	size_t k = sizeof(struct ns1__showExistLink);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__showExistLink, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__showExistLink);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__showExistLink, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__showExistLink location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__showExistLink(struct soap *soap, const struct ns1__showExistLink *a, const char *tag, const char *type)
{
	if (soap_out_ns1__showExistLink(soap, tag ? tag : "ns1:showExistLink", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__showExistLink * SOAP_FMAC4 soap_get_ns1__showExistLink(struct soap *soap, struct ns1__showExistLink *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__showExistLink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__showExistLinkResponse(struct soap *soap, struct ns1__showExistLinkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->showExistLinkResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__showExistLinkResponse(struct soap *soap, const struct ns1__showExistLinkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->showExistLinkResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__showExistLinkResponse(struct soap *soap, const char *tag, int id, const struct ns1__showExistLinkResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__showExistLinkResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "showExistLinkResult", -1, &a->showExistLinkResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__showExistLinkResponse * SOAP_FMAC4 soap_in_ns1__showExistLinkResponse(struct soap *soap, const char *tag, struct ns1__showExistLinkResponse *a, const char *type)
{
	size_t soap_flag_showExistLinkResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__showExistLinkResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__showExistLinkResponse, sizeof(struct ns1__showExistLinkResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__showExistLinkResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_showExistLinkResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "showExistLinkResult", &a->showExistLinkResult, "xsd:string"))
				{	soap_flag_showExistLinkResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_showExistLinkResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__showExistLinkResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__showExistLinkResponse, SOAP_TYPE_ns1__showExistLinkResponse, sizeof(struct ns1__showExistLinkResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__showExistLinkResponse * SOAP_FMAC2 soap_instantiate_ns1__showExistLinkResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__showExistLinkResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__showExistLinkResponse *p;
	size_t k = sizeof(struct ns1__showExistLinkResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__showExistLinkResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__showExistLinkResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__showExistLinkResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__showExistLinkResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__showExistLinkResponse(struct soap *soap, const struct ns1__showExistLinkResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__showExistLinkResponse(soap, tag ? tag : "ns1:showExistLinkResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__showExistLinkResponse * SOAP_FMAC4 soap_get_ns1__showExistLinkResponse(struct soap *soap, struct ns1__showExistLinkResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__showExistLinkResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__clearLink(struct soap *soap, struct ns1__clearLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->bTimeContrl);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__clearLink(struct soap *soap, const struct ns1__clearLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__clearLink(struct soap *soap, const char *tag, int id, const struct ns1__clearLink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__clearLink), type))
		return soap->error;
	if (soap_out_bool(soap, "bTimeContrl", -1, &a->bTimeContrl, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__clearLink * SOAP_FMAC4 soap_in_ns1__clearLink(struct soap *soap, const char *tag, struct ns1__clearLink *a, const char *type)
{
	size_t soap_flag_bTimeContrl = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__clearLink*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__clearLink, sizeof(struct ns1__clearLink), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__clearLink(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_bTimeContrl && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "bTimeContrl", &a->bTimeContrl, "xsd:boolean"))
				{	soap_flag_bTimeContrl--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_bTimeContrl > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__clearLink *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__clearLink, SOAP_TYPE_ns1__clearLink, sizeof(struct ns1__clearLink), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__clearLink * SOAP_FMAC2 soap_instantiate_ns1__clearLink(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__clearLink(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__clearLink *p;
	size_t k = sizeof(struct ns1__clearLink);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__clearLink, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__clearLink);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__clearLink, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__clearLink location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__clearLink(struct soap *soap, const struct ns1__clearLink *a, const char *tag, const char *type)
{
	if (soap_out_ns1__clearLink(soap, tag ? tag : "ns1:clearLink", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__clearLink * SOAP_FMAC4 soap_get_ns1__clearLink(struct soap *soap, struct ns1__clearLink *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__clearLink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__clearLinkResponse(struct soap *soap, struct ns1__clearLinkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->clearLinkResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__clearLinkResponse(struct soap *soap, const struct ns1__clearLinkResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__wstring(soap, &a->clearLinkResult);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__clearLinkResponse(struct soap *soap, const char *tag, int id, const struct ns1__clearLinkResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__clearLinkResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "clearLinkResult", -1, &a->clearLinkResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__clearLinkResponse * SOAP_FMAC4 soap_in_ns1__clearLinkResponse(struct soap *soap, const char *tag, struct ns1__clearLinkResponse *a, const char *type)
{
	size_t soap_flag_clearLinkResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__clearLinkResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__clearLinkResponse, sizeof(struct ns1__clearLinkResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__clearLinkResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_clearLinkResult && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, "clearLinkResult", &a->clearLinkResult, "xsd:string"))
				{	soap_flag_clearLinkResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_clearLinkResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__clearLinkResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__clearLinkResponse, SOAP_TYPE_ns1__clearLinkResponse, sizeof(struct ns1__clearLinkResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__clearLinkResponse * SOAP_FMAC2 soap_instantiate_ns1__clearLinkResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__clearLinkResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__clearLinkResponse *p;
	size_t k = sizeof(struct ns1__clearLinkResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__clearLinkResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__clearLinkResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__clearLinkResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__clearLinkResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__clearLinkResponse(struct soap *soap, const struct ns1__clearLinkResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__clearLinkResponse(soap, tag ? tag : "ns1:clearLinkResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__clearLinkResponse * SOAP_FMAC4 soap_get_ns1__clearLinkResponse(struct soap *soap, struct ns1__clearLinkResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__clearLinkResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddNumbers(struct soap *soap, struct ns1__AddNumbers *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->NumberOne);
	soap_default_int(soap, &a->NumberTwo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddNumbers(struct soap *soap, const struct ns1__AddNumbers *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddNumbers(struct soap *soap, const char *tag, int id, const struct ns1__AddNumbers *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AddNumbers), type))
		return soap->error;
	if (soap_out_int(soap, "NumberOne", -1, &a->NumberOne, ""))
		return soap->error;
	if (soap_out_int(soap, "NumberTwo", -1, &a->NumberTwo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__AddNumbers * SOAP_FMAC4 soap_in_ns1__AddNumbers(struct soap *soap, const char *tag, struct ns1__AddNumbers *a, const char *type)
{
	size_t soap_flag_NumberOne = 1;
	size_t soap_flag_NumberTwo = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__AddNumbers*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AddNumbers, sizeof(struct ns1__AddNumbers), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__AddNumbers(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NumberOne && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "NumberOne", &a->NumberOne, "xsd:int"))
				{	soap_flag_NumberOne--;
					continue;
				}
			}
			if (soap_flag_NumberTwo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "NumberTwo", &a->NumberTwo, "xsd:int"))
				{	soap_flag_NumberTwo--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_NumberOne > 0 || soap_flag_NumberTwo > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__AddNumbers *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AddNumbers, SOAP_TYPE_ns1__AddNumbers, sizeof(struct ns1__AddNumbers), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__AddNumbers * SOAP_FMAC2 soap_instantiate_ns1__AddNumbers(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AddNumbers(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__AddNumbers *p;
	size_t k = sizeof(struct ns1__AddNumbers);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__AddNumbers, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__AddNumbers);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__AddNumbers, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__AddNumbers location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddNumbers(struct soap *soap, const struct ns1__AddNumbers *a, const char *tag, const char *type)
{
	if (soap_out_ns1__AddNumbers(soap, tag ? tag : "ns1:AddNumbers", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__AddNumbers * SOAP_FMAC4 soap_get_ns1__AddNumbers(struct soap *soap, struct ns1__AddNumbers *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AddNumbers(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AddNumbersResponse(struct soap *soap, struct ns1__AddNumbersResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->AddNumbersResult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AddNumbersResponse(struct soap *soap, const struct ns1__AddNumbersResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddNumbersResponse(struct soap *soap, const char *tag, int id, const struct ns1__AddNumbersResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AddNumbersResponse), type))
		return soap->error;
	if (soap_out_int(soap, "AddNumbersResult", -1, &a->AddNumbersResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__AddNumbersResponse * SOAP_FMAC4 soap_in_ns1__AddNumbersResponse(struct soap *soap, const char *tag, struct ns1__AddNumbersResponse *a, const char *type)
{
	size_t soap_flag_AddNumbersResult = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns1__AddNumbersResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AddNumbersResponse, sizeof(struct ns1__AddNumbersResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__AddNumbersResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddNumbersResult && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "AddNumbersResult", &a->AddNumbersResult, "xsd:int"))
				{	soap_flag_AddNumbersResult--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AddNumbersResult > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__AddNumbersResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AddNumbersResponse, SOAP_TYPE_ns1__AddNumbersResponse, sizeof(struct ns1__AddNumbersResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__AddNumbersResponse * SOAP_FMAC2 soap_instantiate_ns1__AddNumbersResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AddNumbersResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__AddNumbersResponse *p;
	size_t k = sizeof(struct ns1__AddNumbersResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__AddNumbersResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns1__AddNumbersResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns1__AddNumbersResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__AddNumbersResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddNumbersResponse(struct soap *soap, const struct ns1__AddNumbersResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__AddNumbersResponse(soap, tag ? tag : "ns1:AddNumbersResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__AddNumbersResponse * SOAP_FMAC4 soap_get_ns1__AddNumbersResponse(struct soap *soap, struct ns1__AddNumbersResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AddNumbersResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
