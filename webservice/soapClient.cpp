/* soapClient.cpp
   Generated by gSOAP 2.8.111 for .\Service1.asmx.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.111 2021-02-20 08:59:16 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__AddNumbers(struct soap *soap, const char *soap_endpoint, const char *soap_action, int NumberOne, int NumberTwo, int &AddNumbersResult)
{	if (soap_send_ns1__AddNumbers(soap, soap_endpoint, soap_action, NumberOne, NumberTwo) || soap_recv_ns1__AddNumbers(soap, AddNumbersResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__AddNumbers(struct soap *soap, const char *soap_endpoint, const char *soap_action, int NumberOne, int NumberTwo)
{	struct ns1__AddNumbers soap_tmp_ns1__AddNumbers;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddNumbers";
	soap_tmp_ns1__AddNumbers.NumberOne = NumberOne;
	soap_tmp_ns1__AddNumbers.NumberTwo = NumberTwo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__AddNumbers(soap, &soap_tmp_ns1__AddNumbers);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__AddNumbers(soap, &soap_tmp_ns1__AddNumbers, "ns1:AddNumbers", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__AddNumbers(soap, &soap_tmp_ns1__AddNumbers, "ns1:AddNumbers", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__AddNumbers(struct soap *soap, int &AddNumbersResult)
{
	struct ns1__AddNumbersResponse *soap_tmp_ns1__AddNumbersResponse;
	soap_default_int(soap, &AddNumbersResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__AddNumbersResponse = soap_get_ns1__AddNumbersResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__AddNumbersResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddNumbersResult = soap_tmp_ns1__AddNumbersResponse->AddNumbersResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__clearLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, bool bTimeContrl, std::wstring &clearLinkResult)
{	if (soap_send_ns1__clearLink(soap, soap_endpoint, soap_action, bTimeContrl) || soap_recv_ns1__clearLink(soap, clearLinkResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__clearLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, bool bTimeContrl)
{	struct ns1__clearLink soap_tmp_ns1__clearLink;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/clearLink";
	soap_tmp_ns1__clearLink.bTimeContrl = bTimeContrl;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__clearLink(soap, &soap_tmp_ns1__clearLink);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__clearLink(soap, &soap_tmp_ns1__clearLink, "ns1:clearLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__clearLink(soap, &soap_tmp_ns1__clearLink, "ns1:clearLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__clearLink(struct soap *soap, std::wstring &clearLinkResult)
{
	struct ns1__clearLinkResponse *soap_tmp_ns1__clearLinkResponse;
	soap_default_std__wstring(soap, &clearLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__clearLinkResponse = soap_get_ns1__clearLinkResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__clearLinkResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	clearLinkResult = soap_tmp_ns1__clearLinkResponse->clearLinkResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__showExistLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::wstring &showExistLinkResult)
{	if (soap_send_ns1__showExistLink(soap, soap_endpoint, soap_action) || soap_recv_ns1__showExistLink(soap, showExistLinkResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__showExistLink(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns1__showExistLink soap_tmp_ns1__showExistLink;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/showExistLink";
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__showExistLink(soap, &soap_tmp_ns1__showExistLink);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__showExistLink(soap, &soap_tmp_ns1__showExistLink, "ns1:showExistLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__showExistLink(soap, &soap_tmp_ns1__showExistLink, "ns1:showExistLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__showExistLink(struct soap *soap, std::wstring &showExistLinkResult)
{
	struct ns1__showExistLinkResponse *soap_tmp_ns1__showExistLinkResponse;
	soap_default_std__wstring(soap, &showExistLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__showExistLinkResponse = soap_get_ns1__showExistLinkResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__showExistLinkResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	showExistLinkResult = soap_tmp_ns1__showExistLinkResponse->showExistLinkResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__TestLinkSqlserver(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, std::wstring &TestLinkSqlserverResult)
{	if (soap_send_ns1__TestLinkSqlserver(soap, soap_endpoint, soap_action, serverInfo) || soap_recv_ns1__TestLinkSqlserver(soap, TestLinkSqlserverResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__TestLinkSqlserver(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo)
{	struct ns1__TestLinkSqlserver soap_tmp_ns1__TestLinkSqlserver;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/TestLinkSqlserver";
	soap_tmp_ns1__TestLinkSqlserver.serverInfo = serverInfo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__TestLinkSqlserver(soap, &soap_tmp_ns1__TestLinkSqlserver);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__TestLinkSqlserver(soap, &soap_tmp_ns1__TestLinkSqlserver, "ns1:TestLinkSqlserver", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__TestLinkSqlserver(soap, &soap_tmp_ns1__TestLinkSqlserver, "ns1:TestLinkSqlserver", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__TestLinkSqlserver(struct soap *soap, std::wstring &TestLinkSqlserverResult)
{
	struct ns1__TestLinkSqlserverResponse *soap_tmp_ns1__TestLinkSqlserverResponse;
	soap_default_std__wstring(soap, &TestLinkSqlserverResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__TestLinkSqlserverResponse = soap_get_ns1__TestLinkSqlserverResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__TestLinkSqlserverResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	TestLinkSqlserverResult = soap_tmp_ns1__TestLinkSqlserverResponse->TestLinkSqlserverResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__executeSql(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSqlResult)
{	if (soap_send_ns1__executeSql(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_ns1__executeSql(soap, executeSqlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__executeSql(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct ns1__executeSql soap_tmp_ns1__executeSql;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql";
	soap_tmp_ns1__executeSql.serverInfo = serverInfo;
	soap_tmp_ns1__executeSql.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__executeSql(soap, &soap_tmp_ns1__executeSql);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__executeSql(soap, &soap_tmp_ns1__executeSql, "ns1:executeSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__executeSql(soap, &soap_tmp_ns1__executeSql, "ns1:executeSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__executeSql(struct soap *soap, std::wstring &executeSqlResult)
{
	struct ns1__executeSqlResponse *soap_tmp_ns1__executeSqlResponse;
	soap_default_std__wstring(soap, &executeSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__executeSqlResponse = soap_get_ns1__executeSqlResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__executeSqlResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSqlResult = soap_tmp_ns1__executeSqlResponse->executeSqlResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__executeSql_USCOREbackEncord(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSql_USCOREbackEncordResult)
{	if (soap_send_ns1__executeSql_USCOREbackEncord(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_ns1__executeSql_USCOREbackEncord(soap, executeSql_USCOREbackEncordResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__executeSql_USCOREbackEncord(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct ns1__executeSql_USCOREbackEncord soap_tmp_ns1__executeSql_USCOREbackEncord;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_backEncord";
	soap_tmp_ns1__executeSql_USCOREbackEncord.serverInfo = serverInfo;
	soap_tmp_ns1__executeSql_USCOREbackEncord.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__executeSql_USCOREbackEncord(soap, &soap_tmp_ns1__executeSql_USCOREbackEncord);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__executeSql_USCOREbackEncord(soap, &soap_tmp_ns1__executeSql_USCOREbackEncord, "ns1:executeSql_backEncord", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__executeSql_USCOREbackEncord(soap, &soap_tmp_ns1__executeSql_USCOREbackEncord, "ns1:executeSql_backEncord", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__executeSql_USCOREbackEncord(struct soap *soap, std::wstring &executeSql_USCOREbackEncordResult)
{
	struct ns1__executeSql_USCOREbackEncordResponse *soap_tmp_ns1__executeSql_USCOREbackEncordResponse;
	soap_default_std__wstring(soap, &executeSql_USCOREbackEncordResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__executeSql_USCOREbackEncordResponse = soap_get_ns1__executeSql_USCOREbackEncordResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__executeSql_USCOREbackEncordResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREbackEncordResult = soap_tmp_ns1__executeSql_USCOREbackEncordResponse->executeSql_USCOREbackEncordResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__executeSql_USCOREencode(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSql_USCOREencodeResult)
{	if (soap_send_ns1__executeSql_USCOREencode(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_ns1__executeSql_USCOREencode(soap, executeSql_USCOREencodeResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__executeSql_USCOREencode(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct ns1__executeSql_USCOREencode soap_tmp_ns1__executeSql_USCOREencode;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_encode";
	soap_tmp_ns1__executeSql_USCOREencode.serverInfo = serverInfo;
	soap_tmp_ns1__executeSql_USCOREencode.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__executeSql_USCOREencode(soap, &soap_tmp_ns1__executeSql_USCOREencode);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__executeSql_USCOREencode(soap, &soap_tmp_ns1__executeSql_USCOREencode, "ns1:executeSql_encode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__executeSql_USCOREencode(soap, &soap_tmp_ns1__executeSql_USCOREencode, "ns1:executeSql_encode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__executeSql_USCOREencode(struct soap *soap, std::wstring &executeSql_USCOREencodeResult)
{
	struct ns1__executeSql_USCOREencodeResponse *soap_tmp_ns1__executeSql_USCOREencodeResponse;
	soap_default_std__wstring(soap, &executeSql_USCOREencodeResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__executeSql_USCOREencodeResponse = soap_get_ns1__executeSql_USCOREencodeResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__executeSql_USCOREencodeResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREencodeResult = soap_tmp_ns1__executeSql_USCOREencodeResponse->executeSql_USCOREencodeResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__insertXml(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strXml, bool encode, std::wstring &insertXmlResult)
{	if (soap_send_ns1__insertXml(soap, soap_endpoint, soap_action, serverInfo, strXml, encode) || soap_recv_ns1__insertXml(soap, insertXmlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__insertXml(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strXml, bool encode)
{	struct ns1__insertXml soap_tmp_ns1__insertXml;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/insertXml";
	soap_tmp_ns1__insertXml.serverInfo = serverInfo;
	soap_tmp_ns1__insertXml.strXml = strXml;
	soap_tmp_ns1__insertXml.encode = encode;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__insertXml(soap, &soap_tmp_ns1__insertXml);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__insertXml(soap, &soap_tmp_ns1__insertXml, "ns1:insertXml", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__insertXml(soap, &soap_tmp_ns1__insertXml, "ns1:insertXml", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__insertXml(struct soap *soap, std::wstring &insertXmlResult)
{
	struct ns1__insertXmlResponse *soap_tmp_ns1__insertXmlResponse;
	soap_default_std__wstring(soap, &insertXmlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__insertXmlResponse = soap_get_ns1__insertXmlResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__insertXmlResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	insertXmlResult = soap_tmp_ns1__insertXmlResponse->insertXmlResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__executeStorageProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& StorageProcessName, const std::wstring& Parameters, std::wstring &executeStorageProcessResult)
{	if (soap_send_ns1__executeStorageProcess(soap, soap_endpoint, soap_action, serverInfo, StorageProcessName, Parameters) || soap_recv_ns1__executeStorageProcess(soap, executeStorageProcessResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__executeStorageProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& StorageProcessName, const std::wstring& Parameters)
{	struct ns1__executeStorageProcess soap_tmp_ns1__executeStorageProcess;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeStorageProcess";
	soap_tmp_ns1__executeStorageProcess.serverInfo = serverInfo;
	soap_tmp_ns1__executeStorageProcess.StorageProcessName = StorageProcessName;
	soap_tmp_ns1__executeStorageProcess.Parameters = Parameters;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__executeStorageProcess(soap, &soap_tmp_ns1__executeStorageProcess);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__executeStorageProcess(soap, &soap_tmp_ns1__executeStorageProcess, "ns1:executeStorageProcess", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__executeStorageProcess(soap, &soap_tmp_ns1__executeStorageProcess, "ns1:executeStorageProcess", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__executeStorageProcess(struct soap *soap, std::wstring &executeStorageProcessResult)
{
	struct ns1__executeStorageProcessResponse *soap_tmp_ns1__executeStorageProcessResponse;
	soap_default_std__wstring(soap, &executeStorageProcessResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__executeStorageProcessResponse = soap_get_ns1__executeStorageProcessResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__executeStorageProcessResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeStorageProcessResult = soap_tmp_ns1__executeStorageProcessResponse->executeStorageProcessResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__AddFileToSql(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strFileName, const std::wstring& sPointer, const std::wstring& tablenamefieldname, const std::wstring& fileIP, const std::wstring& fileUse, const std::wstring& filePassword, std::wstring &AddFileToSqlResult)
{	if (soap_send_ns1__AddFileToSql(soap, soap_endpoint, soap_action, serverInfo, strFileName, sPointer, tablenamefieldname, fileIP, fileUse, filePassword) || soap_recv_ns1__AddFileToSql(soap, AddFileToSqlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__AddFileToSql(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strFileName, const std::wstring& sPointer, const std::wstring& tablenamefieldname, const std::wstring& fileIP, const std::wstring& fileUse, const std::wstring& filePassword)
{	struct ns1__AddFileToSql soap_tmp_ns1__AddFileToSql;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddFileToSql";
	soap_tmp_ns1__AddFileToSql.serverInfo = serverInfo;
	soap_tmp_ns1__AddFileToSql.strFileName = strFileName;
	soap_tmp_ns1__AddFileToSql.sPointer = sPointer;
	soap_tmp_ns1__AddFileToSql.tablenamefieldname = tablenamefieldname;
	soap_tmp_ns1__AddFileToSql.fileIP = fileIP;
	soap_tmp_ns1__AddFileToSql.fileUse = fileUse;
	soap_tmp_ns1__AddFileToSql.filePassword = filePassword;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__AddFileToSql(soap, &soap_tmp_ns1__AddFileToSql);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__AddFileToSql(soap, &soap_tmp_ns1__AddFileToSql, "ns1:AddFileToSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__AddFileToSql(soap, &soap_tmp_ns1__AddFileToSql, "ns1:AddFileToSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__AddFileToSql(struct soap *soap, std::wstring &AddFileToSqlResult)
{
	struct ns1__AddFileToSqlResponse *soap_tmp_ns1__AddFileToSqlResponse;
	soap_default_std__wstring(soap, &AddFileToSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__AddFileToSqlResponse = soap_get_ns1__AddFileToSqlResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__AddFileToSqlResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddFileToSqlResult = soap_tmp_ns1__AddFileToSqlResponse->AddFileToSqlResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__AddNumbers_(struct soap *soap, const char *soap_endpoint, const char *soap_action, int NumberOne, int NumberTwo, int &AddNumbersResult)
{	if (soap_send_ns1__AddNumbers_(soap, soap_endpoint, soap_action, NumberOne, NumberTwo) || soap_recv_ns1__AddNumbers_(soap, AddNumbersResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__AddNumbers_(struct soap *soap, const char *soap_endpoint, const char *soap_action, int NumberOne, int NumberTwo)
{	struct ns1__AddNumbers_ soap_tmp_ns1__AddNumbers_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddNumbers";
	soap_tmp_ns1__AddNumbers_.NumberOne = NumberOne;
	soap_tmp_ns1__AddNumbers_.NumberTwo = NumberTwo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__AddNumbers_(soap, &soap_tmp_ns1__AddNumbers_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__AddNumbers_(soap, &soap_tmp_ns1__AddNumbers_, "ns1:AddNumbers", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__AddNumbers_(soap, &soap_tmp_ns1__AddNumbers_, "ns1:AddNumbers", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__AddNumbers_(struct soap *soap, int &AddNumbersResult)
{
	struct ns1__AddNumbers_Response *soap_tmp_ns1__AddNumbers_Response;
	soap_default_int(soap, &AddNumbersResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__AddNumbers_Response = soap_get_ns1__AddNumbers_Response(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__AddNumbers_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddNumbersResult = soap_tmp_ns1__AddNumbers_Response->AddNumbersResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__clearLink_(struct soap *soap, const char *soap_endpoint, const char *soap_action, bool bTimeContrl, std::wstring &clearLinkResult)
{	if (soap_send_ns1__clearLink_(soap, soap_endpoint, soap_action, bTimeContrl) || soap_recv_ns1__clearLink_(soap, clearLinkResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__clearLink_(struct soap *soap, const char *soap_endpoint, const char *soap_action, bool bTimeContrl)
{	struct ns1__clearLink_ soap_tmp_ns1__clearLink_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/clearLink";
	soap_tmp_ns1__clearLink_.bTimeContrl = bTimeContrl;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__clearLink_(soap, &soap_tmp_ns1__clearLink_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__clearLink_(soap, &soap_tmp_ns1__clearLink_, "ns1:clearLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__clearLink_(soap, &soap_tmp_ns1__clearLink_, "ns1:clearLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__clearLink_(struct soap *soap, std::wstring &clearLinkResult)
{
	struct ns1__clearLink_Response *soap_tmp_ns1__clearLink_Response;
	soap_default_std__wstring(soap, &clearLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__clearLink_Response = soap_get_ns1__clearLink_Response(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__clearLink_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	clearLinkResult = soap_tmp_ns1__clearLink_Response->clearLinkResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__showExistLink_(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::wstring &showExistLinkResult)
{	if (soap_send_ns1__showExistLink_(soap, soap_endpoint, soap_action) || soap_recv_ns1__showExistLink_(soap, showExistLinkResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__showExistLink_(struct soap *soap, const char *soap_endpoint, const char *soap_action)
{	struct ns1__showExistLink_ soap_tmp_ns1__showExistLink_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/showExistLink";
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__showExistLink_(soap, &soap_tmp_ns1__showExistLink_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__showExistLink_(soap, &soap_tmp_ns1__showExistLink_, "ns1:showExistLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__showExistLink_(soap, &soap_tmp_ns1__showExistLink_, "ns1:showExistLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__showExistLink_(struct soap *soap, std::wstring &showExistLinkResult)
{
	struct ns1__showExistLink_Response *soap_tmp_ns1__showExistLink_Response;
	soap_default_std__wstring(soap, &showExistLinkResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__showExistLink_Response = soap_get_ns1__showExistLink_Response(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__showExistLink_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	showExistLinkResult = soap_tmp_ns1__showExistLink_Response->showExistLinkResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__TestLinkSqlserver_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, std::wstring &TestLinkSqlserverResult)
{	if (soap_send_ns1__TestLinkSqlserver_(soap, soap_endpoint, soap_action, serverInfo) || soap_recv_ns1__TestLinkSqlserver_(soap, TestLinkSqlserverResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__TestLinkSqlserver_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo)
{	struct ns1__TestLinkSqlserver_ soap_tmp_ns1__TestLinkSqlserver_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/TestLinkSqlserver";
	soap_tmp_ns1__TestLinkSqlserver_.serverInfo = serverInfo;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__TestLinkSqlserver_(soap, &soap_tmp_ns1__TestLinkSqlserver_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__TestLinkSqlserver_(soap, &soap_tmp_ns1__TestLinkSqlserver_, "ns1:TestLinkSqlserver", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__TestLinkSqlserver_(soap, &soap_tmp_ns1__TestLinkSqlserver_, "ns1:TestLinkSqlserver", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__TestLinkSqlserver_(struct soap *soap, std::wstring &TestLinkSqlserverResult)
{
	struct ns1__TestLinkSqlserver_Response *soap_tmp_ns1__TestLinkSqlserver_Response;
	soap_default_std__wstring(soap, &TestLinkSqlserverResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__TestLinkSqlserver_Response = soap_get_ns1__TestLinkSqlserver_Response(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__TestLinkSqlserver_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	TestLinkSqlserverResult = soap_tmp_ns1__TestLinkSqlserver_Response->TestLinkSqlserverResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__executeSql_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSqlResult)
{	if (soap_send_ns1__executeSql_(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_ns1__executeSql_(soap, executeSqlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__executeSql_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct ns1__executeSql_ soap_tmp_ns1__executeSql_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql";
	soap_tmp_ns1__executeSql_.serverInfo = serverInfo;
	soap_tmp_ns1__executeSql_.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__executeSql_(soap, &soap_tmp_ns1__executeSql_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__executeSql_(soap, &soap_tmp_ns1__executeSql_, "ns1:executeSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__executeSql_(soap, &soap_tmp_ns1__executeSql_, "ns1:executeSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__executeSql_(struct soap *soap, std::wstring &executeSqlResult)
{
	struct ns1__executeSql_Response *soap_tmp_ns1__executeSql_Response;
	soap_default_std__wstring(soap, &executeSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__executeSql_Response = soap_get_ns1__executeSql_Response(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__executeSql_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSqlResult = soap_tmp_ns1__executeSql_Response->executeSqlResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__executeSql_USCOREbackEncord_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSql_USCOREbackEncordResult)
{	if (soap_send_ns1__executeSql_USCOREbackEncord_(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_ns1__executeSql_USCOREbackEncord_(soap, executeSql_USCOREbackEncordResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__executeSql_USCOREbackEncord_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct ns1__executeSql_USCOREbackEncord_ soap_tmp_ns1__executeSql_USCOREbackEncord_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_backEncord";
	soap_tmp_ns1__executeSql_USCOREbackEncord_.serverInfo = serverInfo;
	soap_tmp_ns1__executeSql_USCOREbackEncord_.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__executeSql_USCOREbackEncord_(soap, &soap_tmp_ns1__executeSql_USCOREbackEncord_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__executeSql_USCOREbackEncord_(soap, &soap_tmp_ns1__executeSql_USCOREbackEncord_, "ns1:executeSql_backEncord", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__executeSql_USCOREbackEncord_(soap, &soap_tmp_ns1__executeSql_USCOREbackEncord_, "ns1:executeSql_backEncord", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__executeSql_USCOREbackEncord_(struct soap *soap, std::wstring &executeSql_USCOREbackEncordResult)
{
	struct ns1__executeSql_USCOREbackEncord_Response *soap_tmp_ns1__executeSql_USCOREbackEncord_Response;
	soap_default_std__wstring(soap, &executeSql_USCOREbackEncordResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__executeSql_USCOREbackEncord_Response = soap_get_ns1__executeSql_USCOREbackEncord_Response(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__executeSql_USCOREbackEncord_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREbackEncordResult = soap_tmp_ns1__executeSql_USCOREbackEncord_Response->executeSql_USCOREbackEncordResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__executeSql_USCOREencode_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql, std::wstring &executeSql_USCOREencodeResult)
{	if (soap_send_ns1__executeSql_USCOREencode_(soap, soap_endpoint, soap_action, serverInfo, sSql) || soap_recv_ns1__executeSql_USCOREencode_(soap, executeSql_USCOREencodeResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__executeSql_USCOREencode_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& sSql)
{	struct ns1__executeSql_USCOREencode_ soap_tmp_ns1__executeSql_USCOREencode_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeSql_encode";
	soap_tmp_ns1__executeSql_USCOREencode_.serverInfo = serverInfo;
	soap_tmp_ns1__executeSql_USCOREencode_.sSql = sSql;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__executeSql_USCOREencode_(soap, &soap_tmp_ns1__executeSql_USCOREencode_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__executeSql_USCOREencode_(soap, &soap_tmp_ns1__executeSql_USCOREencode_, "ns1:executeSql_encode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__executeSql_USCOREencode_(soap, &soap_tmp_ns1__executeSql_USCOREencode_, "ns1:executeSql_encode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__executeSql_USCOREencode_(struct soap *soap, std::wstring &executeSql_USCOREencodeResult)
{
	struct ns1__executeSql_USCOREencode_Response *soap_tmp_ns1__executeSql_USCOREencode_Response;
	soap_default_std__wstring(soap, &executeSql_USCOREencodeResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__executeSql_USCOREencode_Response = soap_get_ns1__executeSql_USCOREencode_Response(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__executeSql_USCOREencode_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeSql_USCOREencodeResult = soap_tmp_ns1__executeSql_USCOREencode_Response->executeSql_USCOREencodeResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__insertXml_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strXml, bool encode, std::wstring &insertXmlResult)
{	if (soap_send_ns1__insertXml_(soap, soap_endpoint, soap_action, serverInfo, strXml, encode) || soap_recv_ns1__insertXml_(soap, insertXmlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__insertXml_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strXml, bool encode)
{	struct ns1__insertXml_ soap_tmp_ns1__insertXml_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/insertXml";
	soap_tmp_ns1__insertXml_.serverInfo = serverInfo;
	soap_tmp_ns1__insertXml_.strXml = strXml;
	soap_tmp_ns1__insertXml_.encode = encode;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__insertXml_(soap, &soap_tmp_ns1__insertXml_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__insertXml_(soap, &soap_tmp_ns1__insertXml_, "ns1:insertXml", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__insertXml_(soap, &soap_tmp_ns1__insertXml_, "ns1:insertXml", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__insertXml_(struct soap *soap, std::wstring &insertXmlResult)
{
	struct ns1__insertXml_Response *soap_tmp_ns1__insertXml_Response;
	soap_default_std__wstring(soap, &insertXmlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__insertXml_Response = soap_get_ns1__insertXml_Response(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__insertXml_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	insertXmlResult = soap_tmp_ns1__insertXml_Response->insertXmlResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__executeStorageProcess_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& StorageProcessName, const std::wstring& Parameters, std::wstring &executeStorageProcessResult)
{	if (soap_send_ns1__executeStorageProcess_(soap, soap_endpoint, soap_action, serverInfo, StorageProcessName, Parameters) || soap_recv_ns1__executeStorageProcess_(soap, executeStorageProcessResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__executeStorageProcess_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& StorageProcessName, const std::wstring& Parameters)
{	struct ns1__executeStorageProcess_ soap_tmp_ns1__executeStorageProcess_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/executeStorageProcess";
	soap_tmp_ns1__executeStorageProcess_.serverInfo = serverInfo;
	soap_tmp_ns1__executeStorageProcess_.StorageProcessName = StorageProcessName;
	soap_tmp_ns1__executeStorageProcess_.Parameters = Parameters;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__executeStorageProcess_(soap, &soap_tmp_ns1__executeStorageProcess_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__executeStorageProcess_(soap, &soap_tmp_ns1__executeStorageProcess_, "ns1:executeStorageProcess", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__executeStorageProcess_(soap, &soap_tmp_ns1__executeStorageProcess_, "ns1:executeStorageProcess", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__executeStorageProcess_(struct soap *soap, std::wstring &executeStorageProcessResult)
{
	struct ns1__executeStorageProcess_Response *soap_tmp_ns1__executeStorageProcess_Response;
	soap_default_std__wstring(soap, &executeStorageProcessResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__executeStorageProcess_Response = soap_get_ns1__executeStorageProcess_Response(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__executeStorageProcess_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	executeStorageProcessResult = soap_tmp_ns1__executeStorageProcess_Response->executeStorageProcessResult;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__AddFileToSql_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strFileName, const std::wstring& sPointer, const std::wstring& tablenamefieldname, const std::wstring& fileIP, const std::wstring& fileUse, const std::wstring& filePassword, std::wstring &AddFileToSqlResult)
{	if (soap_send_ns1__AddFileToSql_(soap, soap_endpoint, soap_action, serverInfo, strFileName, sPointer, tablenamefieldname, fileIP, fileUse, filePassword) || soap_recv_ns1__AddFileToSql_(soap, AddFileToSqlResult))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_ns1__AddFileToSql_(struct soap *soap, const char *soap_endpoint, const char *soap_action, const std::wstring& serverInfo, const std::wstring& strFileName, const std::wstring& sPointer, const std::wstring& tablenamefieldname, const std::wstring& fileIP, const std::wstring& fileUse, const std::wstring& filePassword)
{	struct ns1__AddFileToSql_ soap_tmp_ns1__AddFileToSql_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://218.26.30.70:81/WebServiceDemo/Service1.asmx";
	if (soap_action == NULL)
		soap_action = "http://Fantasy/WebServiceDemo/AddFileToSql";
	soap_tmp_ns1__AddFileToSql_.serverInfo = serverInfo;
	soap_tmp_ns1__AddFileToSql_.strFileName = strFileName;
	soap_tmp_ns1__AddFileToSql_.sPointer = sPointer;
	soap_tmp_ns1__AddFileToSql_.tablenamefieldname = tablenamefieldname;
	soap_tmp_ns1__AddFileToSql_.fileIP = fileIP;
	soap_tmp_ns1__AddFileToSql_.fileUse = fileUse;
	soap_tmp_ns1__AddFileToSql_.filePassword = filePassword;
	soap_begin(soap);
	soap_set_version(soap, 1); /* use SOAP1.1 */
	soap->encodingStyle = "http://www.w3.org/2003/05/soap-encoding"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns1__AddFileToSql_(soap, &soap_tmp_ns1__AddFileToSql_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__AddFileToSql_(soap, &soap_tmp_ns1__AddFileToSql_, "ns1:AddFileToSql", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__AddFileToSql_(soap, &soap_tmp_ns1__AddFileToSql_, "ns1:AddFileToSql", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_ns1__AddFileToSql_(struct soap *soap, std::wstring &AddFileToSqlResult)
{
	struct ns1__AddFileToSql_Response *soap_tmp_ns1__AddFileToSql_Response;
	soap_default_std__wstring(soap, &AddFileToSqlResult);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__AddFileToSql_Response = soap_get_ns1__AddFileToSql_Response(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__AddFileToSql_Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	AddFileToSqlResult = soap_tmp_ns1__AddFileToSql_Response->AddFileToSqlResult;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
